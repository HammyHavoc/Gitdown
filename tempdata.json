[
    {
        "name": "Simple quiz in the console with python.",
        "description": "How to make a simple quiz with python and some modules like os, colored, and json.",
        "tags": [
            "python",
            "quiz"
        ],
        "slug": "simple-quiz-in-the-console-with-python",
        "raw_content": "## Idea\r\nIn this tutorial, we will make a simple quiz program with python and some excellent modules like json, colored and random.\r\n\r\nWe will implement a point system and colorful feedback for the user. We also make it so the questions and answers are shuffled randomly.\r\n\r\nLet us get into it!\r\n\r\n## Imports\r\nWe start by importing several modules.\r\n\r\nWe need the `json` module to open the file where our quiz is located and parse it to a valid python list\/dictionary. Next, we also get the builtin-in `os` so we can clear the console later. To shuffle the answers and questions we get the `shuffle()` function from `random`. Last but not least we import colored which allows to color text in the console easily, this is the only module that we have to download with `pip install colored`.\r\n\r\n```python\r\n# Import json\r\nimport json\r\n\r\n# Import os to clear the console\r\nimport os\r\n\r\n# Import shuffle from random to shuffle the lists.\r\nfrom random import shuffle\r\n\r\n# Import colored so we can color text in the console.\r\n# Must be installed with pip install colored\r\nimport colored\r\n```\r\n\r\n## Setup\r\n\r\nNow we continue with the setup which includes all the stuff we do before the question loop.\r\n\r\nWe start by getting the contents of our `questions.json` file and we parse the json content to the data variable.\r\n\r\n```python\r\n# Opening the questions file\r\nwith open('questions.json', 'r') as f:\r\n    data = json.load(f)\r\n```\r\n\r\nThe file looks like this. As you see the questions lists contain the question as to the first item and an infinite amount of answers in another list as a second item. The first item in the answer list is always the right answer.\r\n\r\n```json\r\n{\r\n\t\"name\": \"Geography Quiz\",\r\n\t\"questions\": [\r\n\t\t[\"What is the Capital of France?\", [\"Paris\", \"Montpellier\", \"Toulouse\"]],\r\n\t\t[\"Which country shares a border with the US to to the South?\", [\"Mexico\", \"Canada\"]],\r\n\t\t[\"How is the desert in northern Africa called?\", [\"Sahara\", \"Gobi\", \"Urals\"]]\r\n\t]\r\n}\r\n```\r\n\r\nAfter opening the file we define some variables which will later use to tell the user how he did.\r\n\r\n```python\r\n# Amount of right answers.\r\nrightAnswers = 0\r\n\r\n# Amount of questions.\r\namountQuestions = len(data['questions'])\r\n```\r\n\r\nNow we also shuffle the list of questions in place.\r\n\r\n```python\r\n# Shuffle the list of questions.\r\nshuffle(data['questions'])\r\n```\r\n\r\n## `colorText` function\r\n\r\nTo make it even easier to use the `colored` module we make a little function to help us. This function simply returns a colored string. We do this because it would be tedious to reset the color on every string manually.\r\n\r\n```python\r\ndef colorText(text, color):\r\n    return f'{colored.fg(color)}{text}{colored.fg(15)}' # Reset color to white`\r\n```\r\n\r\n## Question Loop\r\n\r\nNow let's get into the main part of the program: The Question Loop. We loop over the previously shuffled list of questions and unpack it into two variables. We then clear the console.\r\n\r\n```python\r\n# Do all this for each question.\r\nfor question, answers in data['questions']:\r\n\r\n    # Clear Console\r\n    os.system('cls')\r\n```\r\n\r\nNext, we save the right answer to a variable we can do this because the first item in every answer list is the correct one. We also make the right index variable.\r\n\r\n```python\t\r\n    # get the right answer, which is the first item in list.\r\n    rightAnswer = answers[0]\r\n    rightIndex = 0\r\n```\r\n\r\nAfter that, we shuffle the answers and loop \/ enumerate over them so we get the index. Then we nicely format a string and if the current answer is the right one we set the right index variable to the current index.\r\n\r\n```python\r\n# Shuffle the list of answers\r\n    shuffle(answers)\r\n\r\n    print('\\n\\n'+question+'\\n')\r\n    for index, answer in enumerate(answers):\r\n        print(f'{index + 1}. {answer}')\r\n\r\n        if answer == rightAnswer:\r\n            rightIndex = index\r\n```\r\n\r\nWe continue by asking the user what his answer is, we want him or her to give us the index of the answer.\r\n\r\n```python\r\nanswerIndex = int(input('\\nType in the Number in front of the correct answer: '))\r\n```\r\n\r\nAfter we have the answer from the user we check if it was the right one, for this, we use the `rightIndex` variable. We then give the user a nice colored message and add one to the `rightAnswers` variable. If the answer was wrong we tell the user that and what the right answer would have been.\r\n\r\n```python\r\n    # Check if the correct answer was selected.\r\n    if answerIndex == (rightIndex + 1):\r\n        print(colorText('Right', 2))\r\n        rightAnswers += 1\r\n    else:\r\n        print(colorText('Wrong!', 1))\r\n        print(colorText(f'Right Answer -> {rightAnswer}', 1))\r\n\r\n\tinput('\\nEnter to Continue ...')\r\n```\r\n\r\n## Result\r\n\r\nAfter the question loop, we clear the console once again and we tell the user how he or she did.\r\n\r\n```python\r\n# Clear Console\r\nos.system('cls')\r\n\r\n# Showing the user how he did\r\nprint('\\n\\n'+f'You have {rightAnswers} out of {amountQuestions} questions right!')\r\n```\r\n\r\nThat's it!\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a quiz using Python code! See how you can add more features to this program such as more colors or multiple right answers.",
        "featured_image": "001 - Quiz Game\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 644,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:20",
            "post_date_gmt": "2023-02-11 12:55:20",
            "post_content": "<h2>Idea<\/h2>\n<p>In this tutorial, we will make a simple quiz program with python and some excellent modules like json, colored and random.<\/p>\n<p>We will implement a point system and colorful feedback for the user. We also make it so the questions and answers are shuffled randomly.<\/p>\n<p>Let us get into it!<\/p>\n<h2>Imports<\/h2>\n<p>We start by importing several modules.<\/p>\n<p>We need the <code>json<\/code> module to open the file where our quiz is located and parse it to a valid python list\/dictionary. Next, we also get the builtin-in <code>os<\/code> so we can clear the console later. To shuffle the answers and questions we get the <code>shuffle()<\/code> function from <code>random<\/code>. Last but not least we import colored which allows to color text in the console easily, this is the only module that we have to download with <code>pip install colored<\/code>.<\/p>\n<pre><code class=\"language-python\"># Import json\nimport json\n\n# Import os to clear the console\nimport os\n\n# Import shuffle from random to shuffle the lists.\nfrom random import shuffle\n\n# Import colored so we can color text in the console.\n# Must be installed with pip install colored\nimport colored<\/code><\/pre>\n<h2>Setup<\/h2>\n<p>Now we continue with the setup which includes all the stuff we do before the question loop.<\/p>\n<p>We start by getting the contents of our <code>questions.json<\/code> file and we parse the json content to the data variable.<\/p>\n<pre><code class=\"language-python\"># Opening the questions file\nwith open('questions.json', 'r') as f:\n    data = json.load(f)<\/code><\/pre>\n<p>The file looks like this. As you see the questions lists contain the question as to the first item and an infinite amount of answers in another list as a second item. The first item in the answer list is always the right answer.<\/p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Geography Quiz\",\n    \"questions\": [\n        [\"What is the Capital of France?\", [\"Paris\", \"Montpellier\", \"Toulouse\"]],\n        [\"Which country shares a border with the US to to the South?\", [\"Mexico\", \"Canada\"]],\n        [\"How is the desert in northern Africa called?\", [\"Sahara\", \"Gobi\", \"Urals\"]]\n    ]\n}<\/code><\/pre>\n<p>After opening the file we define some variables which will later use to tell the user how he did.<\/p>\n<pre><code class=\"language-python\"># Amount of right answers.\nrightAnswers = 0\n\n# Amount of questions.\namountQuestions = len(data['questions'])<\/code><\/pre>\n<p>Now we also shuffle the list of questions in place.<\/p>\n<pre><code class=\"language-python\"># Shuffle the list of questions.\nshuffle(data['questions'])<\/code><\/pre>\n<h2><code>colorText<\/code> function<\/h2>\n<p>To make it even easier to use the <code>colored<\/code> module we make a little function to help us. This function simply returns a colored string. We do this because it would be tedious to reset the color on every string manually.<\/p>\n<pre><code class=\"language-python\">def colorText(text, color):\n    return f'{colored.fg(color)}{text}{colored.fg(15)}' # Reset color to white`<\/code><\/pre>\n<h2>Question Loop<\/h2>\n<p>Now let's get into the main part of the program: The Question Loop. We loop over the previously shuffled list of questions and unpack it into two variables. We then clear the console.<\/p>\n<pre><code class=\"language-python\"># Do all this for each question.\nfor question, answers in data['questions']:\n\n    # Clear Console\n    os.system('cls')<\/code><\/pre>\n<p>Next, we save the right answer to a variable we can do this because the first item in every answer list is the correct one. We also make the right index variable.<\/p>\n<pre><code class=\"language-python\">    # get the right answer, which is the first item in list.\n    rightAnswer = answers[0]\n    rightIndex = 0<\/code><\/pre>\n<p>After that, we shuffle the answers and loop \/ enumerate over them so we get the index. Then we nicely format a string and if the current answer is the right one we set the right index variable to the current index.<\/p>\n<pre><code class=\"language-python\"># Shuffle the list of answers\n    shuffle(answers)\n\n    print('nn'+question+'n')\n    for index, answer in enumerate(answers):\n        print(f'{index + 1}. {answer}')\n\n        if answer == rightAnswer:\n            rightIndex = index<\/code><\/pre>\n<p>We continue by asking the user what his answer is, we want him or her to give us the index of the answer.<\/p>\n<pre><code class=\"language-python\">answerIndex = int(input('nType in the Number in front of the correct answer: '))<\/code><\/pre>\n<p>After we have the answer from the user we check if it was the right one, for this, we use the <code>rightIndex<\/code> variable. We then give the user a nice colored message and add one to the <code>rightAnswers<\/code> variable. If the answer was wrong we tell the user that and what the right answer would have been.<\/p>\n<pre><code class=\"language-python\">    # Check if the correct answer was selected.\n    if answerIndex == (rightIndex + 1):\n        print(colorText('Right', 2))\n        rightAnswers += 1\n    else:\n        print(colorText('Wrong!', 1))\n        print(colorText(f'Right Answer -&gt; {rightAnswer}', 1))\n\n    input('nEnter to Continue ...')<\/code><\/pre>\n<h2>Result<\/h2>\n<p>After the question loop, we clear the console once again and we tell the user how he or she did.<\/p>\n<pre><code class=\"language-python\"># Clear Console\nos.system('cls')\n\n# Showing the user how he did\nprint('nn'+f'You have {rightAnswers} out of {amountQuestions} questions right!')<\/code><\/pre>\n<p>That's it!<\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a quiz using Python code! See how you can add more features to this program such as more colors or multiple right answers.<\/p>",
            "post_title": "Simple quiz in the console with python.",
            "post_excerpt": "How to make a simple quiz with python and some modules like os, colored, and json.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "simple-quiz-in-the-console-with-python",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:20",
            "post_modified_gmt": "2023-02-11 12:55:20",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/simple-quiz-in-the-console-with-python\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Padding and Margin Classes with Sass",
        "description": "How to quickly make padding and margin classes utilizing sass and its looping possibilities.",
        "slug": "padding-and-margin-classes-with-sass",
        "raw_content": "Sometimes one just needs margin and padding classes for left, right, top and bottom and we could make these ourselves but that would be tedious and take a long time. We can however use SASS to quickly make this CSS. SASS is a CSS Pre-Processor, which means it is not valid CSS but will generate it. SASS just others other useful features such as string functions, variables, and loops.\r\n\r\nLet us take a look at a simple example to make margin and padding class in all directions from 0ems to 7ems.\r\n\r\nLet us start by defining two lists, one holds the em range and one the direction strings. \r\n\r\n```sass\r\n$ems: 0, 1, 2, 3, 4, 5, 6, 7\r\n$directions: \"\", \"-bottom\", \"-top\", \"-left\", \"-right\"\r\n```\r\n\r\nIn SASS lists and the variables are defined in this manner. `$variableName: itemOne, itemTwo, ... ` . No need to terminate with a `;`\r\n\r\nNext, we loop over the two lists in a nested manner. So for every `em` we also go through every direction.\r\n\r\n```sass\r\n@each $em in $ems \r\n\r\n    @each $dir in $directions\r\n```\r\n\r\nAfter that we get the second letter from the direction so for `-top` that means `t`, we do this so the class name does not include the whole word. We can do this with the `str-slice()` function which takes the string to slice, the starting point, and the ending point. SASS Lists and Strings start at `1` and not `0` as most programming languages do, so keep that in mind.\r\n\r\n```sass\r\n\t\t$dir-in-rule: str-slice($dir, 2, 2)\r\n```\r\n\r\nNow let us start with making classes. Here comes the powerful part about SASS because we can insert the variables into the selectors, rules, and values. So we add the shortened `$dir-in-rule` to `.m` and after it, we add the `em` amount. So this will result in classes that are called this. `mt-1` or `mb-5` which should mean a margin-top of one em and margin-bottom of 5 em. Because we have also defined the direction `\"\"` we will also get something like `m-3` which means margin in all directions.\r\n\r\nTo insert variables in selector and rules we have to do it this way: `#{$variableName}`. For the value, we simply write down the variable name with the `$` sign. We can also concatenate normal strings like the `em` with `+`\r\n\r\nWe also do this for padding which is done in a similar manner.\r\n\r\n```sass\r\n        .m#{$dir-in-rule}-#{$em} \r\n            margin#{$dir}: $em + em\r\n            \r\n        .p#{$dir-in-rule}-#{$em} \r\n            padding#{$dir}: $em + em        \r\n```\r\n\r\n\r\n\r\nNow this code won't work by itself, we have to convert it to valid CSS first this is done by transpilling or converting. [This](https:\/\/codebeautify.org\/sass-to-css-converter) converter is really good. After putting in the code there it should result in something like this.\r\n\r\n```css\r\n.m-0 {\r\n  margin: 0em; }\r\n\r\n.p-0 {\r\n  padding: 0em; }\r\n\r\n.mb-0 {\r\n  margin-bottom: 0em; }\r\n\r\n.pb-0 {\r\n  padding-bottom: 0em; }\r\n\r\n.mt-0 {\r\n  margin-top: 0em; }\r\n\r\n... \/* There should be 80 Classes like this *\/\r\n```\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created margin and padding classes using SASS code! See how you can make more with this knowledge!\r\n\r\n## Full Code\r\n```sass\r\n$ems: 0, 1, 2, 3, 4, 5, 6, 7\r\n$directions: \"\", \"-bottom\", \"-top\", \"-left\", \"-right\"\r\n\r\n\/* Paddings and Margins *\/\r\n@each $em in $ems \r\n\r\n    @each $dir in $directions \r\n        \r\n        $dir-in-rule: str-slice($dir, 2, 2)\r\n        \r\n        .m#{$dir-in-rule}-#{$em} \r\n            margin#{$dir}: $em + em\r\n        \r\n        .p#{$dir-in-rule}-#{$em} \r\n            padding#{$dir}: $em + em\r\n```",
        "featured_image": "002 - SASS Padding and Margin Classes\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 645,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:20",
            "post_date_gmt": "2023-02-11 12:55:20",
            "post_content": "<p>Sometimes one just needs margin and padding classes for left, right, top and bottom and we could make these ourselves but that would be tedious and take a long time. We can however use SASS to quickly make this CSS. SASS is a CSS Pre-Processor, which means it is not valid CSS but will generate it. SASS just others other useful features such as string functions, variables, and loops.<\/p>\n<p>Let us take a look at a simple example to make margin and padding class in all directions from 0ems to 7ems.<\/p>\n<p>Let us start by defining two lists, one holds the em range and one the direction strings. <\/p>\n<pre><code class=\"language-sass\">$ems: 0, 1, 2, 3, 4, 5, 6, 7\n$directions: \"\", \"-bottom\", \"-top\", \"-left\", \"-right\"<\/code><\/pre>\n<p>In SASS lists and the variables are defined in this manner. <code>$variableName: itemOne, itemTwo, ...<\/code> . No need to terminate with a <code>;<\/code><\/p>\n<p>Next, we loop over the two lists in a nested manner. So for every <code>em<\/code> we also go through every direction.<\/p>\n<pre><code class=\"language-sass\">@each $em in $ems \n\n    @each $dir in $directions<\/code><\/pre>\n<p>After that we get the second letter from the direction so for <code>-top<\/code> that means <code>t<\/code>, we do this so the class name does not include the whole word. We can do this with the <code>str-slice()<\/code> function which takes the string to slice, the starting point, and the ending point. SASS Lists and Strings start at <code>1<\/code> and not <code>0<\/code> as most programming languages do, so keep that in mind.<\/p>\n<pre><code class=\"language-sass\">        $dir-in-rule: str-slice($dir, 2, 2)<\/code><\/pre>\n<p>Now let us start with making classes. Here comes the powerful part about SASS because we can insert the variables into the selectors, rules, and values. So we add the shortened <code>$dir-in-rule<\/code> to <code>.m<\/code> and after it, we add the <code>em<\/code> amount. So this will result in classes that are called this. <code>mt-1<\/code> or <code>mb-5<\/code> which should mean a margin-top of one em and margin-bottom of 5 em. Because we have also defined the direction <code>\"\"<\/code> we will also get something like <code>m-3<\/code> which means margin in all directions.<\/p>\n<p>To insert variables in selector and rules we have to do it this way: <code>#{$variableName}<\/code>. For the value, we simply write down the variable name with the <code>$<\/code> sign. We can also concatenate normal strings like the <code>em<\/code> with <code>+<\/code><\/p>\n<p>We also do this for padding which is done in a similar manner.<\/p>\n<pre><code class=\"language-sass\">        .m#{$dir-in-rule}-#{$em} \n            margin#{$dir}: $em + em\n\n        .p#{$dir-in-rule}-#{$em} \n            padding#{$dir}: $em + em        <\/code><\/pre>\n<p>Now this code won't work by itself, we have to convert it to valid CSS first this is done by transpilling or converting. <a href=\"https:\/\/codebeautify.org\/sass-to-css-converter\">This<\/a> converter is really good. After putting in the code there it should result in something like this.<\/p>\n<pre><code class=\"language-css\">.m-0 {\n  margin: 0em; }\n\n.p-0 {\n  padding: 0em; }\n\n.mb-0 {\n  margin-bottom: 0em; }\n\n.pb-0 {\n  padding-bottom: 0em; }\n\n.mt-0 {\n  margin-top: 0em; }\n\n... \/* There should be 80 Classes like this *\/<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created margin and padding classes using SASS code! See how you can make more with this knowledge!<\/p>\n<h2>Full Code<\/h2>\n<pre><code class=\"language-sass\">$ems: 0, 1, 2, 3, 4, 5, 6, 7\n$directions: \"\", \"-bottom\", \"-top\", \"-left\", \"-right\"\n\n\/* Paddings and Margins *\/\n@each $em in $ems \n\n    @each $dir in $directions \n\n        $dir-in-rule: str-slice($dir, 2, 2)\n\n        .m#{$dir-in-rule}-#{$em} \n            margin#{$dir}: $em + em\n\n        .p#{$dir-in-rule}-#{$em} \n            padding#{$dir}: $em + em<\/code><\/pre>",
            "post_title": "Padding and Margin Classes with Sass",
            "post_excerpt": "How to quickly make padding and margin classes utilizing sass and its looping possibilities.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "padding-and-margin-classes-with-sass",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:20",
            "post_modified_gmt": "2023-02-11 12:55:20",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/padding-and-margin-classes-with-sass\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Edit XML with python",
        "description": "How to edit XML files with python using the dom class",
        "slug": "edit-xml-with-python",
        "raw_content": "Today we learn how to edit XML files with python. To do this we use the `xml.dom.minidom` class from python. We don't have to install it because it comes with python. We will learn how to parse, get and set elements and attributes and how to save XML in this article.\r\n\r\n## XML File\r\n\r\nIn the following code block, you see the content of the XML file. We will use this in the other code blocks of this little tutorial so keep it in mind.\r\n\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<company>\r\n\t<info  name=\"maximmaeder.com\"><\/info>\r\n\t<employees>\r\n\t\t<employee  id=\"1\"  name=\"John\"><\/employee>\r\n\t\t<employee  id=\"2\"  name=\"Marc\"><\/employee>\r\n\t\t<employee  id=\"3\"  name=\"Seth\"><\/employee>\r\n\t<\/employees>\r\n<\/company>\r\n```\r\n\r\n## Parsing XML with `xml.dom.minidom`\r\n\r\nTo parse an XML file or XML string we import `minidom` from `xml.dom`.\r\n\r\n```python\r\nfrom xml.dom import minidom\r\n```\r\n\r\nThis module then has a `parse()` function which gets a file path and it will return document objects which we will use from now on.\r\n\r\n```python\r\n# the parse function returns the Document Objects\r\n# parseString is also possible\r\ndoc = minidom.parse('file.xml')\r\n```\r\n\r\n## Get elements and attributes\r\n\r\nLet us start by getting elements and attribute values from them. To get an element or there I say a list of the element we need the `getElementsByTagName()` function which returns as the function says a list of all elements with the specified tag name.\r\n\r\nIn our case, this is the `employees` tag which has all the `employee` tags as children. We get the first item of the list with `[0]` because it will always return a list even if it has only one item.\r\n\r\n```python\r\n# Get elements with getElementsByTagName function\r\n# Return list of elements\r\nemployees = doc.getElementsByTagName('employees')[0]\r\n```\r\n\r\nAfter that, we use this variable which contains a so-called node which is just one tag. We can also use the `getElementByTagName()` function on this object to get nodes with the tag name which are children of this node.\r\n\r\nWe loop through these.\r\n\r\n```python\r\n# Loop through the employee tags which are within the emplyees tag\r\nfor i in employees.getElementsByTagName('employee'):\r\n```\r\n\r\nIn the loop, we continue by getting the value of the `id` and `name` attributes with the `getAttribute()` method of the node class. If the attribute does not exist it will simply return `\"\"`.\r\n\r\n```python\r\n    # Get the value of their id and name attributes\r\n    id = i.getAttribute('id')\r\n    name = i.getAttribute('name')\r\n```\r\n\r\nLast but not least we print out these two pieces of information in a nicely formatted string.\r\n\r\n```python\r\n    # Print them\r\n    print(f'{id} : {name}')\r\n```\r\n\r\nrunning the code will result in this.\r\n\r\n```\r\n1 : John\r\n2 : Marc\r\n3 : Seth\r\n```\r\n\r\nNow you know how to get elements and attributes. In the next part, we see how to create elements and set their attributes.\r\n\r\n## Set elements and attributes\r\n\r\nNow we will look at how to make elements and set\/add attributes. We insert this code in the loop we have created above.\r\n\r\nWe start with the attributes because it is really easy, we just call the `setAttribute()` method on the node and we give it the attribute name and the value. You see below we set the password for each employee to `000000`. If the attribute does not exist it will simply add it.\r\n\r\n```python\r\n\ti.setAttribute('password', '000000')\r\n```\r\n\r\nTo make a new element we need to do two things. First, we create a new element with the `createElement()` method on the document object.\r\n\r\n```python\r\n    # Make a new element \/ node\r\n    newNode = doc.createElement('salary')\r\n```\r\n\r\nAnd then we append the resulting element to the node of our choice with the `appendChild()` method.\r\n\r\n```python\r\n    # append it to this element \/ node\r\n    i.appendChild(newNode)\r\n```\r\n\r\nAfter the loop, we also add a print statement with `doc.toxml()` so we see what the new structure looks like.\r\n\r\n```python\r\nprint(doc.toxml())\r\n```\r\n\r\nrunning the code will result in something like this. As you see each employee now has a password and an empty salary tag as a child. But this will not be saved.\r\n\r\n```xml\r\n<?xml version=\"1.0\" ?><company>\r\n        <info name=\"maximmaeder.com\"\/>\r\n        <employees>\r\n                <employee id=\"1\" name=\"John\" password=\"000000\"><salary\/><\/employee>\r\n                <employee id=\"2\" name=\"Marc\" password=\"000000\"><salary\/><\/employee>\r\n                <employee id=\"3\" name=\"Seth\" password=\"000000\"><salary\/><\/employee>\r\n        <\/employees>\r\n<\/company>\r\n```\r\n\r\n## Saving XML\r\n\r\nSaving XML is nothing special we do it like with every other text-based file. We open it with the context manager and then we write the XML from the document to it.\r\n\r\n```python\r\nwith open('file.xml', 'w') as f:\r\n\tf.write(doc.toxml())\r\n```\r\n\r\n## Conclusion\r\n\r\nExcellent! Now you know how to parse XML with python. This is a very useful skill because XML is useful everywhere.",
        "featured_image": "003 - XML with python\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 646,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:20",
            "post_date_gmt": "2023-02-11 12:55:20",
            "post_content": "<p>Today we learn how to edit XML files with python. To do this we use the <code>xml.dom.minidom<\/code> class from python. We don't have to install it because it comes with python. We will learn how to parse, get and set elements and attributes and how to save XML in this article.<\/p>\n<h2>XML File<\/h2>\n<p>In the following code block, you see the content of the XML file. We will use this in the other code blocks of this little tutorial so keep it in mind.<\/p>\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\"?&gt;\n&lt;company&gt;\n    &lt;info  name=\"maximmaeder.com\"&gt;&lt;\/info&gt;\n    &lt;employees&gt;\n        &lt;employee  id=\"1\"  name=\"John\"&gt;&lt;\/employee&gt;\n        &lt;employee  id=\"2\"  name=\"Marc\"&gt;&lt;\/employee&gt;\n        &lt;employee  id=\"3\"  name=\"Seth\"&gt;&lt;\/employee&gt;\n    &lt;\/employees&gt;\n&lt;\/company&gt;<\/code><\/pre>\n<h2>Parsing XML with <code>xml.dom.minidom<\/code><\/h2>\n<p>To parse an XML file or XML string we import <code>minidom<\/code> from <code>xml.dom<\/code>.<\/p>\n<pre><code class=\"language-python\">from xml.dom import minidom<\/code><\/pre>\n<p>This module then has a <code>parse()<\/code> function which gets a file path and it will return document objects which we will use from now on.<\/p>\n<pre><code class=\"language-python\"># the parse function returns the Document Objects\n# parseString is also possible\ndoc = minidom.parse('file.xml')<\/code><\/pre>\n<h2>Get elements and attributes<\/h2>\n<p>Let us start by getting elements and attribute values from them. To get an element or there I say a list of the element we need the <code>getElementsByTagName()<\/code> function which returns as the function says a list of all elements with the specified tag name.<\/p>\n<p>In our case, this is the <code>employees<\/code> tag which has all the <code>employee<\/code> tags as children. We get the first item of the list with <code>[0]<\/code> because it will always return a list even if it has only one item.<\/p>\n<pre><code class=\"language-python\"># Get elements with getElementsByTagName function\n# Return list of elements\nemployees = doc.getElementsByTagName('employees')[0]<\/code><\/pre>\n<p>After that, we use this variable which contains a so-called node which is just one tag. We can also use the <code>getElementByTagName()<\/code> function on this object to get nodes with the tag name which are children of this node.<\/p>\n<p>We loop through these.<\/p>\n<pre><code class=\"language-python\"># Loop through the employee tags which are within the emplyees tag\nfor i in employees.getElementsByTagName('employee'):<\/code><\/pre>\n<p>In the loop, we continue by getting the value of the <code>id<\/code> and <code>name<\/code> attributes with the <code>getAttribute()<\/code> method of the node class. If the attribute does not exist it will simply return <code>\"\"<\/code>.<\/p>\n<pre><code class=\"language-python\">    # Get the value of their id and name attributes\n    id = i.getAttribute('id')\n    name = i.getAttribute('name')<\/code><\/pre>\n<p>Last but not least we print out these two pieces of information in a nicely formatted string.<\/p>\n<pre><code class=\"language-python\">    # Print them\n    print(f'{id} : {name}')<\/code><\/pre>\n<p>running the code will result in this.<\/p>\n<pre><code>1 : John\n2 : Marc\n3 : Seth<\/code><\/pre>\n<p>Now you know how to get elements and attributes. In the next part, we see how to create elements and set their attributes.<\/p>\n<h2>Set elements and attributes<\/h2>\n<p>Now we will look at how to make elements and set\/add attributes. We insert this code in the loop we have created above.<\/p>\n<p>We start with the attributes because it is really easy, we just call the <code>setAttribute()<\/code> method on the node and we give it the attribute name and the value. You see below we set the password for each employee to <code>000000<\/code>. If the attribute does not exist it will simply add it.<\/p>\n<pre><code class=\"language-python\">    i.setAttribute('password', '000000')<\/code><\/pre>\n<p>To make a new element we need to do two things. First, we create a new element with the <code>createElement()<\/code> method on the document object.<\/p>\n<pre><code class=\"language-python\">    # Make a new element \/ node\n    newNode = doc.createElement('salary')<\/code><\/pre>\n<p>And then we append the resulting element to the node of our choice with the <code>appendChild()<\/code> method.<\/p>\n<pre><code class=\"language-python\">    # append it to this element \/ node\n    i.appendChild(newNode)<\/code><\/pre>\n<p>After the loop, we also add a print statement with <code>doc.toxml()<\/code> so we see what the new structure looks like.<\/p>\n<pre><code class=\"language-python\">print(doc.toxml())<\/code><\/pre>\n<p>running the code will result in something like this. As you see each employee now has a password and an empty salary tag as a child. But this will not be saved.<\/p>\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" ?&gt;&lt;company&gt;\n        &lt;info name=\"maximmaeder.com\"\/&gt;\n        &lt;employees&gt;\n                &lt;employee id=\"1\" name=\"John\" password=\"000000\"&gt;&lt;salary\/&gt;&lt;\/employee&gt;\n                &lt;employee id=\"2\" name=\"Marc\" password=\"000000\"&gt;&lt;salary\/&gt;&lt;\/employee&gt;\n                &lt;employee id=\"3\" name=\"Seth\" password=\"000000\"&gt;&lt;salary\/&gt;&lt;\/employee&gt;\n        &lt;\/employees&gt;\n&lt;\/company&gt;<\/code><\/pre>\n<h2>Saving XML<\/h2>\n<p>Saving XML is nothing special we do it like with every other text-based file. We open it with the context manager and then we write the XML from the document to it.<\/p>\n<pre><code class=\"language-python\">with open('file.xml', 'w') as f:\n    f.write(doc.toxml())<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p>Excellent! Now you know how to parse XML with python. This is a very useful skill because XML is useful everywhere.<\/p>",
            "post_title": "Edit XML with python",
            "post_excerpt": "How to edit XML files with python using the dom class",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "edit-xml-with-python",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:20",
            "post_modified_gmt": "2023-02-11 12:55:20",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/edit-xml-with-python\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "What is Programming",
        "description": "What is Programming: read about the answer or an attempt at it ...",
        "slug": "what-is-programming",
        "raw_content": "This Article is pretty different from my other articles. This time we will look at the grander picture by answering what programming is. I will try to provide three kinds of answers;  What the Census (Internet People) says, What my school education says and what I say. You may have another opinion.\r\n\r\n## Census\r\n\r\nThere are somewhat two answers that you will find when going to the internet one says *programming is instructing the computer to do various tasks* and the others try to answer what a programming language is. Let us get to the first one.\r\n\r\nWhen we code, we tell the computer to do something. When we want to get the sum of `3` and `6`, we say to the computer `print(3 + 6)`. These tasks can also be way more complex than that. For Example, we could edit images or make requests to get data from APIs. But how do we tell the computer what to do?\r\n\r\nWhen we program, we use dedicated languages that the computer can understand or translate into \r\nits binary language. Some of the most prominent languages are python, javascript, and PHP. These languages have their use cases, but each works essentially the same. You can calculate with numbers, do operations on strings, and control the flow with ifs and loops.\r\n\r\nNow, what does my education say?\r\n\r\n## Education\r\n\r\nIn school, we have learned that you can imagine programs like a flow chart of Commands and Decisions. This has to do with the instructions I mentioned earlier. A flow chart for a program might look something like this.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/06\/flow_Zeichenflache-1-2.png)\r\n\r\nAs you see, the program starts at the top, creating a new variable called `x.` After that, it will check if the variable holds the value `5`. If that is not the case, we print it out with a command (function), add one to it, and then check again. But if `x` turns out to be `5`, we print out `Finished.` After that, the program is done.\r\n\r\nBut to make computer programs, you need to have *Computation Thinking*, which means that you can or understand five things.\r\n\r\n- Decomposition\r\n\t- Split up the problem into smaller, more manageable parts. (functions)\r\n- Generalisation\r\n\t- The program should be able to solve problems like this, not only this one.\r\n- Pattern Recognition\r\n\t- You need to see the similarities between problems and work them out. (Loops)\r\n- Abstraction\r\n\t- You need to be able to take out the detail and ignore irrelevant information.\r\n- Algorithm\r\n\t- You need to be able to define simple rules or processes by which the program acts.\r\n\r\nThe last one, `algorithm,` is pretty important. Even people that don't program encounter an algorithm. You can get out of any labyrinth by sticking to the left side, but this does not work if the maze has *islands*. If you press the reset button on the frame below, you will see that the white rectangle will navigate out of the labyrinth by sticking to the left wall and by using the [pledge algorithm](https:\/\/en.wikipedia.org\/wiki\/Maze-solving_algorithm)\r\n\r\n## My Opinion\r\n\r\nIn my opinion, programming is when you do four things with any data.\r\n- Getting\r\n- Setting\r\n- Changing\r\n- Displaying\r\n\r\nI think almost all if not all, programs do these four things. It has not to be in that order, but all of them are needed. For Example, when I open paint, the program opens an image, gets the data from it, and displays it. If we draw onto the picture, the program gets data changes in the to save and will show our changes.\r\n\r\nNow, what do you think?",
        "featured_image": "004 - What is programming\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 647,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<p>This Article is pretty different from my other articles. This time we will look at the grander picture by answering what programming is. I will try to provide three kinds of answers;  What the Census (Internet People) says, What my school education says and what I say. You may have another opinion.<\/p>\n<h2>Census<\/h2>\n<p>There are somewhat two answers that you will find when going to the internet one says <em>programming is instructing the computer to do various tasks<\/em> and the others try to answer what a programming language is. Let us get to the first one.<\/p>\n<p>When we code, we tell the computer to do something. When we want to get the sum of <code>3<\/code> and <code>6<\/code>, we say to the computer <code>print(3 + 6)<\/code>. These tasks can also be way more complex than that. For Example, we could edit images or make requests to get data from APIs. But how do we tell the computer what to do?<\/p>\n<p>When we program, we use dedicated languages that the computer can understand or translate into\nits binary language. Some of the most prominent languages are python, javascript, and PHP. These languages have their use cases, but each works essentially the same. You can calculate with numbers, do operations on strings, and control the flow with ifs and loops.<\/p>\n<p>Now, what does my education say?<\/p>\n<h2>Education<\/h2>\n<p>In school, we have learned that you can imagine programs like a flow chart of Commands and Decisions. This has to do with the instructions I mentioned earlier. A flow chart for a program might look something like this.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/06\/flow_Zeichenflache-1-2.png\" alt=\"enter image description here\" \/><\/p>\n<p>As you see, the program starts at the top, creating a new variable called <code>x.<\/code> After that, it will check if the variable holds the value <code>5<\/code>. If that is not the case, we print it out with a command (function), add one to it, and then check again. But if <code>x<\/code> turns out to be <code>5<\/code>, we print out <code>Finished.<\/code> After that, the program is done.<\/p>\n<p>But to make computer programs, you need to have <em>Computation Thinking<\/em>, which means that you can or understand five things.<\/p>\n<ul>\n<li>Decomposition\n<ul>\n<li>Split up the problem into smaller, more manageable parts. (functions)<\/li>\n<\/ul><\/li>\n<li>Generalisation\n<ul>\n<li>The program should be able to solve problems like this, not only this one.<\/li>\n<\/ul><\/li>\n<li>Pattern Recognition\n<ul>\n<li>You need to see the similarities between problems and work them out. (Loops)<\/li>\n<\/ul><\/li>\n<li>Abstraction\n<ul>\n<li>You need to be able to take out the detail and ignore irrelevant information.<\/li>\n<\/ul><\/li>\n<li>Algorithm\n<ul>\n<li>You need to be able to define simple rules or processes by which the program acts.<\/li>\n<\/ul><\/li>\n<\/ul>\n<p>The last one, <code>algorithm,<\/code> is pretty important. Even people that don't program encounter an algorithm. You can get out of any labyrinth by sticking to the left side, but this does not work if the maze has <em>islands<\/em>. If you press the reset button on the frame below, you will see that the white rectangle will navigate out of the labyrinth by sticking to the left wall and by using the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Maze-solving_algorithm\">pledge algorithm<\/a><\/p>\n<h2>My Opinion<\/h2>\n<p>In my opinion, programming is when you do four things with any data.<\/p>\n<ul>\n<li>Getting<\/li>\n<li>Setting<\/li>\n<li>Changing<\/li>\n<li>Displaying<\/li>\n<\/ul>\n<p>I think almost all if not all, programs do these four things. It has not to be in that order, but all of them are needed. For Example, when I open paint, the program opens an image, gets the data from it, and displays it. If we draw onto the picture, the program gets data changes in the to save and will show our changes.<\/p>\n<p>Now, what do you think?<\/p>",
            "post_title": "What is Programming",
            "post_excerpt": "What is Programming: read about the answer or an attempt at it ...",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "what-is-programming",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/what-is-programming\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "How to hide text in images with python.",
        "description": "Hiding and Reading Text that is hidden in uncompressed images with PIL.",
        "slug": "how-to-hide-text-in-images-with-python",
        "raw_content": "As Wikipedia states *Steganography is the practice of concealing a message within another message or a physical object* and today, we are going to do this. We will make a program that writes text to images and reads it from there. We assign pixel values to each possible character. This is just a barebones version that you can use as a basis or inspiration for other programs like this.\r\n\r\nSo let us get started.\r\n\r\n## Imports\r\n\r\nFor this little program, we need three modules\/libraries. We get the `Image` class from `PIL` so we can manipulate images. Then we also get `ArgumentParser` from `argparse`, so we have an easy time asking the user for arguments. Last but not least, we get `string` which has some constants containing letters and digits.\r\n\r\n```python\r\n# Imports\r\nfrom PIL import Image\r\nfrom argparse import ArgumentParser\r\nimport string\r\n```\r\n\r\n## Setting up the `ArgumentParser`\r\n\r\nNow that we have the `ArgumentParser` class, we must set it up. For this, we make a new `ArgumentParser` object, and then we call the `add_arguement()` three times. We add the positional argument path, which has to be always specified. Then also the mode which is *read* by default. And also the text argument, which we only have to supply when the mode is *write*. Finally, we also parse the arguments with `parse_args()` and save them to a variable.\r\n\r\n```python\r\n# Command Line Arguments\r\nparser = ArgumentParser()\r\n\r\n# Keep in mind this will only work with uncompressed images (png)\r\nparser.add_argument('path')\r\nparser.add_argument('-mode', default=\"read\")\r\nparser.add_argument('-text')\r\n\r\narguments = parser.parse_args()\r\n```\r\n\r\n## Opening the image\r\n\r\nNow we use the `Image` class to open the image at the path the user has specified. We then get the width and height.\r\n\r\n```python\r\n# Open the image.\r\nimage = Image.open(arguments.path)\r\n\r\n# Get the image size and save it.\r\nwidth, height = image.size\r\n```\r\n\r\n## Setting up Variables\r\n\r\nNext, we define some variables. We first have two variables that contain the RGB tuples of the starting and ending pixel. This is used to know where the message starts and ends, but we currently only use the `endingPixel` variable.\r\n\r\nAfter that, we also define two dictionaries that will contain the relations between letters and pixels.\r\n\r\n```python\r\nstartingPixel = (10, 10, 255)\r\nendingPixel = (255, 20, 20)\r\n\r\n# Dictionary which hold the relations between pixels and characters\r\nlettersToPixels = {}\r\npixelsToLetters = {}\r\n```\r\n\r\nTo fill these dictionaries, we use a loop. We enumerate over the `ascii_letters`, `digits`, and `' '` and store them in the dictionaries.\r\n\r\n```python\r\n# Making the relations using the string library\r\nfor i, letter in enumerate(string.ascii_letters + string.digits + ' '):\r\n    lettersToPixels[letter] = i\r\n    pixelsToLetters[i] = letter\r\n```\r\n\r\n## Writing to an image\r\n\r\nNow let us get to hiding messages in images. If the mode specified by the user is *write*, we know the user wants to write. But we also check if the text was set. After that, we also assert if the text length is greater than the image width.\r\n\r\n```\r\nif arguments.mode == \"write\":\r\n    if arguments.text != None:\r\n\t\t# check if the string would exceed the maximum ( width )\r\n        assert len(arguments.text) < width\r\n```\r\n\r\nAfter that, we draw the starting pixel onto the image at position `(0, 0)`, which is the top left.\r\n\r\n```python\r\n\t\t# Draw the starting Pixel\r\n        image.putpixel((0, 0), startingPixel)\r\n```\r\n\r\nAfter that, we loop \/ enumerate over the text the user has given us. We draw the pixel representing this character at `(index+1, 0)`, meaning the top row of pixels will contain the message. We added one because we already drew a pixel at `(0, 0)`. The color is made up of `(11, lettersToPixels[letter], 11)`, so the middle color, green, will change depending on the letter.\r\n\r\n```py\r\n        # Draw a pixel for each letter in the test\r\n        for index, letter in enumerate(arguments.text):\r\n\r\n            # The Middle value (g = green) is the number in the dictionary\r\n            image.putpixel((index+1, 0), (11, lettersToPixels[letter], 11))\r\n```\r\n\r\nAt the end of the writing part, we also draw the ending pixel after the letters and save the image.\r\n\r\n```python\r\n\t\t# Draw the ending Pixel\r\n        image.putpixel((index+2, 0), endingPixel)\r\n\r\n        # Save the image to the same place\r\n        image.save(arguments.path)\r\n```\r\n\r\n## Read Function\r\n\r\nNow, if the mode is read, we will try to read text from the image. To do this, we loop over the image until we encounter the ending pixel. We add one to the index at the end of the loop.\r\n\r\n```python\r\nelif arguments.mode == \"read\":\r\n    text = ''\r\n\r\n    index = 1\r\n    while True:\r\n```\r\n\r\nWe get the pixel color `(RGB)` at the position. If the pixel is the `endingPixel`, we know that we are finished with reading, so we break out of the loop.\r\n\r\n```python\r\n\t\t# Loop throug each pixel in the top row\r\n        pixel = image.getpixel((index, 0))\r\n\t\t\r\n\t\t# if the pixel is the ending pixel, we break the loop\r\n        if pixel == endingPixel:\r\n            break\r\n```\r\n\r\nAfter that, we try to get the letter associated with the pixel and add the letter to the text variable.\r\n\r\n```python\r\n\t\ttry:\r\n            # Get the letter from the dictionary with the g (green) value.\r\n            text += pixelsToLetters[pixel[1]]\r\n        except:\r\n            pass\r\n\r\n        index += 1\r\n```\r\n\r\nAfter the loop, we print out the text, so the user knows what was written in the image.\r\n\r\n```python\r\n    # Print out the text\r\n    print(text)\r\n```\r\n\r\n## Showcase\r\n\r\nNow let us see a showcase of the steganography program. We use the Mona Lisa, which is now in the public domain because Leonardo da Vinci died more than 70 years ago.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/stega.gif)\r\n\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Program that writes and reads text hidden in images using Python code! See how you can add more features to this program, such as better hidden pixels or something.",
        "featured_image": "005 - Hide Text in Images\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 648,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<p>As Wikipedia states <em>Steganography is the practice of concealing a message within another message or a physical object<\/em> and today, we are going to do this. We will make a program that writes text to images and reads it from there. We assign pixel values to each possible character. This is just a barebones version that you can use as a basis or inspiration for other programs like this.<\/p>\n<p>So let us get started.<\/p>\n<h2>Imports<\/h2>\n<p>For this little program, we need three modules\/libraries. We get the <code>Image<\/code> class from <code>PIL<\/code> so we can manipulate images. Then we also get <code>ArgumentParser<\/code> from <code>argparse<\/code>, so we have an easy time asking the user for arguments. Last but not least, we get <code>string<\/code> which has some constants containing letters and digits.<\/p>\n<pre><code class=\"language-python\"># Imports\nfrom PIL import Image\nfrom argparse import ArgumentParser\nimport string<\/code><\/pre>\n<h2>Setting up the <code>ArgumentParser<\/code><\/h2>\n<p>Now that we have the <code>ArgumentParser<\/code> class, we must set it up. For this, we make a new <code>ArgumentParser<\/code> object, and then we call the <code>add_arguement()<\/code> three times. We add the positional argument path, which has to be always specified. Then also the mode which is <em>read<\/em> by default. And also the text argument, which we only have to supply when the mode is <em>write<\/em>. Finally, we also parse the arguments with <code>parse_args()<\/code> and save them to a variable.<\/p>\n<pre><code class=\"language-python\"># Command Line Arguments\nparser = ArgumentParser()\n\n# Keep in mind this will only work with uncompressed images (png)\nparser.add_argument('path')\nparser.add_argument('-mode', default=\"read\")\nparser.add_argument('-text')\n\narguments = parser.parse_args()<\/code><\/pre>\n<h2>Opening the image<\/h2>\n<p>Now we use the <code>Image<\/code> class to open the image at the path the user has specified. We then get the width and height.<\/p>\n<pre><code class=\"language-python\"># Open the image.\nimage = Image.open(arguments.path)\n\n# Get the image size and save it.\nwidth, height = image.size<\/code><\/pre>\n<h2>Setting up Variables<\/h2>\n<p>Next, we define some variables. We first have two variables that contain the RGB tuples of the starting and ending pixel. This is used to know where the message starts and ends, but we currently only use the <code>endingPixel<\/code> variable.<\/p>\n<p>After that, we also define two dictionaries that will contain the relations between letters and pixels.<\/p>\n<pre><code class=\"language-python\">startingPixel = (10, 10, 255)\nendingPixel = (255, 20, 20)\n\n# Dictionary which hold the relations between pixels and characters\nlettersToPixels = {}\npixelsToLetters = {}<\/code><\/pre>\n<p>To fill these dictionaries, we use a loop. We enumerate over the <code>ascii_letters<\/code>, <code>digits<\/code>, and <code>' '<\/code> and store them in the dictionaries.<\/p>\n<pre><code class=\"language-python\"># Making the relations using the string library\nfor i, letter in enumerate(string.ascii_letters + string.digits + ' '):\n    lettersToPixels[letter] = i\n    pixelsToLetters[i] = letter<\/code><\/pre>\n<h2>Writing to an image<\/h2>\n<p>Now let us get to hiding messages in images. If the mode specified by the user is <em>write<\/em>, we know the user wants to write. But we also check if the text was set. After that, we also assert if the text length is greater than the image width.<\/p>\n<pre><code>if arguments.mode == \"write\":\n    if arguments.text != None:\n        # check if the string would exceed the maximum ( width )\n        assert len(arguments.text) &lt; width<\/code><\/pre>\n<p>After that, we draw the starting pixel onto the image at position <code>(0, 0)<\/code>, which is the top left.<\/p>\n<pre><code class=\"language-python\">        # Draw the starting Pixel\n        image.putpixel((0, 0), startingPixel)<\/code><\/pre>\n<p>After that, we loop \/ enumerate over the text the user has given us. We draw the pixel representing this character at <code>(index+1, 0)<\/code>, meaning the top row of pixels will contain the message. We added one because we already drew a pixel at <code>(0, 0)<\/code>. The color is made up of <code>(11, lettersToPixels[letter], 11)<\/code>, so the middle color, green, will change depending on the letter.<\/p>\n<pre><code class=\"language-py\">        # Draw a pixel for each letter in the test\n        for index, letter in enumerate(arguments.text):\n\n            # The Middle value (g = green) is the number in the dictionary\n            image.putpixel((index+1, 0), (11, lettersToPixels[letter], 11))<\/code><\/pre>\n<p>At the end of the writing part, we also draw the ending pixel after the letters and save the image.<\/p>\n<pre><code class=\"language-python\">        # Draw the ending Pixel\n        image.putpixel((index+2, 0), endingPixel)\n\n        # Save the image to the same place\n        image.save(arguments.path)<\/code><\/pre>\n<h2>Read Function<\/h2>\n<p>Now, if the mode is read, we will try to read text from the image. To do this, we loop over the image until we encounter the ending pixel. We add one to the index at the end of the loop.<\/p>\n<pre><code class=\"language-python\">elif arguments.mode == \"read\":\n    text = ''\n\n    index = 1\n    while True:<\/code><\/pre>\n<p>We get the pixel color <code>(RGB)<\/code> at the position. If the pixel is the <code>endingPixel<\/code>, we know that we are finished with reading, so we break out of the loop.<\/p>\n<pre><code class=\"language-python\">        # Loop throug each pixel in the top row\n        pixel = image.getpixel((index, 0))\n\n        # if the pixel is the ending pixel, we break the loop\n        if pixel == endingPixel:\n            break<\/code><\/pre>\n<p>After that, we try to get the letter associated with the pixel and add the letter to the text variable.<\/p>\n<pre><code class=\"language-python\">        try:\n            # Get the letter from the dictionary with the g (green) value.\n            text += pixelsToLetters[pixel[1]]\n        except:\n            pass\n\n        index += 1<\/code><\/pre>\n<p>After the loop, we print out the text, so the user knows what was written in the image.<\/p>\n<pre><code class=\"language-python\">    # Print out the text\n    print(text)<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p>Now let us see a showcase of the steganography program. We use the Mona Lisa, which is now in the public domain because Leonardo da Vinci died more than 70 years ago.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/stega.gif\" alt=\"enter image description here\" \/><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a Program that writes and reads text hidden in images using Python code! See how you can add more features to this program, such as better hidden pixels or something.<\/p>",
            "post_title": "How to hide text in images with python.",
            "post_excerpt": "Hiding and Reading Text that is hidden in uncompressed images with PIL.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "how-to-hide-text-in-images-with-python",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/how-to-hide-text-in-images-with-python\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "How to make responsive grid classes with Sass",
        "description": "Learn how to make Responsive Grid Classes with the CSS preprocessor SASS",
        "slug": "grid-classes-with-sass",
        "raw_content": "In this relatively short article, we will make responsive grid classes with the CSS preprocessor SASS \/ SCSS. We will learn about the `display: grid` CSS rule, two different kinds of loops in Sass, and the `[attr*=foo]` selector in CSS.\r\n\r\nSo let us get started.\r\n\r\n\r\n## The Program\r\n\r\nWe already covered some concepts in this [Article](https:\/\/maximmaeder.com\/padding-and-margin-classes-with-sass\/) where we made padding and margin classes. The grids we make will be barebones; we make them so there is just a range of column counts to choose from, each column having the same width.\r\n\r\nSo we start by defining a variable that contains a list of integers representing the possible column counts. We have `2, 3, 4`, but you could add more if you want to.\r\n\r\n```sass\r\n$columnCounts: 2, 3, 4\r\n```\r\n\r\nAfter that, we start to loop over the columnCounts variable. Looping is somewhat similar to how we do it in blade, the template language from laravel.\r\n\r\n```sass\r\n@each $count in $columnCounts\r\n```\r\n\r\nIn the loop, we once again define a variable that holds the string of the value `grid-template-columns`. We set it to `1fr ` because each grid can not have just one column. The `fr` unit is practical when working with grids because it solves the problem of wrapping columns when you set a gap.\r\n\r\n```sass\r\n$text: \"1fr \"\r\n```\r\n\r\nAfter that, we start another loop where we take the `$count` and add `1fr ` to the text, like doing `for i in range(count)` in python.\r\n\r\n```\r\n    @for $i from 1 to $count\r\n        $text: $text + \"1fr \"\r\n```\r\n\r\nNow we can finally make some classes. We insert the count variable into the class name and the unquoted text into the value of the `grid-template-columns` property.\r\n\r\n```sass\r\n\t.grid-#{$count}\r\n        grid-template-columns: unquote($text)\r\n```\r\n\r\nWe finished with the loop, but the compiled CSS won't work because we haven't set the grid classes to `display: grid`. We can do this pretty quickly with the code below. This unique selector will get all elements where the class attributes value contains the word `grid`.\r\n\r\n```sass\r\n[class*=\"grid\"]\r\n    display: grid\r\n```\r\n\r\nNow to the responsive part of this. We can do this by adding the `@media` queries indented below this selector. So, if the window is smaller than 900px, we set the grid columns to `1fr`, which will make each item full width.\r\n\r\n```sass\r\n    @media screen and (max-width: 900px)\r\n        grid-template-columns: 1fr\r\n```\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created responsive grid classes with the CSS preprocessor language Sass.\r\n\r\n## Full Code\r\n```sass\r\n$columnCounts: 2, 3, 4\r\n\r\n@each $count in $columnCounts\r\n    $text: \"1fr \"\r\n\r\n    @for $i from 1 to $count\r\n        $text: $text + \"1fr \"\r\n\r\n    .grid-#{$count}\r\n        grid-template-columns: unquote($text)\r\n        \r\n            \r\n[class*=\"grid\"]\r\n    display: grid\r\n    \r\n    @media screen and (max-width: 900px)\r\n        grid-template-columns: 1fr\r\n```",
        "featured_image": "006 - Responsive Grid Classes with Sass\/_blog\/preview.png",
        "_is_published": false,
        "_local_post_data": []
    },
    {
        "name": "Simple spreadsheet app with vue",
        "description": "Learn how to make a simple spreadsheet app with the javascript framework vue. We will create it so you can reference other cells.",
        "slug": "simple-spreadsheet-app-with-vue",
        "raw_content": "In this tutorial, we will make a simple spreadsheet app consisting of a large empty table that we can fill with values. We can also use this syntax `=expression` to allow for more complex interactions, and we all make it so these fields can refer to other fields' values so that it will be a little bit like excl. I split this Tutorial into four parts; HTML, Javascript & CSS codes, and the program showcase, where you can try it out in an Iframe. We use the `js` framework [`vue.js`](https:\/\/vuejs.org\/).\r\n\r\nLet us get into making something extraordinary!\r\n\r\n## HTML Code\r\n\r\nSo let us start with the HTML of the site. You can copy the Framework below.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document<\/title>\r\n<\/head>\r\n\r\n<body>\r\n\r\n<\/body>\r\n\r\n<\/html>\r\n```\r\n\r\nNow for vue.js to work, we have to integrate it somehow. We could create a project with it, but for now, we load it through a *Content Delivery Network (CDN)*. So we add the code below to our page's head.\r\n\r\n```html\r\n<!-- Add vue via cdn -->\r\n<script  src=\"https:\/\/unpkg.com\/vue@3\"><\/script>\r\n```\r\n\r\nOur spreadsheet app will be bare, so we don't have any fancy UI, just the table. So we create a `div` and then in it the table. We give the `div` an id so we can later mount the vue app on it.\r\n\r\n```html\r\n<div  id=\"app\">\r\n\t<table>\r\n```\r\n\r\nIn the table, we start with the head, which will be the letters of the columns. We insert an empty header cell because the first column will consist of the row numbers. After that, we can use the `v-for=\"item in list\"` directive to copy this element and all its children. Inside the element, we can also use the item or how ever we called it with curly brackets like this `{{ item }}`.\r\n\r\n```html\r\n   <thead class=\"sticky-top\">\r\n       <th><\/th>\r\n       <th v-for=\"char in chars\">{{char}}<\/th>\r\n   <\/thead>\r\n```\r\n\r\nAfter setting up the top row, we start making the rows. We use the `v-for` directive again, but we do it this way `v-for=\"(item, index) in list\"`. We do this to get the item's index and the item itself. This is like doing this in python. `for I, item in enumerate(list):`. Then we use this index for the first column of this row, which will also be a head because it will show the row number.\r\n\r\n```html\r\n<tr v-for=\"(layer, index) in cellsLayered\">\r\n    <!-- First cell, which is the index \/ row number -->\r\n    <th class=\"sticky-left\">{{index}}<\/th>\r\n```\r\n\r\nContinuing, we start another loop for the cells in this row, called layer in this example. We then make an `input` bound to the cell's value at `cell+index`. Later in the JS part, we learn why we do it this way.\r\n\r\n```html\r\n<!-- Display the cells -->\r\n<td v-for=\"cell in layer\">\r\n\r\n\t<!-- Insert input with v-model for binding -->\r\n\t<input v-model=\"cells[cell+index]\" type=\"text\">\r\n```\r\n\r\nThen we either show the value of the cell here, or we call the `evaluation()` function we make later to evaluate whatever is in the cell. We check with the `v-if` and `v-else` directives.\r\n\r\n```html\r\n\t<!-- Insert either a div that shows the value or a div that evalates the value -->\r\n    <div>\r\n        <div v-if=\"!cells[cell+index].startsWith('=')\">\r\n            {{ cells[cell+index] }}\r\n        <\/div>\r\n        <div v-else class=\"eval\">\r\n            {{ evaluation(cells[cell+index]) }}\r\n        <\/div>\r\n    <\/div>\r\n   <\/td>\r\n  <\/tr>\r\n <\/table>\r\n<\/div>\r\n```\r\n\r\nNow we have the HTML. Let us go over the JavaScript.\r\n\r\n## JavaScript Code\r\n\r\nLet us now add some functionality to our code with the js framework `vue.js`. We have already imported it in the head tag using a CDN.\r\n\r\nSo lets start by getting the `createApp` function from vue.\r\n```javascript\r\nconst { createApp } = Vue\r\n```\r\n\r\nWe continue by defining the letters the table has at the top row. In excl, after the `z`, it begins with `aa`, but we are just sticking with the alphabet.\r\n\r\n```js\r\n\/* Define The list *\/\r\nvar chars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\r\n```\r\n\r\nAfter that we define two variables. The cells Object will hold all the cells; the keys will look like this. `a0`, `b6` and `x10`. We also see this in excl. We also make a list called `cellsLayered` which will hold one list\/array for each layer, so it is easier to draw as you saw in the HTML part.\r\n\r\n```js\r\n\/* We are making this variables outside, but we will insert it into vue *\/\r\nvar cells = {}\r\nvar cellsLayered = []\r\n```\r\n\r\nNow we need to populate these variables with values. So we start a loop which happens 30 times. Inside it, we define a layer variable, which, as it says, will hold the current layer of cells. Then we also loop through the character we specified earlier. We fill the `cells` object with empty strings, which will be inserted into the HTML. Then we also push the character to the layer. After the character loop, we push the layer to the `cellLayered` list.\r\n\r\n```js\r\nfor (let number = 0; number < 30; number++) {\r\n    var layer = []\r\n\r\n    chars.forEach(character => {\r\n        cells[character + number] = ''\r\n        layer.push(character)\r\n    });\r\n\r\n    cellsLayered.push(layer)\r\n}\r\n```\r\n\r\nWe insert some starting values at some positions.\r\n\r\n```js\r\n\/* Some Starting Values *\/\r\ncells['a0'] = '10'\r\ncells['a1'] = '20'\r\ncells['b2'] = '=30'\r\ncells['b3'] = '=a0'\r\n```\r\n\r\nNow we can finally create the app. In its data function, we return some of the lists and objects we made, so they are available in the HTML.\r\n\r\n```js\r\ncreateApp({\r\n    data() {\r\n        return {\r\n            chars: chars,\r\n            cells: cells,\r\n            cellsLayered: cellsLayered\r\n        }\r\n    },\r\n```\r\n\r\nNow we also define a custom method, the `evaluation()` we have used in the HTML. This will insert the values from other cells into this cell and evaluate the expression. We first remove the `=` from the string by slicing it. Then we loop over the keys of the cell's object and check if the key string appears in the cell string.\r\n\r\nIf that is the case, we replace this appearance with the evaluated value of the respective cell by splitting and joining the string. Calling the function recursively allows us to have references to cells that already have connections. After that, we try to evaluate the string, or we return the error code, so this appears in the cell.\r\n\r\n```js\r\nmethods: {\r\n   evaluation(string) {\r\n\r\n       if (string.startsWith('=')) {\t\r\n\t\t\tstring = string.slice(1, string.length)\t\r\n\t\t}\r\n\r\n\r\n       Object.keys(cells).forEach(coord => {\r\n           if (string.includes(coord)) {\r\n               string = string.split(coord).join(this.evaluation(cells[coord]))\r\n           }\r\n       })\r\n\r\n       try {\r\n           return eval(string)\r\n       } catch (error) {\r\n           return error\r\n       }\r\n   }\r\n}\r\n}).mount('#app')\r\n```\r\n\r\nDon't forget to call the `mount(id)` function to assign the vue app to our div at the specified id.\r\n\r\nLet us look at our app in action.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/spreadsheet-1.gif)\r\n\r\nIt works! But it does not look nice. Let us style it with CSS!\r\n\r\n## CSS Code\r\n\r\nWe insert the CSS code into the head of the file.\r\n\r\nWe simply start by removing the margin around the body, setting the font to any monospace type and setting everythings box sizing to `border-box`\r\n```css\r\n\/* CSS Setup *\/\r\nbody {\r\n\tmargin: 0\r\n}\r\n\r\n* {\r\n    font-family: monospace !important;\r\n    box-sizing: border-box;\r\n}\r\n```\r\n\r\nAfter that, we remove the spacing between the table cells by setting `border-spacing`  to 0.\r\n\r\n```css\r\n\/* Remove Spacing between cells *\/\r\ntable {\r\n    border-spacing: 0;\r\n}\r\n```\r\n\r\nWe continue by giving the cells some styling. First, we select both types `td` and `th` but then apply some individual styling.\r\n\r\n```css\r\n\/* Styling the Cells *\/\r\ntd,\r\nth {\r\n    min-width: 70px;\r\n    min-height: 40px;\r\n    padding: 0.2em;\r\n    border-right: 1px solid rgb(209, 209, 209);\r\n    border-bottom: 1px solid rgb(209, 209, 209);\r\n}\r\n\r\nth {\r\n    background-color: rgb(229, 229, 229);\r\n}\r\n\r\ntd {\r\n    background-color: whitesmoke;\r\n    padding: 1em;\r\n    text-align: center;\r\n    position: relative;\r\n}\r\n```\r\n\r\nNow to the hard part. We want the input only visible when the user hovers over it or when he is writing and vice versa for the label, which shows the evaluated value of the cell. So we select both cases and ad `+div` add the end, which means *the first div after an input*. So this will hide the label in these cases.\r\n\r\n```css\r\n\/* Toggle Input and Display *\/\r\n\r\n\/* Hide Label if input is focused or hovered *\/\r\ntd:hover input+div,\r\ntd input:focus+div {\r\n    display: none\r\n}\r\n```\r\n\r\nStyling the input and labels, setting them to full width and height, so they fill the cell.\r\n\r\n```css\r\n\/* Expand input and label to full size of container *\/\r\ntd>input,\r\ntd div {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-width: 0px;\r\n}\r\n```\r\n\r\nFor the input to receive the hover from the mouse, we need to set `pointer-events` to none for the divs\/labels which show the value.\r\n\r\n```css\r\n\/* Make Label see through for mouse *\/\r\ntd>div {\r\n    pointer-events: none;\r\n}\r\n```\r\n\r\nLet us finish up the complicated part by setting the input to hidden by default and showing it as soon as its parent cell is hovered over or when it is in focus.\r\n\r\n```css\r\n\/* Hide Input by default *\/\r\ntd input {\r\n    visibility: hidden;\r\n}\r\n\r\n\/* Show Input if focus or hover is true *\/\r\ntd:hover input,\r\ntd input:focus {\r\n    visibility: visible;\r\n}\r\n```\r\n\r\nNow for some custom classes. The eval class is just used for cells that are evaluated. The sticky-top and sticky-left do what they say. They stick to the top and left sides of the screen. We apply these to the headers of our tables so they are always visible.\r\n\r\n```css\r\n\/* Classes *\/\r\n\r\n\/* Cells that are evaluated *\/\r\n.eval {\r\n    background-color: rgb(207, 255, 221)\r\n}\r\n\r\n\/* Top Row *\/\r\n.sticky-top {\r\n    position: sticky;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 99;\r\n    box-shadow: 0 1px 3px rgb(180, 180, 180)\r\n}\r\n\r\n\/* Left Column *\/\r\n.sticky-left {\r\n    position: sticky;\r\n    left: 0;\r\n    z-index: 98;\r\n}\r\n```\r\n\r\n## Showcase\r\n\r\nSo that's it. Let us look at our little app.\r\n\r\n![](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/spreadsheet-2.gif)\r\n\r\n\r\nembed\r\n[simple spreadsheet app with vue (quuli.ch)](https:\/\/ai.quuli.ch\/examples\/)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Simple spreadsheet app using HTML \/ CSS \/ Javascript and Vue.js! See how you can add more features to this program, such as functions like `sum` or saving and opening.\r\n\r\n## Full Code\r\n\r\n```HTML\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>simple spreadsheet app with vue<\/title>\r\n\r\n    <!-- Add vue via cdn -->\r\n    <script src=\"https:\/\/unpkg.com\/vue@3\"><\/script>\r\n\r\n    <style>\r\n\/* CSS Setup *\/\r\nbody {\r\n    margin: 0\r\n}\r\n\r\n* {\r\n    font-family: monospace !important;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\/* Remove Spacing between cells *\/\r\ntable {\r\n    border-spacing: 0;\r\n}\r\n\r\n\/* Styling the Cells *\/\r\ntd,\r\nth {\r\n    min-width: 70px;\r\n    min-height: 40px;\r\n    padding: 0.2em;\r\n    border-right: 1px solid rgb(209, 209, 209);\r\n    border-bottom: 1px solid rgb(209, 209, 209);\r\n}\r\n\r\nth {\r\n    background-color: rgb(229, 229, 229);\r\n}\r\n\r\ntd {\r\n    background-color: whitesmoke;\r\n    padding: 1em;\r\n    text-align: center;\r\n    position: relative;\r\n}\r\n\r\n\r\n\/* Toggle Input and Display *\/\r\n\r\n\/* Hide Label if input is focused or hovered *\/\r\ntd:hover input+div,\r\ntd input:focus+div {\r\n    display: none\r\n}\r\n\r\n\/* Expand input and label to full size of container *\/\r\ntd>input,\r\ntd div {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-width: 0px;\r\n}\r\n\r\n\/* Make Label see through for mouse *\/\r\ntd>div {\r\n    pointer-events: none;\r\n}\r\n\r\n\/* Hide Input by default *\/\r\ntd input {\r\n    visibility: hidden;\r\n}\r\n\r\n\/* Show Input if focus or hover is true *\/\r\ntd:hover input,\r\ntd input:focus {\r\n    visibility: visible;\r\n    outline: none;\r\n}\r\n\r\n\r\n\/* Classes *\/\r\n\r\n\/* Cells that are evaluated *\/\r\n.eval {\r\n    background-color: rgb(207, 255, 221)\r\n}\r\n\r\n\/* Top Row *\/\r\n.sticky-top {\r\n    position: sticky;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 99;\r\n    box-shadow: 0 1px 3px rgb(180, 180, 180)\r\n}\r\n\r\n\/* Left Column *\/\r\n.sticky-left {\r\n    position: sticky;\r\n    left: 0;\r\n    z-index: 98;\r\n}\r\n    <\/style>\r\n\r\n<\/head>\r\n\r\n<body>\r\n\r\n    <div id=\"app\">\r\n        \r\n        <table>\r\n            <thead class=\"sticky-top\">\r\n                <th><\/th>\r\n                <th v-for=\"char in chars\">{{char}}<\/th>\r\n            <\/thead>\r\n            <tr v-for=\"(layer, index) in cellsLayered\">\r\n\r\n                <!-- First cell, which is the index \/ row number -->\r\n                <th class=\"sticky-left\">{{index}}<\/th>\r\n\r\n                <!-- Display the cells -->\r\n                <td v-for=\"cell in layer\">\r\n\r\n                    <!-- Insert input with v-model for binding -->\r\n                    <input v-model=\"cells[cell+index]\" type=\"text\">\r\n\r\n                    <!-- Insert either a div that shows the value or a div that evalates the value -->\r\n                    <div>\r\n                        <div v-if=\"!cells[cell+index].startsWith('=')\">\r\n                            {{ cells[cell+index] }}\r\n                        <\/div>\r\n                        <div v-else class=\"eval\">\r\n                            {{ evaluation(cells[cell+index]) }}\r\n                        <\/div>\r\n                    <\/div>\r\n                <\/td>\r\n            <\/tr>\r\n        <\/table>\r\n    <\/div>\r\n\r\n    <script>\r\n        console.log(eval(\"1\"))\r\n\r\n        const { createApp } = Vue\r\n\r\n        \/* Define The list *\/\r\n        var chars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\r\n\r\n        \/* We are making this variables outside, but we will insert it into vue *\/\r\n        var cells = {}\r\n        var cellsLayered = []\r\n\r\n        for (let number = 0; number < 30; number++) {\r\n            var layer = []\r\n\r\n            chars.forEach(character => {\r\n                cells[character + number] = ''\r\n                layer.push(character)\r\n            });\r\n\r\n            cellsLayered.push(layer)\r\n        }\r\n\r\n        \/* Some Starting Values *\/\r\n        cells['a0'] = '10'\r\n        cells['a1'] = '20'\r\n        cells['b2'] = '=30'\r\n        cells['b3'] = '=a0'\r\n\r\n        createApp({\r\n            data() {\r\n                return {\r\n                    chars: chars,\r\n                    cells: cells,\r\n                    cellsLayered: cellsLayered\r\n                }\r\n            },\r\n            methods: {\r\n                evaluation(string) {\r\n\r\n                    if (string.startsWith('=')) {\r\n                        string = string.slice(1, string.length)\r\n                    }\r\n\r\n\r\n                    Object.keys(cells).forEach(coord => {\r\n                        if (string.includes(coord)) {\r\n\r\n                            string = string.split(coord).join(this.evaluation(cells[coord]))\r\n                        }\r\n                    })\r\n\r\n                    try {\r\n                        return eval(string)\r\n                    } catch (error) {\r\n                        return error\r\n                    }\r\n                }\r\n            }\r\n        }).mount('#app')\r\n    <\/script>\r\n<\/body>\r\n\r\n<\/html>\r\n```",
        "featured_image": "007 - simple spreadsheet app with vue\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 652,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<p>In this tutorial, we will make a simple spreadsheet app consisting of a large empty table that we can fill with values. We can also use this syntax <code>=expression<\/code> to allow for more complex interactions, and we all make it so these fields can refer to other fields' values so that it will be a little bit like excl. I split this Tutorial into four parts; HTML, Javascript &amp; CSS codes, and the program showcase, where you can try it out in an Iframe. We use the <code>js<\/code> framework <a href=\"https:\/\/vuejs.org\/\"><code>vue.js<\/code><\/a>.<\/p>\n<p>Let us get into making something extraordinary!<\/p>\n<h2>HTML Code<\/h2>\n<p>So let us start with the HTML of the site. You can copy the Framework below.<\/p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;\/title&gt;\n&lt;\/head&gt;\n\n&lt;body&gt;\n\n&lt;\/body&gt;\n\n&lt;\/html&gt;<\/code><\/pre>\n<p>Now for vue.js to work, we have to integrate it somehow. We could create a project with it, but for now, we load it through a <em>Content Delivery Network (CDN)<\/em>. So we add the code below to our page's head.<\/p>\n<pre><code class=\"language-html\">&lt;!-- Add vue via cdn --&gt;\n&lt;script  src=\"https:\/\/unpkg.com\/vue@3\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Our spreadsheet app will be bare, so we don't have any fancy UI, just the table. So we create a <code>div<\/code> and then in it the table. We give the <code>div<\/code> an id so we can later mount the vue app on it.<\/p>\n<pre><code class=\"language-html\">&lt;div  id=\"app\"&gt;\n    &lt;table&gt;<\/code><\/pre>\n<p>In the table, we start with the head, which will be the letters of the columns. We insert an empty header cell because the first column will consist of the row numbers. After that, we can use the <code>v-for=\"item in list\"<\/code> directive to copy this element and all its children. Inside the element, we can also use the item or how ever we called it with curly brackets like this <code>{{ item }}<\/code>.<\/p>\n<pre><code class=\"language-html\">   &lt;thead class=\"sticky-top\"&gt;\n       &lt;th&gt;&lt;\/th&gt;\n       &lt;th v-for=\"char in chars\"&gt;{{char}}&lt;\/th&gt;\n   &lt;\/thead&gt;<\/code><\/pre>\n<p>After setting up the top row, we start making the rows. We use the <code>v-for<\/code> directive again, but we do it this way <code>v-for=\"(item, index) in list\"<\/code>. We do this to get the item's index and the item itself. This is like doing this in python. <code>for I, item in enumerate(list):<\/code>. Then we use this index for the first column of this row, which will also be a head because it will show the row number.<\/p>\n<pre><code class=\"language-html\">&lt;tr v-for=\"(layer, index) in cellsLayered\"&gt;\n    &lt;!-- First cell, which is the index \/ row number --&gt;\n    &lt;th class=\"sticky-left\"&gt;{{index}}&lt;\/th&gt;<\/code><\/pre>\n<p>Continuing, we start another loop for the cells in this row, called layer in this example. We then make an <code>input<\/code> bound to the cell's value at <code>cell+index<\/code>. Later in the JS part, we learn why we do it this way.<\/p>\n<pre><code class=\"language-html\">&lt;!-- Display the cells --&gt;\n&lt;td v-for=\"cell in layer\"&gt;\n\n    &lt;!-- Insert input with v-model for binding --&gt;\n    &lt;input v-model=\"cells[cell+index]\" type=\"text\"&gt;<\/code><\/pre>\n<p>Then we either show the value of the cell here, or we call the <code>evaluation()<\/code> function we make later to evaluate whatever is in the cell. We check with the <code>v-if<\/code> and <code>v-else<\/code> directives.<\/p>\n<pre><code class=\"language-html\">    &lt;!-- Insert either a div that shows the value or a div that evalates the value --&gt;\n    &lt;div&gt;\n        &lt;div v-if=\"!cells[cell+index].startsWith('=')\"&gt;\n            {{ cells[cell+index] }}\n        &lt;\/div&gt;\n        &lt;div v-else class=\"eval\"&gt;\n            {{ evaluation(cells[cell+index]) }}\n        &lt;\/div&gt;\n    &lt;\/div&gt;\n   &lt;\/td&gt;\n  &lt;\/tr&gt;\n &lt;\/table&gt;\n&lt;\/div&gt;<\/code><\/pre>\n<p>Now we have the HTML. Let us go over the JavaScript.<\/p>\n<h2>JavaScript Code<\/h2>\n<p>Let us now add some functionality to our code with the js framework <code>vue.js<\/code>. We have already imported it in the head tag using a CDN.<\/p>\n<p>So lets start by getting the <code>createApp<\/code> function from vue.<\/p>\n<pre><code class=\"language-javascript\">const { createApp } = Vue<\/code><\/pre>\n<p>We continue by defining the letters the table has at the top row. In excl, after the <code>z<\/code>, it begins with <code>aa<\/code>, but we are just sticking with the alphabet.<\/p>\n<pre><code class=\"language-js\">\/* Define The list *\/\nvar chars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]<\/code><\/pre>\n<p>After that we define two variables. The cells Object will hold all the cells; the keys will look like this. <code>a0<\/code>, <code>b6<\/code> and <code>x10<\/code>. We also see this in excl. We also make a list called <code>cellsLayered<\/code> which will hold one list\/array for each layer, so it is easier to draw as you saw in the HTML part.<\/p>\n<pre><code class=\"language-js\">\/* We are making this variables outside, but we will insert it into vue *\/\nvar cells = {}\nvar cellsLayered = []<\/code><\/pre>\n<p>Now we need to populate these variables with values. So we start a loop which happens 30 times. Inside it, we define a layer variable, which, as it says, will hold the current layer of cells. Then we also loop through the character we specified earlier. We fill the <code>cells<\/code> object with empty strings, which will be inserted into the HTML. Then we also push the character to the layer. After the character loop, we push the layer to the <code>cellLayered<\/code> list.<\/p>\n<pre><code class=\"language-js\">for (let number = 0; number &lt; 30; number++) {\n    var layer = []\n\n    chars.forEach(character =&gt; {\n        cells[character + number] = ''\n        layer.push(character)\n    });\n\n    cellsLayered.push(layer)\n}<\/code><\/pre>\n<p>We insert some starting values at some positions.<\/p>\n<pre><code class=\"language-js\">\/* Some Starting Values *\/\ncells['a0'] = '10'\ncells['a1'] = '20'\ncells['b2'] = '=30'\ncells['b3'] = '=a0'<\/code><\/pre>\n<p>Now we can finally create the app. In its data function, we return some of the lists and objects we made, so they are available in the HTML.<\/p>\n<pre><code class=\"language-js\">createApp({\n    data() {\n        return {\n            chars: chars,\n            cells: cells,\n            cellsLayered: cellsLayered\n        }\n    },<\/code><\/pre>\n<p>Now we also define a custom method, the <code>evaluation()<\/code> we have used in the HTML. This will insert the values from other cells into this cell and evaluate the expression. We first remove the <code>=<\/code> from the string by slicing it. Then we loop over the keys of the cell's object and check if the key string appears in the cell string.<\/p>\n<p>If that is the case, we replace this appearance with the evaluated value of the respective cell by splitting and joining the string. Calling the function recursively allows us to have references to cells that already have connections. After that, we try to evaluate the string, or we return the error code, so this appears in the cell.<\/p>\n<pre><code class=\"language-js\">methods: {\n   evaluation(string) {\n\n       if (string.startsWith('=')) {    \n            string = string.slice(1, string.length) \n        }\n\n       Object.keys(cells).forEach(coord =&gt; {\n           if (string.includes(coord)) {\n               string = string.split(coord).join(this.evaluation(cells[coord]))\n           }\n       })\n\n       try {\n           return eval(string)\n       } catch (error) {\n           return error\n       }\n   }\n}\n}).mount('#app')<\/code><\/pre>\n<p>Don't forget to call the <code>mount(id)<\/code> function to assign the vue app to our div at the specified id.<\/p>\n<p>Let us look at our app in action.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/spreadsheet-1.gif\" alt=\"enter image description here\" \/><\/p>\n<p>It works! But it does not look nice. Let us style it with CSS!<\/p>\n<h2>CSS Code<\/h2>\n<p>We insert the CSS code into the head of the file.<\/p>\n<p>We simply start by removing the margin around the body, setting the font to any monospace type and setting everythings box sizing to <code>border-box<\/code><\/p>\n<pre><code class=\"language-css\">\/* CSS Setup *\/\nbody {\n    margin: 0\n}\n\n* {\n    font-family: monospace !important;\n    box-sizing: border-box;\n}<\/code><\/pre>\n<p>After that, we remove the spacing between the table cells by setting <code>border-spacing<\/code>  to 0.<\/p>\n<pre><code class=\"language-css\">\/* Remove Spacing between cells *\/\ntable {\n    border-spacing: 0;\n}<\/code><\/pre>\n<p>We continue by giving the cells some styling. First, we select both types <code>td<\/code> and <code>th<\/code> but then apply some individual styling.<\/p>\n<pre><code class=\"language-css\">\/* Styling the Cells *\/\ntd,\nth {\n    min-width: 70px;\n    min-height: 40px;\n    padding: 0.2em;\n    border-right: 1px solid rgb(209, 209, 209);\n    border-bottom: 1px solid rgb(209, 209, 209);\n}\n\nth {\n    background-color: rgb(229, 229, 229);\n}\n\ntd {\n    background-color: whitesmoke;\n    padding: 1em;\n    text-align: center;\n    position: relative;\n}<\/code><\/pre>\n<p>Now to the hard part. We want the input only visible when the user hovers over it or when he is writing and vice versa for the label, which shows the evaluated value of the cell. So we select both cases and ad <code>+div<\/code> add the end, which means <em>the first div after an input<\/em>. So this will hide the label in these cases.<\/p>\n<pre><code class=\"language-css\">\/* Toggle Input and Display *\/\n\n\/* Hide Label if input is focused or hovered *\/\ntd:hover input+div,\ntd input:focus+div {\n    display: none\n}<\/code><\/pre>\n<p>Styling the input and labels, setting them to full width and height, so they fill the cell.<\/p>\n<pre><code class=\"language-css\">\/* Expand input and label to full size of container *\/\ntd&gt;input,\ntd div {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-width: 0px;\n}<\/code><\/pre>\n<p>For the input to receive the hover from the mouse, we need to set <code>pointer-events<\/code> to none for the divs\/labels which show the value.<\/p>\n<pre><code class=\"language-css\">\/* Make Label see through for mouse *\/\ntd&gt;div {\n    pointer-events: none;\n}<\/code><\/pre>\n<p>Let us finish up the complicated part by setting the input to hidden by default and showing it as soon as its parent cell is hovered over or when it is in focus.<\/p>\n<pre><code class=\"language-css\">\/* Hide Input by default *\/\ntd input {\n    visibility: hidden;\n}\n\n\/* Show Input if focus or hover is true *\/\ntd:hover input,\ntd input:focus {\n    visibility: visible;\n}<\/code><\/pre>\n<p>Now for some custom classes. The eval class is just used for cells that are evaluated. The sticky-top and sticky-left do what they say. They stick to the top and left sides of the screen. We apply these to the headers of our tables so they are always visible.<\/p>\n<pre><code class=\"language-css\">\/* Classes *\/\n\n\/* Cells that are evaluated *\/\n.eval {\n    background-color: rgb(207, 255, 221)\n}\n\n\/* Top Row *\/\n.sticky-top {\n    position: sticky;\n    top: 0;\n    left: 0;\n    z-index: 99;\n    box-shadow: 0 1px 3px rgb(180, 180, 180)\n}\n\n\/* Left Column *\/\n.sticky-left {\n    position: sticky;\n    left: 0;\n    z-index: 98;\n}<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p>So that's it. Let us look at our little app.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/spreadsheet-2.gif\" alt=\"\" \/><\/p>\n<p>embed\n<a href=\"https:\/\/ai.quuli.ch\/examples\/\">simple spreadsheet app with vue (quuli.ch)<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a Simple spreadsheet app using HTML \/ CSS \/ Javascript and Vue.js! See how you can add more features to this program, such as functions like <code>sum<\/code> or saving and opening.<\/p>\n<h2>Full Code<\/h2>\n<pre><code class=\"language-HTML\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;simple spreadsheet app with vue&lt;\/title&gt;\n\n    &lt;!-- Add vue via cdn --&gt;\n    &lt;script src=\"https:\/\/unpkg.com\/vue@3\"&gt;&lt;\/script&gt;\n\n    &lt;style&gt;\n\/* CSS Setup *\/\nbody {\n    margin: 0\n}\n\n* {\n    font-family: monospace !important;\n    box-sizing: border-box;\n}\n\n\/* Remove Spacing between cells *\/\ntable {\n    border-spacing: 0;\n}\n\n\/* Styling the Cells *\/\ntd,\nth {\n    min-width: 70px;\n    min-height: 40px;\n    padding: 0.2em;\n    border-right: 1px solid rgb(209, 209, 209);\n    border-bottom: 1px solid rgb(209, 209, 209);\n}\n\nth {\n    background-color: rgb(229, 229, 229);\n}\n\ntd {\n    background-color: whitesmoke;\n    padding: 1em;\n    text-align: center;\n    position: relative;\n}\n\n\/* Toggle Input and Display *\/\n\n\/* Hide Label if input is focused or hovered *\/\ntd:hover input+div,\ntd input:focus+div {\n    display: none\n}\n\n\/* Expand input and label to full size of container *\/\ntd&gt;input,\ntd div {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-width: 0px;\n}\n\n\/* Make Label see through for mouse *\/\ntd&gt;div {\n    pointer-events: none;\n}\n\n\/* Hide Input by default *\/\ntd input {\n    visibility: hidden;\n}\n\n\/* Show Input if focus or hover is true *\/\ntd:hover input,\ntd input:focus {\n    visibility: visible;\n    outline: none;\n}\n\n\/* Classes *\/\n\n\/* Cells that are evaluated *\/\n.eval {\n    background-color: rgb(207, 255, 221)\n}\n\n\/* Top Row *\/\n.sticky-top {\n    position: sticky;\n    top: 0;\n    left: 0;\n    z-index: 99;\n    box-shadow: 0 1px 3px rgb(180, 180, 180)\n}\n\n\/* Left Column *\/\n.sticky-left {\n    position: sticky;\n    left: 0;\n    z-index: 98;\n}\n    &lt;\/style&gt;\n\n&lt;\/head&gt;\n\n&lt;body&gt;\n\n    &lt;div id=\"app\"&gt;\n\n        &lt;table&gt;\n            &lt;thead class=\"sticky-top\"&gt;\n                &lt;th&gt;&lt;\/th&gt;\n                &lt;th v-for=\"char in chars\"&gt;{{char}}&lt;\/th&gt;\n            &lt;\/thead&gt;\n            &lt;tr v-for=\"(layer, index) in cellsLayered\"&gt;\n\n                &lt;!-- First cell, which is the index \/ row number --&gt;\n                &lt;th class=\"sticky-left\"&gt;{{index}}&lt;\/th&gt;\n\n                &lt;!-- Display the cells --&gt;\n                &lt;td v-for=\"cell in layer\"&gt;\n\n                    &lt;!-- Insert input with v-model for binding --&gt;\n                    &lt;input v-model=\"cells[cell+index]\" type=\"text\"&gt;\n\n                    &lt;!-- Insert either a div that shows the value or a div that evalates the value --&gt;\n                    &lt;div&gt;\n                        &lt;div v-if=\"!cells[cell+index].startsWith('=')\"&gt;\n                            {{ cells[cell+index] }}\n                        &lt;\/div&gt;\n                        &lt;div v-else class=\"eval\"&gt;\n                            {{ evaluation(cells[cell+index]) }}\n                        &lt;\/div&gt;\n                    &lt;\/div&gt;\n                &lt;\/td&gt;\n            &lt;\/tr&gt;\n        &lt;\/table&gt;\n    &lt;\/div&gt;\n\n    &lt;script&gt;\n        console.log(eval(\"1\"))\n\n        const { createApp } = Vue\n\n        \/* Define The list *\/\n        var chars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\n        \/* We are making this variables outside, but we will insert it into vue *\/\n        var cells = {}\n        var cellsLayered = []\n\n        for (let number = 0; number &lt; 30; number++) {\n            var layer = []\n\n            chars.forEach(character =&gt; {\n                cells[character + number] = ''\n                layer.push(character)\n            });\n\n            cellsLayered.push(layer)\n        }\n\n        \/* Some Starting Values *\/\n        cells['a0'] = '10'\n        cells['a1'] = '20'\n        cells['b2'] = '=30'\n        cells['b3'] = '=a0'\n\n        createApp({\n            data() {\n                return {\n                    chars: chars,\n                    cells: cells,\n                    cellsLayered: cellsLayered\n                }\n            },\n            methods: {\n                evaluation(string) {\n\n                    if (string.startsWith('=')) {\n                        string = string.slice(1, string.length)\n                    }\n\n                    Object.keys(cells).forEach(coord =&gt; {\n                        if (string.includes(coord)) {\n\n                            string = string.split(coord).join(this.evaluation(cells[coord]))\n                        }\n                    })\n\n                    try {\n                        return eval(string)\n                    } catch (error) {\n                        return error\n                    }\n                }\n            }\n        }).mount('#app')\n    &lt;\/script&gt;\n&lt;\/body&gt;\n\n&lt;\/html&gt;<\/code><\/pre>",
            "post_title": "Simple spreadsheet app with vue",
            "post_excerpt": "Learn how to make a simple spreadsheet app with the javascript framework vue. We will create it so you can reference other cells.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "simple-spreadsheet-app-with-vue",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/simple-spreadsheet-app-with-vue\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Dropdown with SASS\/CSS",
        "description": "Learn how to make a dropdown class to be used in HTML with the CSS preprocessor SASS.",
        "slug": "dropdown-with-sass-css",
        "raw_content": "This tutorial will make dropdown classes for us to use in our code. We use the CSS preprocessor SASS. SASS allows us to extend our CSS, which will be more organized easily, but this is also a CSS Tutorial because we will not use many of the complex SASS features.\r\n\r\n## Base Class\r\n\r\nSo let us start the base class for the dropdowns. We start by defining a color variable that will hold the background color.\r\n\r\n```scss\r\n$color: rgb(214,  238,  255)\r\n```\r\n\r\nAfter that, we select all the elements where the string `dropdown` appears in the class attribute. Later we will see why we do this way.\r\n\r\n```scss\r\n[class*=\"dropdown\"]\r\n```\r\n\r\nWe then set the position of these items to relative. This is important because the dropdown panel will be placed using `absolute`. We also give it some padding, and we set its placement to `inline-block`. We also set the font family, but this is just, so it looks nicer.\r\n\r\n```scss\r\n\tposition: relative\r\n\tpadding: 1em\r\n\tdisplay: inline-block\r\n\r\n\tfont-family: 'Segoe UI', sans-serif\r\n```\r\n\r\nContinuing, we select the first immediate child of the dropdown class, make it bold with `font-weight: 600`, and set a transition for the transform. This element should be the header of the dropdown, which is the text you hover over for the dropdown panel to appear.\r\n\r\n```scss\r\n    \/* The Header of the Dropdown *\/\r\n    > *:first-child\r\n        transition: transform 0.25s ease\r\n        font-weight: 600\r\n```\r\n\r\nThen if we hover over the dropdown class, we set the background color as the value of the variable we defined at the beginning. We also add some rounded corners at the top. Then we also translate the first immediate child up by seven pixels, which will make a nice little animation in conjunction with the transition.\r\n\r\n```scss\r\n    &:hover\r\n        background: $color\r\n        border-radius: 10px 10px 0 0\r\n\r\n        > *:first-child\r\n            transform: translateY(-7px)\r\n```\r\n\r\nAfter that, we finally style the dropdown panel, which will be, in our case, just a `ul` element, but it could be any. We will set its display property to none, so it does not appear by default. Then we also set its minimum width to 100%, so it does not look bad. We also add a background color and padding.\r\n\r\n```scss\r\n\t\/* The Dropdownpanel that appears *\/\r\n    ul\r\n        display: none\r\n        min-width: 100%\r\n        background-color: $color\r\n        padding: 1em\r\n```\r\n\r\nWe remove the dots before the list items by setting the `list-style-type` property to `none`. We remove any margin, and we set the position to absolute. This will cause the element to break from the flow, enabling us to place it with `top`, `bottom`, `left`, and `right`, we have to. That is what we do, we set top to 100%, so the panel appears at the bottom of the parent element and left to 0, so it sticks to the left side of the parent. We also round the panel at the bottom and top right and set the `z-index` to 99 to ensure that the panel appears in front of any other elements.\r\n\r\n```scss\r\n        list-style-type: none\r\n        margin: 0\r\n        position: absolute\r\n        top: 100%\r\n        left: 0\r\n        border-radius: 0px 10px 10px 10px\r\n        z-index: 99\r\n```\r\n\r\nWe also remove the list item indentation by setting `padding-block-start` to zero.\r\n\r\n```scss\r\n        li\r\n            padding-block-start: 0\r\n```\r\n\r\nLast but not least, we reset the display property of the list in case we hover over the dropdown class, which will show it.\r\n\r\n```scss\r\n    &:hover ul\r\n        display: unset\r\n```\r\n\r\n## Right dropdown\r\n\r\nThe class above will make a dropdown panel sticking to the container's left, but maybe we want the dropdown to stick to the right. So for the right panel, we unset the `left` property and set `right` to zero. Because of how we selected the classes above, we can now make a small class called `dropdown-right` which will have all the properties of the other CSS but overwrite some of them.\r\n\r\n```scss\r\n\/* If the dropdown should start on the right side *\/\r\n.dropdown-right ul\r\n    border-radius: 10px 0px 10px 10px\r\n    left: unset\r\n    right: 0 !important\r\n    text-align: right\r\n```\r\n\r\n## Different panel widths\r\n\r\nMaybe you would also want the panel to be large for some dropdowns, so we now make a small loop. We first define two lists. One holds the values of the widths, and the other holds their respective names.\r\n\r\n```scss\r\n\/* Three Different widths for the dropdown panel *\/\r\n$dropdown-width-values: 100px, 200px, 300px\r\n$dropdown-width-names: 'slim', 'normal', 'wide'\r\n```\r\n\r\nAfter that, we zip the two lists to make one.\r\n\r\n```scss\r\n$dropdown-widths: zip($dropdown-width-names, $dropdown-width-values)\r\n```\r\n\r\nThen we loop over the list and do some insertions.\r\n\r\n```scss\r\n@each $name, $width in $dropdown-widths\r\n    .dropdown-#{$name} ul\r\n        min-width: $width\r\n```\r\n\r\n## showcase\r\n\r\nNow lets look at our classes in action. Keep in mind we looked at SASS compiling in this [article](https:\/\/maximmaeder.com\/padding-and-margin-classes-with-sass\/).\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/dropdown.gif)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a dropdown class using SASS\/CSS code!\r\n\r\n## Full Code\r\n\r\n```scss\r\n$color: rgb(214, 238, 255)\r\n\r\n[class*=\"dropdown\"]\r\n    position: relative\r\n    padding: 1em\r\n    display: inline-block\r\n\r\n    font-family: 'Segoe UI', sans-serif\r\n\r\n    \/* The Header of the Dropdown *\/\r\n    > *:first-child\r\n        transition: transform 0.25s ease\r\n        font-weight: 600\r\n\r\n    &:hover\r\n        background: $color\r\n        border-radius: 10px 10px 0 0\r\n\r\n        > *:first-child\r\n            transform: translateY(-7px)\r\n\r\n    \/* The Dropdownpanel that appears *\/\r\n    ul\r\n        display: none\r\n        min-width: 100%\r\n        background-color: $color\r\n        padding: 1em\r\n        list-style-type: none\r\n        margin: 0\r\n        position: absolute\r\n        top: 100%\r\n        left: 0\r\n        border-radius: 0px 10px 10px 10px\r\n        z-index: 99\r\n\r\n        li\r\n            padding-block-start: 0\r\n\r\n    &:hover ul\r\n        display: unset\r\n\r\n\/* If the dropdown should start on the right side *\/\r\n.dropdown-right ul\r\n    border-radius: 10px 0px 10px 10px\r\n    left: unset\r\n    right: 0 !important\r\n    text-align: right\r\n\r\n\/* Three Different widths for the dropdown panel *\/\r\n$dropdown-width-values: 100px, 200px, 300px\r\n$dropdown-width-names: 'slim', 'normal', 'wide'\r\n\r\n$dropdown-widths: zip($dropdown-width-names, $dropdown-width-values)\r\n\r\n@each $name, $width in $dropdown-widths\r\n    .dropdown-#{$name} ul\r\n        min-width: $width\r\n```",
        "featured_image": "008 - Dropdown with CSS\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 654,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<p>This tutorial will make dropdown classes for us to use in our code. We use the CSS preprocessor SASS. SASS allows us to extend our CSS, which will be more organized easily, but this is also a CSS Tutorial because we will not use many of the complex SASS features.<\/p>\n<h2>Base Class<\/h2>\n<p>So let us start the base class for the dropdowns. We start by defining a color variable that will hold the background color.<\/p>\n<pre><code class=\"language-scss\">$color: rgb(214,  238,  255)<\/code><\/pre>\n<p>After that, we select all the elements where the string <code>dropdown<\/code> appears in the class attribute. Later we will see why we do this way.<\/p>\n<pre><code class=\"language-scss\">[class*=\"dropdown\"]<\/code><\/pre>\n<p>We then set the position of these items to relative. This is important because the dropdown panel will be placed using <code>absolute<\/code>. We also give it some padding, and we set its placement to <code>inline-block<\/code>. We also set the font family, but this is just, so it looks nicer.<\/p>\n<pre><code class=\"language-scss\">    position: relative\n    padding: 1em\n    display: inline-block\n\n    font-family: 'Segoe UI', sans-serif<\/code><\/pre>\n<p>Continuing, we select the first immediate child of the dropdown class, make it bold with <code>font-weight: 600<\/code>, and set a transition for the transform. This element should be the header of the dropdown, which is the text you hover over for the dropdown panel to appear.<\/p>\n<pre><code class=\"language-scss\">    \/* The Header of the Dropdown *\/\n    &gt; *:first-child\n        transition: transform 0.25s ease\n        font-weight: 600<\/code><\/pre>\n<p>Then if we hover over the dropdown class, we set the background color as the value of the variable we defined at the beginning. We also add some rounded corners at the top. Then we also translate the first immediate child up by seven pixels, which will make a nice little animation in conjunction with the transition.<\/p>\n<pre><code class=\"language-scss\">    &amp;:hover\n        background: $color\n        border-radius: 10px 10px 0 0\n\n        &gt; *:first-child\n            transform: translateY(-7px)<\/code><\/pre>\n<p>After that, we finally style the dropdown panel, which will be, in our case, just a <code>ul<\/code> element, but it could be any. We will set its display property to none, so it does not appear by default. Then we also set its minimum width to 100%, so it does not look bad. We also add a background color and padding.<\/p>\n<pre><code class=\"language-scss\">    \/* The Dropdownpanel that appears *\/\n    ul\n        display: none\n        min-width: 100%\n        background-color: $color\n        padding: 1em<\/code><\/pre>\n<p>We remove the dots before the list items by setting the <code>list-style-type<\/code> property to <code>none<\/code>. We remove any margin, and we set the position to absolute. This will cause the element to break from the flow, enabling us to place it with <code>top<\/code>, <code>bottom<\/code>, <code>left<\/code>, and <code>right<\/code>, we have to. That is what we do, we set top to 100%, so the panel appears at the bottom of the parent element and left to 0, so it sticks to the left side of the parent. We also round the panel at the bottom and top right and set the <code>z-index<\/code> to 99 to ensure that the panel appears in front of any other elements.<\/p>\n<pre><code class=\"language-scss\">        list-style-type: none\n        margin: 0\n        position: absolute\n        top: 100%\n        left: 0\n        border-radius: 0px 10px 10px 10px\n        z-index: 99<\/code><\/pre>\n<p>We also remove the list item indentation by setting <code>padding-block-start<\/code> to zero.<\/p>\n<pre><code class=\"language-scss\">        li\n            padding-block-start: 0<\/code><\/pre>\n<p>Last but not least, we reset the display property of the list in case we hover over the dropdown class, which will show it.<\/p>\n<pre><code class=\"language-scss\">    &amp;:hover ul\n        display: unset<\/code><\/pre>\n<h2>Right dropdown<\/h2>\n<p>The class above will make a dropdown panel sticking to the container's left, but maybe we want the dropdown to stick to the right. So for the right panel, we unset the <code>left<\/code> property and set <code>right<\/code> to zero. Because of how we selected the classes above, we can now make a small class called <code>dropdown-right<\/code> which will have all the properties of the other CSS but overwrite some of them.<\/p>\n<pre><code class=\"language-scss\">\/* If the dropdown should start on the right side *\/\n.dropdown-right ul\n    border-radius: 10px 0px 10px 10px\n    left: unset\n    right: 0 !important\n    text-align: right<\/code><\/pre>\n<h2>Different panel widths<\/h2>\n<p>Maybe you would also want the panel to be large for some dropdowns, so we now make a small loop. We first define two lists. One holds the values of the widths, and the other holds their respective names.<\/p>\n<pre><code class=\"language-scss\">\/* Three Different widths for the dropdown panel *\/\n$dropdown-width-values: 100px, 200px, 300px\n$dropdown-width-names: 'slim', 'normal', 'wide'<\/code><\/pre>\n<p>After that, we zip the two lists to make one.<\/p>\n<pre><code class=\"language-scss\">$dropdown-widths: zip($dropdown-width-names, $dropdown-width-values)<\/code><\/pre>\n<p>Then we loop over the list and do some insertions.<\/p>\n<pre><code class=\"language-scss\">@each $name, $width in $dropdown-widths\n    .dropdown-#{$name} ul\n        min-width: $width<\/code><\/pre>\n<h2>showcase<\/h2>\n<p>Now lets look at our classes in action. Keep in mind we looked at SASS compiling in this <a href=\"https:\/\/maximmaeder.com\/padding-and-margin-classes-with-sass\/\">article<\/a>.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/dropdown.gif\" alt=\"enter image description here\" \/><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a dropdown class using SASS\/CSS code!<\/p>\n<h2>Full Code<\/h2>\n<pre><code class=\"language-scss\">$color: rgb(214, 238, 255)\n\n[class*=\"dropdown\"]\n    position: relative\n    padding: 1em\n    display: inline-block\n\n    font-family: 'Segoe UI', sans-serif\n\n    \/* The Header of the Dropdown *\/\n    &gt; *:first-child\n        transition: transform 0.25s ease\n        font-weight: 600\n\n    &amp;:hover\n        background: $color\n        border-radius: 10px 10px 0 0\n\n        &gt; *:first-child\n            transform: translateY(-7px)\n\n    \/* The Dropdownpanel that appears *\/\n    ul\n        display: none\n        min-width: 100%\n        background-color: $color\n        padding: 1em\n        list-style-type: none\n        margin: 0\n        position: absolute\n        top: 100%\n        left: 0\n        border-radius: 0px 10px 10px 10px\n        z-index: 99\n\n        li\n            padding-block-start: 0\n\n    &amp;:hover ul\n        display: unset\n\n\/* If the dropdown should start on the right side *\/\n.dropdown-right ul\n    border-radius: 10px 0px 10px 10px\n    left: unset\n    right: 0 !important\n    text-align: right\n\n\/* Three Different widths for the dropdown panel *\/\n$dropdown-width-values: 100px, 200px, 300px\n$dropdown-width-names: 'slim', 'normal', 'wide'\n\n$dropdown-widths: zip($dropdown-width-names, $dropdown-width-values)\n\n@each $name, $width in $dropdown-widths\n    .dropdown-#{$name} ul\n        min-width: $width<\/code><\/pre>",
            "post_title": "Dropdown with SASS\/CSS",
            "post_excerpt": "Learn how to make a dropdown class to be used in HTML with the CSS preprocessor SASS.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "dropdown-with-sass-css",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/dropdown-with-sass-css\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "How to make a Progressive Web App",
        "description": "Learn how to setup up a  in its most simplest form.",
        "slug": "how-to-make-a-progressive-web-app",
        "raw_content": "## Idea\r\nIn this tutorial, we will make a Progressive Web App (PWA) in its simplest form. This means we will make a bare-bones website with no features and want it to be installable. If you are serious about making a PWA, you can extend the framework created here. \r\n\r\nTo make a PWA, we need a *manifest.json* file.\r\nLet us get into it.\r\n\r\n## Setup\r\n\r\nBefore we get to coding, we set up our project.\r\n\r\n### Folders and Files\r\n\r\nSetup the following file structure somewhere on your computer, but you should view the file in a localhost context so you can test it. We need two javascript files. One holds the code for our App and the other for the service worker. Then we also have the manifest.json file and an image in a folder that will serve as our App's icon; it is 200 by 200 pixels large.\r\n\r\n```\r\nOur Project\r\n\u2502\r\n\u251c\u2500 images\/\r\n\u2502\t\u2514\u2500 icon_200.png\r\n\u251c\u2500 app.js\r\n\u251c\u2500 index.html\r\n\u251c\u2500 manifest.json\r\n\u2514\u2500 service-worker.js\r\n```\r\n\r\n### HTML and CSS\r\n\r\nNow let's get to setting up the HTML and CSS. We use the standard scaffolding for HTML and set a title and a favicon.\r\n\r\n```HTML\r\n<title>Simple PWA<\/title>\r\n\r\n<link  rel=\"shortcut icon\"  href=\"images\/icon_200.png\"  type=\"image\/x-icon\">\r\n```\r\n\r\nWe also set some CSS that centers all the content using the flexbox power.\r\n\r\n```HTML\r\n<style>\r\n    body {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n        height: 100vh;\r\n        margin: 0;\r\n        font-family: 'Segoe UI', sans-serif;\r\n    }\r\n    * {\r\n        margin: 0\r\n    }\r\n<\/style>\r\n```\r\n\r\nLast but not least, we insert some content into the body of our website.\r\n\r\n```html\r\n<h1>Sjs\r\n\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Progressive Web Applin ho o eu  a can fe o is rorm.**\r\noeimplerogressiveebpp i heioeeihseicole P-progressive W-web-app<\/h1>\r\n<p>By Maxim Maeder<\/p>\r\n<img src=\"images\/icon_200.png\" alt=\"Logo\" width=\"100\">\r\n```\r\n\r\nNow the website should look like this. The big M is our little icon.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/screenshot.jpeg)\r\n\r\n## Manifest.json\r\n\r\nOk, let's get to the Manifest.json File. This document will tell the browser different things about the web app. This information is organized in a json object with meaningful keys. Below you see our `manifest.json` file. It would be best if you supplied a name and a start_url, which tells the browser the starting page, how it should be displayed, what color should be shown while loading, and where to find icons for the App. More keys extend the features of your App, but these are sufficient for installation. It is important to set at least one icon that is larger than 200px-tutorial-f9708e5f2605)\r\n\r\n\r\n[**Web app manifests | MDN**](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Manifest#browser_compatibility)\r\n*Write down all possible keys of the manifest, with a column showing wether their are mandatory and an example. Must be linked to in theight and width and with a `purpose` set to `any`.\r\n\r\n```json\r\n{\r\n    \"name\": \"Simple PWA\",\r\n    \"start_url\": \".\",\r\n    \"display\": \"standalone\",\r\n    \"background_color\": \"#fff\",\r\n    \"icons\": [\r\n         {\r\n            \"src\": \"images\/icon_200.png\",\r\n            \"sizes\": \"200x200\",\r\n            \"type\": \"image\/png\",\r\n            \"purpose\": \"any\"\r\n         }\r\n    ]\r\n}\r\n```\r\n\r\nWe have to import this the `manifest.json` file using the code below at the head of our page. This is all we have to do for this part.\r\n\r\n```HTML\r\n<!-- Import the manifest.json File -->\r\n<link  rel=\"manifest\"  href=\"manifest.json\">\r\n```\r\n\r\n##  html of the index page. Illustrator can export images in multiple sizes at once.*\r\n\r\n[**Using Service Workers | MDN**](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service-w_Worker.js\r\n\r\nNow for the s_API\/Using_Service w_Worker. This is simply a js file that handles the cool features of a progressive web app. It runs in the background, so it does not have access to the DOM. In the simplest form, it handles caching files for offline usage of the App.\r\n\r\nFirst, we import the `app.js` in our `index.html`.\r\n\r\n```HTML\r\n<script  src=\"app.js\"><\/script>\r\n```\r\n\r\nThen in that file, we call s)\r\n*1. Must be served over HTTPS (or localhost).\r\n2. Path to it hast to be absolute ( \/sw.js )\r\n3. Could be unsupported ( check withe `navigator.'serviceWorker.register(path)` function with the file's path.\r\n\r\n```js\r\nvar worker = navigator.serviceWorker.register('s' in navigator` )\r\n[4.](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service-w_Worker.js')\r\n```\r\n\r\nIn the `s_API\/Using_Service-w_Worker.js` file, we start by making a function that will cache our files. We begin by opening a cache with the `caches.open(string)` function. Then we add the paths of all the resources we want to cache with the `addAll` method. So these files will be downloaded to the user so they can be accessed without an internet connection.\r\n\r\n```js\r\nfunction CacheStuff() {\r\n    var cache = caches.open('v10');\r\n    cache.addAll([\r\n        '\/',\r\n        '\/index.html',\r\n        '\/images\/icon_200.png'\r\n    ])\r\n}\r\n```\r\n\r\nAfterward, we set up an event listener with the `install` event. We can use this here because the file will know we mean the service-worker when we run it in that context. If this event occurs, we want to call our `CacheStuff()` function. This means it will download all the necessary resources upon installing the App.\r\n\r\n```js\r\nthis.addEventListener('install', (event) => {\r\n    event.waitUntil(CacheStuff())\r\n})\r\n```\r\n\r\nLast, we also handle the `s#registering_your_worker) Is regristrated with `\r\nnavigator.serviceWorker.register(path)\r\n`\r\n5. We must add stuff to the cache for it to be available offline\r\n6. install and fetch` event, which occurs whenever the user agent wants to access any resource. Here respond to that request with the resources in the cache by matching it.\r\n\r\n```js\r\nthis.addEventListener('fetch', (event) => {\r\n  event.respondWith(\r\n    caches.match(event.request)\r\n  );\r\n})\r\n```\r\n\r\nThat's It! Now the App is installable, and It will work offline.\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Progressive Web Application! See how you can fine-tune the App so lighthouse and your users are happier!\r\n\r\n[Project on GitHub](https:\/\/github.com\/Maximinodotpy\/progressive-web-app)\r\n[Simple PWA (maximmaeder.com)](https:\/\/expenses.maximmaeder.com\/.*\r\n\r\n\r\n**Further**\r\n[Recovering failed Requests](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service_Worker_API\/Using_Service_Workers#recovering_failed_requests)\r\n[Navigator.onLine](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Navigator\/onLine)",
        "featured_image": "009 - How to make PWA\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 656,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>In this tutorial, we will make a Progressive Web App (PWA) in its simplest form. This means we will make a bare-bones website with no features and want it to be installable. If you are serious about making a PWA, you can extend the framework created here. <\/p>\n<p>To make a PWA, we need a <em>manifest.json<\/em> file.\nLet us get into it.<\/p>\n<h2>Setup<\/h2>\n<p>Before we get to coding, we set up our project.<\/p>\n<h3>Folders and Files<\/h3>\n<p>Setup the following file structure somewhere on your computer, but you should view the file in a localhost context so you can test it. We need two javascript files. One holds the code for our App and the other for the service worker. Then we also have the manifest.json file and an image in a folder that will serve as our App's icon; it is 200 by 200 pixels large.<\/p>\n<pre><code>Our Project\n\u2502\n\u251c\u2500 images\/\n\u2502   \u2514\u2500 icon_200.png\n\u251c\u2500 app.js\n\u251c\u2500 index.html\n\u251c\u2500 manifest.json\n\u2514\u2500 service-worker.js<\/code><\/pre>\n<h3>HTML and CSS<\/h3>\n<p>Now let's get to setting up the HTML and CSS. We use the standard scaffolding for HTML and set a title and a favicon.<\/p>\n<pre><code class=\"language-HTML\">&lt;title&gt;Simple PWA&lt;\/title&gt;\n\n&lt;link  rel=\"shortcut icon\"  href=\"images\/icon_200.png\"  type=\"image\/x-icon\"&gt;<\/code><\/pre>\n<p>We also set some CSS that centers all the content using the flexbox power.<\/p>\n<pre><code class=\"language-HTML\">&lt;style&gt;\n    body {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        height: 100vh;\n        margin: 0;\n        font-family: 'Segoe UI', sans-serif;\n    }\n    * {\n        margin: 0\n    }\n&lt;\/style&gt;<\/code><\/pre>\n<p>Last but not least, we insert some content into the body of our website.<\/p>\n<pre><code class=\"language-html\">&lt;h1&gt;Sjs\n\n## Conclusion\n\nExcellent! You have successfully created a Progressive Web Applin ho o eu  a can fe o is rorm.**\noeimplerogressiveebpp i heioeeihseicole P-progressive W-web-app&lt;\/h1&gt;\n&lt;p&gt;By Maxim Maeder&lt;\/p&gt;\n&lt;img src=\"images\/icon_200.png\" alt=\"Logo\" width=\"100\"&gt;<\/code><\/pre>\n<p>Now the website should look like this. The big M is our little icon.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/screenshot.jpeg\" alt=\"enter image description here\" \/><\/p>\n<h2>Manifest.json<\/h2>\n<p>Ok, let's get to the Manifest.json File. This document will tell the browser different things about the web app. This information is organized in a json object with meaningful keys. Below you see our <code>manifest.json<\/code> file. It would be best if you supplied a name and a start_url, which tells the browser the starting page, how it should be displayed, what color should be shown while loading, and where to find icons for the App. More keys extend the features of your App, but these are sufficient for installation. It is important to set at least one icon that is larger than 200px-tutorial-f9708e5f2605)<\/p>\n<p><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Manifest#browser_compatibility\"><strong>Web app manifests | MDN<\/strong><\/a>\n*Write down all possible keys of the manifest, with a column showing wether their are mandatory and an example. Must be linked to in theight and width and with a <code>purpose<\/code> set to <code>any<\/code>.<\/p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Simple PWA\",\n    \"start_url\": \".\",\n    \"display\": \"standalone\",\n    \"background_color\": \"#fff\",\n    \"icons\": [\n         {\n            \"src\": \"images\/icon_200.png\",\n            \"sizes\": \"200x200\",\n            \"type\": \"image\/png\",\n            \"purpose\": \"any\"\n         }\n    ]\n}<\/code><\/pre>\n<p>We have to import this the <code>manifest.json<\/code> file using the code below at the head of our page. This is all we have to do for this part.<\/p>\n<pre><code class=\"language-HTML\">&lt;!-- Import the manifest.json File --&gt;\n&lt;link  rel=\"manifest\"  href=\"manifest.json\"&gt;<\/code><\/pre>\n<h2>html of the index page. Illustrator can export images in multiple sizes at once.*<\/h2>\n<p>[<strong>Using Service Workers | MDN<\/strong>](<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service-w_Worker.js\">https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service-w_Worker.js<\/a><\/p>\n<p>Now for the s_API\/Using_Service w_Worker. This is simply a js file that handles the cool features of a progressive web app. It runs in the background, so it does not have access to the DOM. In the simplest form, it handles caching files for offline usage of the App.<\/p>\n<p>First, we import the <code>app.js<\/code> in our <code>index.html<\/code>.<\/p>\n<pre><code class=\"language-HTML\">&lt;script  src=\"app.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Then in that file, we call s)\n*1. Must be served over HTTPS (or localhost).<\/p>\n<ol start=\"2\">\n<li>Path to it hast to be absolute ( \/sw.js )<\/li>\n<li>Could be unsupported ( check withe <code>navigator.'serviceWorker.register(path)<\/code> function with the file's path.<\/li>\n<\/ol>\n<pre><code class=\"language-js\">var worker = navigator.serviceWorker.register('s' in navigator` )\n[4.](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service-w_Worker.js')<\/code><\/pre>\n<p>In the <code>s_API\/Using_Service-w_Worker.js<\/code> file, we start by making a function that will cache our files. We begin by opening a cache with the <code>caches.open(string)<\/code> function. Then we add the paths of all the resources we want to cache with the <code>addAll<\/code> method. So these files will be downloaded to the user so they can be accessed without an internet connection.<\/p>\n<pre><code class=\"language-js\">function CacheStuff() {\n    var cache = caches.open('v10');\n    cache.addAll([\n        '\/',\n        '\/index.html',\n        '\/images\/icon_200.png'\n    ])\n}<\/code><\/pre>\n<p>Afterward, we set up an event listener with the <code>install<\/code> event. We can use this here because the file will know we mean the service-worker when we run it in that context. If this event occurs, we want to call our <code>CacheStuff()<\/code> function. This means it will download all the necessary resources upon installing the App.<\/p>\n<pre><code class=\"language-js\">this.addEventListener('install', (event) =&gt; {\n    event.waitUntil(CacheStuff())\n})<\/code><\/pre>\n<p>Last, we also handle the <code>s#registering_your_worker) Is regristrated with<\/code>\nnavigator.serviceWorker.register(path)\n`<\/p>\n<ol start=\"5\">\n<li>We must add stuff to the cache for it to be available offline<\/li>\n<li>install and fetch` event, which occurs whenever the user agent wants to access any resource. Here respond to that request with the resources in the cache by matching it.<\/li>\n<\/ol>\n<pre><code class=\"language-js\">this.addEventListener('fetch', (event) =&gt; {\n  event.respondWith(\n    caches.match(event.request)\n  );\n})<\/code><\/pre>\n<p>That's It! Now the App is installable, and It will work offline.<\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a Progressive Web Application! See how you can fine-tune the App so lighthouse and your users are happier!<\/p>\n<p><a href=\"https:\/\/github.com\/Maximinodotpy\/progressive-web-app\">Project on GitHub<\/a>\n[Simple PWA (maximmaeder.com)](<a href=\"https:\/\/expenses.maximmaeder.com\/\">https:\/\/expenses.maximmaeder.com\/<\/a>.*<\/p>\n<p><strong>Further<\/strong>\n<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Service_Worker_API\/Using_Service_Workers#recovering_failed_requests\">Recovering failed Requests<\/a>\n<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Navigator\/onLine\">Navigator.onLine<\/a><\/p>",
            "post_title": "How to make a Progressive Web App",
            "post_excerpt": "Learn how to setup up a  in its most simplest form.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "how-to-make-a-progressive-web-app",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/how-to-make-a-progressive-web-app\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Highlighted Dummy Code Editor with HTML CSS JavaScript (vue.js)",
        "description": "Learn about HTML, CSS, JavaScript (vue.js), and Regular Expressions by creating a dummy code editor that looks like VS-Code",
        "slug": "highlighted-dummy-code-editor-with-html-css-javascript-vue-js",
        "raw_content": "## Idea\r\n\r\nToday we will create a dummy code editor that supports syntax highlighting. We use HTML, CSS and JavaScript (Vue.js). We are also going to learn about RegularExpressions for the highlighting. Below you see the Editor already in action, so you better understand what we will do.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/code.gif)\r\n\r\nYou find the Live Demo [here](https:\/\/dummy-editor.maximmaeder.com\/).\r\n\r\n\r\n## HTML\r\n\r\nWe start with the HTML of the Editor. We use the standard scaffolding of HTML, which can be made in VS-Code with the emmet abbreviation `!`.\r\n\r\nAt the Head of the page, we set a title that will appear in the browser tab, import the style sheet, and get vue.js via a Content Delivery System, so we don't have to set up a project. However, it is not advised to do that since there could be loading times when the CDN servers receive many requests simultaneously.\r\n\r\n```HTML\r\n<title>Highlighted Dummy Code Editor<\/title>\r\n\r\n<link rel=\"stylesheet\" href=\"style.css\">\r\n\r\n<script src=\"https:\/\/unpkg.com\/vue@3\"><\/script>\r\n```\r\n\r\nNow inside the body, we add a div with the id `app`, which will be our app. Then inside, we have two divs. One represents the menubar at the top, and the other holds the Editor. We won't go into detail in the menubar as it just contains buttons like `File`, `Edit`, `Help`.\r\n\r\n```html\r\n<div id=\"app\">\r\n    <div class=\"menubar\">\r\n        ....\r\n    <\/div>\r\n\r\n    <div class=\"editor-container\">\r\n        ....\r\n    <\/div>\r\n<\/div>\r\n```\r\n\r\nNow inside the editor container, we once again have two divs. The first one will be holding the line numbers. In it, we duplicate a span element with a ranged loop. The range is determined by the line count of the `content` which will hold the input.\r\n\r\nThen for the Editor itself, we insert a `div` and a `textarea` We do it this way because the user can only edit the text area, but it cant display HTML. That's why we need the div. We insert the converted as HTML into it with the `v-html` directive, and we bind the content value to the textarea with the `v-model` directive. The content will be parsed and extended with syntax highlighting before being inserted into the div.\r\n\r\n```HTML\r\n<div class=\"linenumbers\">\r\n    <span v-for=\"n in content.split('\\n').length\">{{ n }} <br> <\/span>\r\n<\/div>\r\n<div class=\"editor\">\r\n    <div class=\"display\" id=\"textarea\" v-html=\"convert()\"><\/div>\r\n    <textarea v-model=\"content\"><\/textarea>\r\n<\/div>\r\n```\r\n\r\nWith CSS, we will make it, so the textarea and div are overlaid onto each other, so the user does not notice that he is not editing only one area but two.\r\n\r\nNow let's add some functionality with JavaScript!\r\n\r\n## JavaScript\r\n\r\n### Setup\r\n\r\nWe have imported vue.js. Now we get the createApp function. After that, we also set a starting String that is not shown here in total, containing some python code.\r\n\r\n```js\r\nconst { createApp } = Vue\r\n\r\nvar startingString = `from argparse import ArgumentParser\r\n...`\r\n```\r\n\r\nThen we call that function and set up our starting string to be the `content` variable in the vue.js object. The user is editing this value. We have already seen how this value is handled in the HTML. We also define a method `convert()` that we use to convert the content to HTML. In the next part, we examine how this function is made up. Last but not least, we mount the app on our div with the id `#app`.\r\n\r\n```\r\ncreateApp({\r\n    data() {\r\n        return {\r\n            content: startingString\r\n        }\r\n    },\r\n    methods: {\r\n        convert() {\r\n\t\t\t...\r\n\t\t}\r\n    }\r\n}).mount('#app')\r\n```\r\n\r\n### Highlight the Code using Regular Expressions\r\n\r\nNow, let us highlight some code! In the convert function of our vue app, we start by saving the content variable to the parsed variable.\r\n\r\n```js\r\nvar parsed = this.content\r\n```\r\n\r\n\r\nThen we define many regex patterns being replaced with the `RegExp` object. But what do these mean? Let's look at the first two patterns meant for strings with `\"` and `'`. All regex patterns look like this: `\/pattern\/modifier` where the modifier is almost always `g`, which means that all patterns are matched. It is also possible to tell it to match case insensitive. The pattern part starts with `\", which means itself, but then we continue with `(.*?)`. Here the parentheses group this part of the pattern. The dot `.` means to match any character. And the `*` modifies the character in front of it so it can appear zero to infinite times, so any number of characters, but the `?` tells it to be lazy. We conclude with another `\"`. Lazy means it will try to match as few characters as possible. Example: `\"Hey\" hola() \"Goodbye\"`. It should have two matches because there is a function in the middle. With our lazy modifier, it would match the whole string. The `commentWordPattern` is pretty similar. The `keyWordPattern` is also easy as the `|` means a match that or this word\/character.\r\n\r\n```js\r\n\/* Patterns *\/\r\nvar stringPattern1 = new RegExp(\/\"(.*?)\"\/g)\r\nvar stringPattern2 = new RegExp(\/'(.*?)'\/g)\r\nvar keyWordPattern = new RegExp(\/\\b(False|None|True|and|as|assert|async|await|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|raise|return|try|while|with|yield)\\b\/g)\r\nvar commentWordPattern = new RegExp(\/(#.*)\/g)\r\nvar functionWordPattern = new RegExp(\/([a-zA-Z_]*)(\\(.*\\))\/g)\r\nvar numberWordPattern = new RegExp(\/(\\d)\/g)\r\n```\r\n\r\nNow we also need to change our content according to the patterns. Here the grouping plays a big role because we can insert that group into the replacement with the `$1` placeholder. Nine groups can be inserted with `$1` to `$9`. So we use `string.replace(pattern, replacement)`. We replace each type with its content but wrapped in a span element with a custom attribute, which we later use to style strings, keywords, comments, and functions.\r\n\r\n```js\r\nparsed = parsed.replace(stringPattern1, '<span str>\"$1\"<\/span>')\r\nparsed = parsed.replace(stringPattern2, '<span str>\\'$1\\'<\/span>')\r\nparsed = parsed.replace(keyWordPattern, '<span kw>$1<\/span>')\r\nparsed = parsed.replace(commentWordPattern, '<span com>$1<\/span>')\r\nparsed = parsed.replace(functionWordPattern, '<span func>$1<\/span>$2')\r\nparsed = parsed.replace(numberWordPattern, '<span num>$1<\/span>')\r\n```\r\n\r\nLast but not least, we return the parsed HTML so it can be used with the `v-html` directive.\r\n\r\n```js\r\nreturn parsed\r\n```\r\n\r\nNow the application should work. But it does not look good, so we add some CSS!\r\n\r\n## CSS\r\n\r\n### Setup\r\n\r\nLet's start by setting box-sizing to border-box because it will make it easier to work with paddings. Then we select a dark background color and make it, so the body is one hundred percent of the viewport height high. And we remove the margins of everything.\r\n\r\n```CSS\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n}\r\n\r\nbody {\r\n    background-color: RGB(42, 42, 42) !important;\r\n    height: 100vh\r\n}\r\n```\r\n\r\nAfter that, we make a class for the menu bar we defined earlier in the HTML. We set it to `display: flex` so the items are side by side, and we also make it stick to the top with `position: sticky` and `top: 0`. We also set the `z-index` to anything greater than one. We also style the buttons in the menubar in their usual and hovered states. This ensures that the menubar is in front of the code at all times.\r\n\r\n```CSS\r\n.menubar {\r\n    background-color: RGB(54, 54, 54) !important;\r\n    padding-left: 1em;\r\n    display: flex;\r\n    align-items: center;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 2;\r\n}\r\n\r\n.menubar button {\r\n    padding: 0.7em 0.7em;\r\n    background-color: transparent;\r\n    color: RGB(175, 175, 175);\r\n    border: none;\r\n}\r\n\r\n.menubar button:hover {\r\n    background-color: RGB(66, 66, 66);\r\n    cursor: pointer;\r\n}\r\n```\r\n\r\n### Editor\r\n\r\nNow let us get to the Editor. We first set the container's display to the grid and two columns. One is `50px` in width, and the other fills the rest of the available space using `1fr`. The 50 Pixel column will hold the line numbers.\r\n\r\n```CSS\r\n.editor-container {\r\n    display: grid;\r\n    grid-template-columns: 50px 1fr\r\n}\r\n\r\n.linenumbers {\r\n    color: rgb(109, 109, 109);\r\n    font-size: 1.3em;\r\n    font-family: monospace !important;\r\n    padding: 1em 0.1em;\r\n    text-align: right;\r\n}\r\n\r\n.linenumbers span {\r\n    width: 100% !important;\r\n}\r\n```\r\n\r\nIn the .display area and the textarea, we set the height to 100% and the resize to none, so the textarea stays the same. Then, set the position to absolute, so the elements break out the flow. This will cause them to go to the top left of their container, essentially overlaying each other.\r\n\r\n```CSS\r\n.display,\r\ntextarea {\r\n    padding: 1em;\r\n    font-size: 1.3em;\r\n    font-family: monospace !important;\r\n    height: 100%;\r\n    outline: none;\r\n    border: 0px solid black;\r\n    width: 100%;\r\n    resize: none;\r\n    position: absolute;\r\n    margin: 0;\r\n    background: transparent;\r\n    padding-left: 1em;\r\n    overflow-x: auto;\r\n}\r\n```\r\n\r\nNow we set the color of the text area to be transparent. But this will cause the caret to be invisible, so we have to set its color once again. For the display, we set a color and the `white-space` property to `pre-wrap` so the white spaces prevail.\r\n\r\n```css\r\ntextarea {\r\n    color: rgba(0, 0, 0, 0);\r\n    caret-color: aliceblue;\r\n}\r\n\r\n.display {\r\n    color: rgb(216, 216, 216);\r\n    white-space: pre-wrap;\r\n}\r\n```\r\n\r\nLast but not least, we set the height of the container to 100 percent the position to relative.\r\n\r\n```CSS\r\n.editor {\r\n    height: 100%;\r\n    position: relative;\r\n    flex-grow: 1;\r\n}\r\n```\r\n\r\n### Highlights\r\n\r\nNow for the syntax highlighting, we simply color elements that have the attributes we have provided.\r\n\r\n```CSS\r\n[kw] {\r\n    color: RGB(234, 97, 97);\r\n}\r\n\r\n[num] {\r\n    color: #d8fff6;\r\n}\r\n\r\n[func] {\r\n    color: rgb(95, 211, 234);\r\n}\r\n\r\n[str],\r\n[str] * {\r\n    color: rgb(234, 162, 95) !important;\r\n}\r\n\r\n[com],\r\n[com] * {\r\n    color: rgb(95, 234, 165) !important;\r\n}\r\n```\r\n\r\n## Showcase\r\n\r\nLet's look at the app in action.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/code.gif)\r\n\r\nYou find the Live Demo [here](https:\/\/dummy-editor.maximmaeder.com\/).\r\nYou find the [GitHub Repo](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2010%20-%20Highlighted%20Code%20Editor%20with%20vue.js%20and%20regex) here.\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Dummy using Python code! See how you can add more features to this program, such as different languages.\r\n\r\n[GitHub](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2010%20-%20Highlighted%20Code%20Editor%20with%20vue.js%20and%20regex)",
        "featured_image": "010 - Highlighted Code Editor with vue.js and regex\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 658,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>Today we will create a dummy code editor that supports syntax highlighting. We use HTML, CSS and JavaScript (Vue.js). We are also going to learn about RegularExpressions for the highlighting. Below you see the Editor already in action, so you better understand what we will do.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/code.gif\" alt=\"enter image description here\" \/><\/p>\n<p>You find the Live Demo <a href=\"https:\/\/dummy-editor.maximmaeder.com\/\">here<\/a>.<\/p>\n<h2>HTML<\/h2>\n<p>We start with the HTML of the Editor. We use the standard scaffolding of HTML, which can be made in VS-Code with the emmet abbreviation <code>!<\/code>.<\/p>\n<p>At the Head of the page, we set a title that will appear in the browser tab, import the style sheet, and get vue.js via a Content Delivery System, so we don't have to set up a project. However, it is not advised to do that since there could be loading times when the CDN servers receive many requests simultaneously.<\/p>\n<pre><code class=\"language-HTML\">&lt;title&gt;Highlighted Dummy Code Editor&lt;\/title&gt;\n\n&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n\n&lt;script src=\"https:\/\/unpkg.com\/vue@3\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Now inside the body, we add a div with the id <code>app<\/code>, which will be our app. Then inside, we have two divs. One represents the menubar at the top, and the other holds the Editor. We won't go into detail in the menubar as it just contains buttons like <code>File<\/code>, <code>Edit<\/code>, <code>Help<\/code>.<\/p>\n<pre><code class=\"language-html\">&lt;div id=\"app\"&gt;\n    &lt;div class=\"menubar\"&gt;\n        ....\n    &lt;\/div&gt;\n\n    &lt;div class=\"editor-container\"&gt;\n        ....\n    &lt;\/div&gt;\n&lt;\/div&gt;<\/code><\/pre>\n<p>Now inside the editor container, we once again have two divs. The first one will be holding the line numbers. In it, we duplicate a span element with a ranged loop. The range is determined by the line count of the <code>content<\/code> which will hold the input.<\/p>\n<p>Then for the Editor itself, we insert a <code>div<\/code> and a <code>textarea<\/code> We do it this way because the user can only edit the text area, but it cant display HTML. That's why we need the div. We insert the converted as HTML into it with the <code>v-html<\/code> directive, and we bind the content value to the textarea with the <code>v-model<\/code> directive. The content will be parsed and extended with syntax highlighting before being inserted into the div.<\/p>\n<pre><code class=\"language-HTML\">&lt;div class=\"linenumbers\"&gt;\n    &lt;span v-for=\"n in content.split('n').length\"&gt;{{ n }} &lt;br&gt; &lt;\/span&gt;\n&lt;\/div&gt;\n&lt;div class=\"editor\"&gt;\n    &lt;div class=\"display\" id=\"textarea\" v-html=\"convert()\"&gt;&lt;\/div&gt;\n    &lt;textarea v-model=\"content\"&gt;&lt;\/textarea&gt;\n&lt;\/div&gt;<\/code><\/pre>\n<p>With CSS, we will make it, so the textarea and div are overlaid onto each other, so the user does not notice that he is not editing only one area but two.<\/p>\n<p>Now let's add some functionality with JavaScript!<\/p>\n<h2>JavaScript<\/h2>\n<h3>Setup<\/h3>\n<p>We have imported vue.js. Now we get the createApp function. After that, we also set a starting String that is not shown here in total, containing some python code.<\/p>\n<pre><code class=\"language-js\">const { createApp } = Vue\n\nvar startingString = `from argparse import ArgumentParser\n...`<\/code><\/pre>\n<p>Then we call that function and set up our starting string to be the <code>content<\/code> variable in the vue.js object. The user is editing this value. We have already seen how this value is handled in the HTML. We also define a method <code>convert()<\/code> that we use to convert the content to HTML. In the next part, we examine how this function is made up. Last but not least, we mount the app on our div with the id <code>#app<\/code>.<\/p>\n<pre><code>createApp({\n    data() {\n        return {\n            content: startingString\n        }\n    },\n    methods: {\n        convert() {\n            ...\n        }\n    }\n}).mount('#app')<\/code><\/pre>\n<h3>Highlight the Code using Regular Expressions<\/h3>\n<p>Now, let us highlight some code! In the convert function of our vue app, we start by saving the content variable to the parsed variable.<\/p>\n<pre><code class=\"language-js\">var parsed = this.content<\/code><\/pre>\n<p>Then we define many regex patterns being replaced with the <code>RegExp<\/code> object. But what do these mean? Let's look at the first two patterns meant for strings with <code>\"<\/code> and <code>'<\/code>. All regex patterns look like this: <code>\/pattern\/modifier<\/code> where the modifier is almost always <code>g<\/code>, which means that all patterns are matched. It is also possible to tell it to match case insensitive. The pattern part starts with <code>\", which means itself, but then we continue with<\/code>(.<em>?)<code>. Here the parentheses group this part of the pattern. The dot<\/code>.<code>means to match any character. And the<\/code><\/em><code>modifies the character in front of it so it can appear zero to infinite times, so any number of characters, but the<\/code>?<code>tells it to be lazy. We conclude with another<\/code>&quot;<code>. Lazy means it will try to match as few characters as possible. Example:<\/code>&quot;Hey&quot; hola() &quot;Goodbye&quot;<code>. It should have two matches because there is a function in the middle. With our lazy modifier, it would match the whole string. The<\/code>commentWordPattern<code>is pretty similar. The<\/code>keyWordPattern<code>is also easy as the<\/code>|` means a match that or this word\/character.<\/p>\n<pre><code class=\"language-js\">\/* Patterns *\/\nvar stringPattern1 = new RegExp(\/\"(.*?)\"\/g)\nvar stringPattern2 = new RegExp(\/'(.*?)'\/g)\nvar keyWordPattern = new RegExp(\/b(False|None|True|and|as|assert|async|await|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|raise|return|try|while|with|yield)b\/g)\nvar commentWordPattern = new RegExp(\/(#.*)\/g)\nvar functionWordPattern = new RegExp(\/([a-zA-Z_]*)((.*))\/g)\nvar numberWordPattern = new RegExp(\/(d)\/g)<\/code><\/pre>\n<p>Now we also need to change our content according to the patterns. Here the grouping plays a big role because we can insert that group into the replacement with the <code>$1<\/code> placeholder. Nine groups can be inserted with <code>$1<\/code> to <code>$9<\/code>. So we use <code>string.replace(pattern, replacement)<\/code>. We replace each type with its content but wrapped in a span element with a custom attribute, which we later use to style strings, keywords, comments, and functions.<\/p>\n<pre><code class=\"language-js\">parsed = parsed.replace(stringPattern1, '&lt;span str&gt;\"$1\"&lt;\/span&gt;')\nparsed = parsed.replace(stringPattern2, '&lt;span str&gt;'$1'&lt;\/span&gt;')\nparsed = parsed.replace(keyWordPattern, '&lt;span kw&gt;$1&lt;\/span&gt;')\nparsed = parsed.replace(commentWordPattern, '&lt;span com&gt;$1&lt;\/span&gt;')\nparsed = parsed.replace(functionWordPattern, '&lt;span func&gt;$1&lt;\/span&gt;$2')\nparsed = parsed.replace(numberWordPattern, '&lt;span num&gt;$1&lt;\/span&gt;')<\/code><\/pre>\n<p>Last but not least, we return the parsed HTML so it can be used with the <code>v-html<\/code> directive.<\/p>\n<pre><code class=\"language-js\">return parsed<\/code><\/pre>\n<p>Now the application should work. But it does not look good, so we add some CSS!<\/p>\n<h2>CSS<\/h2>\n<h3>Setup<\/h3>\n<p>Let's start by setting box-sizing to border-box because it will make it easier to work with paddings. Then we select a dark background color and make it, so the body is one hundred percent of the viewport height high. And we remove the margins of everything.<\/p>\n<pre><code class=\"language-CSS\">* {\n    box-sizing: border-box;\n    margin: 0;\n}\n\nbody {\n    background-color: RGB(42, 42, 42) !important;\n    height: 100vh\n}<\/code><\/pre>\n<p>After that, we make a class for the menu bar we defined earlier in the HTML. We set it to <code>display: flex<\/code> so the items are side by side, and we also make it stick to the top with <code>position: sticky<\/code> and <code>top: 0<\/code>. We also set the <code>z-index<\/code> to anything greater than one. We also style the buttons in the menubar in their usual and hovered states. This ensures that the menubar is in front of the code at all times.<\/p>\n<pre><code class=\"language-CSS\">.menubar {\n    background-color: RGB(54, 54, 54) !important;\n    padding-left: 1em;\n    display: flex;\n    align-items: center;\n    position: sticky;\n    top: 0;\n    z-index: 2;\n}\n\n.menubar button {\n    padding: 0.7em 0.7em;\n    background-color: transparent;\n    color: RGB(175, 175, 175);\n    border: none;\n}\n\n.menubar button:hover {\n    background-color: RGB(66, 66, 66);\n    cursor: pointer;\n}<\/code><\/pre>\n<h3>Editor<\/h3>\n<p>Now let us get to the Editor. We first set the container's display to the grid and two columns. One is <code>50px<\/code> in width, and the other fills the rest of the available space using <code>1fr<\/code>. The 50 Pixel column will hold the line numbers.<\/p>\n<pre><code class=\"language-CSS\">.editor-container {\n    display: grid;\n    grid-template-columns: 50px 1fr\n}\n\n.linenumbers {\n    color: rgb(109, 109, 109);\n    font-size: 1.3em;\n    font-family: monospace !important;\n    padding: 1em 0.1em;\n    text-align: right;\n}\n\n.linenumbers span {\n    width: 100% !important;\n}<\/code><\/pre>\n<p>In the .display area and the textarea, we set the height to 100% and the resize to none, so the textarea stays the same. Then, set the position to absolute, so the elements break out the flow. This will cause them to go to the top left of their container, essentially overlaying each other.<\/p>\n<pre><code class=\"language-CSS\">.display,\ntextarea {\n    padding: 1em;\n    font-size: 1.3em;\n    font-family: monospace !important;\n    height: 100%;\n    outline: none;\n    border: 0px solid black;\n    width: 100%;\n    resize: none;\n    position: absolute;\n    margin: 0;\n    background: transparent;\n    padding-left: 1em;\n    overflow-x: auto;\n}<\/code><\/pre>\n<p>Now we set the color of the text area to be transparent. But this will cause the caret to be invisible, so we have to set its color once again. For the display, we set a color and the <code>white-space<\/code> property to <code>pre-wrap<\/code> so the white spaces prevail.<\/p>\n<pre><code class=\"language-css\">textarea {\n    color: rgba(0, 0, 0, 0);\n    caret-color: aliceblue;\n}\n\n.display {\n    color: rgb(216, 216, 216);\n    white-space: pre-wrap;\n}<\/code><\/pre>\n<p>Last but not least, we set the height of the container to 100 percent the position to relative.<\/p>\n<pre><code class=\"language-CSS\">.editor {\n    height: 100%;\n    position: relative;\n    flex-grow: 1;\n}<\/code><\/pre>\n<h3>Highlights<\/h3>\n<p>Now for the syntax highlighting, we simply color elements that have the attributes we have provided.<\/p>\n<pre><code class=\"language-CSS\">[kw] {\n    color: RGB(234, 97, 97);\n}\n\n[num] {\n    color: #d8fff6;\n}\n\n[func] {\n    color: rgb(95, 211, 234);\n}\n\n[str],\n[str] * {\n    color: rgb(234, 162, 95) !important;\n}\n\n[com],\n[com] * {\n    color: rgb(95, 234, 165) !important;\n}<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p>Let's look at the app in action.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/07\/code.gif\" alt=\"enter image description here\" \/><\/p>\n<p>You find the Live Demo <a href=\"https:\/\/dummy-editor.maximmaeder.com\/\">here<\/a>.\nYou find the <a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2010%20-%20Highlighted%20Code%20Editor%20with%20vue.js%20and%20regex\">GitHub Repo<\/a> here.<\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a Dummy using Python code! See how you can add more features to this program, such as different languages.<\/p>\n<p><a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2010%20-%20Highlighted%20Code%20Editor%20with%20vue.js%20and%20regex\">GitHub<\/a><\/p>",
            "post_title": "Highlighted Dummy Code Editor with HTML CSS JavaScript (vue.js)",
            "post_excerpt": "Learn about HTML, CSS, JavaScript (vue.js), and Regular Expressions by creating a dummy code editor that looks like VS-Code",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "highlighted-dummy-code-editor-with-html-css-javascript-vue-js",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/highlighted-dummy-code-editor-with-html-css-javascript-vue-js\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Accordion with HTML, CSS (SASS) and JavaScript.",
        "description": "Learn how to make an Accordion with HTML, CSS (Sass), and a little bit of Javascript.",
        "slug": "accordion-with-html-css-sass-and-javascript",
        "raw_content": "## Idea\r\n\r\nThis Tutorial will make a reusable Accordion Component with HTML, CSS (Sass), and JavaScript. We will make it, so we only have to provide a minimal HTML structure with a few classes for the accordion to work. We'll handle most of it in JS and CSS.\r\n\r\nSo let us get right into coding.\r\n\r\n## HTML of the Accordion\r\n\r\nAs mentioned above, we make it so we can use the accordion anywhere. We need a div with the class `accordion`, with two child divs, one with the class `accordion-title` and one with the class `accordion-body`. The body is the part that will be collapsed. We can give it the collapsed Class by default, so it is collapsed by default.\r\n\r\n```HTML\r\n<div class=\"accordion\">\r\n    <div class=\"accordion-title\">Accordion Title<\/div>\r\n    <div class=\"accordion-body collapsed\">\r\n\t\tThe body of the accordion will be collapsed.        \r\n    <\/div>\r\n<\/div>\r\n```\r\n\r\nSo that's it for the HTML of the Accordion. You can use this anywhere in your code if you import the CSS and js correctly.\r\n\r\n\r\n## SASS \/ CSS of the Accordion\r\n\r\nNow let us get to the styling of the accordion. Remember that this won't work without JavaScript, but it will look nice. We do this with the preprocessor SASS, but we don't utilize many of the features offered. I can work better with CSS if I do it via SASS, but that's just me.\r\n\r\nSo we start by setting the font, margin, background color, and border for our `accordion` class.\r\n\r\n```sass\r\n.accordion\r\n    font-family: 'Segoe UI', sans-serif\r\n    margin-bottom: 1em\r\n    background-color: RGB(240, 240, 240)\r\n    border: 5px solid RGB(85, 214, 145)\r\n```\r\n\r\nThen we style the `accordion-title` by nesting it within the `accordion` class. We must set its `display` to `flex` and its `justify-content` to `space-between` and the `align-item` to `center`. Later we will insert an icon into the title, and we want that it is vertically centered on the text and at the end.\r\n\r\n```sass\r\n\t.accordion-title\r\n        padding: 1em\r\n        font-size: 1.3em\r\n        display: flex\r\n        justify-content: space-between\r\n        align-items: center\r\n```\r\n\r\nNow, if the user hovers over the title, we set different background colors and the cursor to the pointer, which is the hand. The `accordion-title-icon` will be inserted by js and is an SVG Path, so we can use fill to change its color.\r\n\r\n```sass\r\n        &:hover\r\n            background-color: RGB(230, 230, 230)\r\n            cursor: pointer\r\n\r\n        .accordion-title-icon\r\n            width: 30px\r\n            fill:  rgb(170, 170, 170)\r\n```\r\n\r\nLast but not least, we apply a bit of styling to the `accordion-body,` and we say that elements with the class `collapsed` have the `display: none`.\r\n\r\n```sass\r\n    .accordion-body\r\n        padding: 1em\r\n        border-top: 3px solid RGB(210, 210, 210)\r\n\r\n    .collapsed\r\n        display: none\r\n```\r\n\r\nThat's it for the CSS.\r\n\r\n## JavaScript of the Accordion\r\n\r\nNow let us get to the JavaScript of the accordion. We start by getting all the elements with the `accordion` class using the `querySelectorAll` function. The function will return an HTML collection, but we need an Array to loop over it, so we transform it with `Array.from(obj)`. Then we use the `forEach()` function to loop over it with a function called for each iteration. We save the current object in the `el` variable.\r\n\r\n```js\r\n\/* Loop through all elements with the accordion class *\/\r\nArray.from(document.querySelectorAll('.accordion')).forEach(el => {\r\n\t...\r\n})\r\n```\r\n\r\nIn the loop, we get the accordion title and accordion body divs by using the `querySelector` method on the object we currently have. Now the `querySelector` function returns the first item that matches the selector.\r\n\r\n```js\r\n    \/* Save important Element References *\/\r\n    let accordionTitle = el.querySelector('.accordion-title');\r\n    let accordionBody = el.querySelector('.accordion-body');\r\n```\r\n\r\nThen we replace the inner HTML of the accordion title with some more complex HTML, but we get the previous inner HTML and reinsert it but we also insert an SVG path that is a simple arrow down.\r\n\r\n```js\r\n    \/* Reinsert the Title with an Icon *\/\r\n    accordionTitle.innerHTML = `\r\n    <div>`+accordionTitle.innerHTML+`<\/div>\r\n    <svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 448 512\" class=\"accordion-title-icon\">\r\n        <path d=\"M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z\"\/>\r\n    <\/svg>\r\n    `\r\n```\r\n\r\nNow we also get the accordion title icon that we just inserted.\r\n\r\n```js\r\n    let accordionTitleIcon = el.querySelector('.accordion-title-icon');\r\n```\r\n\r\nAfter that, we define a function that toggles the `collapsed` Class for the body, and we rotate the icon dependent on the state of the body. We do this with a ternary operator.\r\n\r\n```js\r\n    \/* Call this function when clicking on the title *\/\r\n    let toggle = function() {\r\n\r\n        \/* Use el.classList.toggle(name) to toggle the class in the Element *\/\r\n        accordionBody.classList.toggle('collapsed')\r\n\r\n        \/* Set the Icon Rotation depending on whether the collapsed Class has been set. *\/\r\n        accordionTitleIcon.style.transform = accordionBody.classList.contains('collapsed') ? 'rotate(0deg)' : 'rotate(180deg)'\r\n    }\r\n```\r\n\r\nThen we connect the click event on the accordion title with the function we just made.\r\n\r\n```js\r\n    \/* Connect onclick event of title to our function (just the refernce to it) *\/\r\n    accordionTitle.addEventListener('click', toggle);\r\n```\r\n\r\nLast but not least, we call the toggle function two times, so the icon looks in the correct direction.\r\n\r\n```js\r\n    \/* Call the function two times, so the arrow looks in the right direction *\/\r\n    toggle();\r\n    toggle();\r\n```\r\n\r\n## Showcase\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/accordion.gif)\r\n\r\n[GitHub Repository](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2011%20-%20Accordion%20with%20HTML,%20CSS%20%28SASS%29%20and%20JavaScript)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created an Accordion! See how you can add more features to this program, such as grouping them and only allowing one to be open simultaneously.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!\r\n\r\n## Full Code\r\n\r\n\r\nSASS\r\n\r\n```sass\r\n.accordion\r\n    font-family: 'Segoe UI', sans-serif\r\n    margin-bottom: 1em\r\n    background-color: rgb(240, 240, 240)\r\n    border: 5px solid rgb(85, 214, 145)\r\n\r\n    .accordion-title\r\n        padding: 1em\r\n        font-size: 1.3em\r\n        display: flex\r\n        justify-content: space-between\r\n        align-items: center\r\n\r\n        &:hover\r\n            background-color: rgb(230, 230, 230)\r\n            cursor: pointer\r\n\r\n        .accordion-title-icon\r\n            width: 30px\r\n            fill:  rgb(170, 170, 170)\r\n\r\n    .accordion-body\r\n        padding: 1em\r\n        border-top: 3px solid rgb(210, 210, 210)\r\n\r\n    .collapsed\r\n        display: none\r\n```\r\n\r\nCompiled CSS\r\n\r\n```css\r\n.accordion {\r\n  font-family: \"Segoe UI\", sans-serif;\r\n  margin-bottom: 1em;\r\n  background-color: rgb(240, 240, 240);\r\n  border: 5px solid rgb(85, 214, 145);\r\n}\r\n.accordion .accordion-title {\r\n  padding: 1em;\r\n  font-size: 1.3em;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.accordion .accordion-title:hover {\r\n  background-color: rgb(230, 230, 230);\r\n  cursor: pointer;\r\n}\r\n.accordion .accordion-title .accordion-title-icon {\r\n  width: 30px;\r\n  fill: rgb(170, 170, 170);\r\n}\r\n.accordion .accordion-body {\r\n  padding: 1em;\r\n  border-top: 3px solid rgb(210, 210, 210);\r\n}\r\n.accordion .collapsed {\r\n  display: none;\r\n}\r\n```\r\n\r\nJS\r\n\r\n```js\r\n\/* Loop through all elements with the accordion class *\/\r\nArray.from(document.querySelectorAll('.accordion')).forEach(el => {\r\n\r\n    \/* Save important Element References *\/\r\n    let accordionTitle = el.querySelector('.accordion-title');\r\n    let accordionBody = el.querySelector('.accordion-body');\r\n\r\n\r\n    \/* Reinsert the Title with an Icon *\/\r\n    accordionTitle.innerHTML = `\r\n    <div>`+accordionTitle.innerHTML+`<\/div>\r\n    <svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 448 512\" class=\"accordion-title-icon\">\r\n        <path d=\"M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z\"\/>\r\n    <\/svg>\r\n    `\r\n\r\n    let accordionTitleIcon = el.querySelector('.accordion-title-icon');\r\n    \r\n    \/* Call this function when clicking on the title *\/\r\n    let toggle = function() {\r\n\r\n        \/* Use el.classList.toggle(name) to toggle the class in the Element *\/\r\n        accordionBody.classList.toggle('collapsed')\r\n\r\n        \/* Set the Rotation of the Icon depending on wether the collapsed Class has been set. *\/\r\n        accordionTitleIcon.style.transform = accordionBody.classList.contains('collapsed') ? 'rotate(0deg)' : 'rotate(180deg)'\r\n    }\r\n\r\n    \/* Connect onclick event of title to our function (just the refernce to it) *\/\r\n    accordionTitle.addEventListener('click', toggle);\r\n    \r\n    \/* Call the function two times so the arrow looks in the right direction *\/\r\n    toggle();\r\n    toggle();\r\n})\r\n```\r\n\r\nl, CSS (Sass) and a little bit of Javascript.**\r\n\r\n## Idea\r\n\r\nIn this Tutorial we are going to make a resuable Accordion Component with HTML, CSS (sass) and JavaScript. We will make it so we only have to provide a minimal HTML structure with a few classes for the accordion to work, well handle most of it in JS and CSS.\r\n\r\nSo lets get right into coding.\r\n\r\n## HTML of the Accordion\r\n\r\n## CSS of the Accordion\r\n\r\n## JavaScript of the Accordion\r\n\r\n## Showcase\r\n\r\n[GitHub Repository](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2011%20-%20Accordion%20with%20HTML,%20CSS%20%28SASS%29%20and%20JavaScript)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created an Accordion! See how you can add more features to this program such as grouping them and only allowing one to be open at a time.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these Problems is not the best or that I use functions or features that arent advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "011 - Accordion with HTML, CSS (SASS) and JavaScript\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 660,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>This Tutorial will make a reusable Accordion Component with HTML, CSS (Sass), and JavaScript. We will make it, so we only have to provide a minimal HTML structure with a few classes for the accordion to work. We'll handle most of it in JS and CSS.<\/p>\n<p>So let us get right into coding.<\/p>\n<h2>HTML of the Accordion<\/h2>\n<p>As mentioned above, we make it so we can use the accordion anywhere. We need a div with the class <code>accordion<\/code>, with two child divs, one with the class <code>accordion-title<\/code> and one with the class <code>accordion-body<\/code>. The body is the part that will be collapsed. We can give it the collapsed Class by default, so it is collapsed by default.<\/p>\n<pre><code class=\"language-HTML\">&lt;div class=\"accordion\"&gt;\n    &lt;div class=\"accordion-title\"&gt;Accordion Title&lt;\/div&gt;\n    &lt;div class=\"accordion-body collapsed\"&gt;\n        The body of the accordion will be collapsed.        \n    &lt;\/div&gt;\n&lt;\/div&gt;<\/code><\/pre>\n<p>So that's it for the HTML of the Accordion. You can use this anywhere in your code if you import the CSS and js correctly.<\/p>\n<h2>SASS \/ CSS of the Accordion<\/h2>\n<p>Now let us get to the styling of the accordion. Remember that this won't work without JavaScript, but it will look nice. We do this with the preprocessor SASS, but we don't utilize many of the features offered. I can work better with CSS if I do it via SASS, but that's just me.<\/p>\n<p>So we start by setting the font, margin, background color, and border for our <code>accordion<\/code> class.<\/p>\n<pre><code class=\"language-sass\">.accordion\n    font-family: 'Segoe UI', sans-serif\n    margin-bottom: 1em\n    background-color: RGB(240, 240, 240)\n    border: 5px solid RGB(85, 214, 145)<\/code><\/pre>\n<p>Then we style the <code>accordion-title<\/code> by nesting it within the <code>accordion<\/code> class. We must set its <code>display<\/code> to <code>flex<\/code> and its <code>justify-content<\/code> to <code>space-between<\/code> and the <code>align-item<\/code> to <code>center<\/code>. Later we will insert an icon into the title, and we want that it is vertically centered on the text and at the end.<\/p>\n<pre><code class=\"language-sass\">    .accordion-title\n        padding: 1em\n        font-size: 1.3em\n        display: flex\n        justify-content: space-between\n        align-items: center<\/code><\/pre>\n<p>Now, if the user hovers over the title, we set different background colors and the cursor to the pointer, which is the hand. The <code>accordion-title-icon<\/code> will be inserted by js and is an SVG Path, so we can use fill to change its color.<\/p>\n<pre><code class=\"language-sass\">        &amp;:hover\n            background-color: RGB(230, 230, 230)\n            cursor: pointer\n\n        .accordion-title-icon\n            width: 30px\n            fill:  rgb(170, 170, 170)<\/code><\/pre>\n<p>Last but not least, we apply a bit of styling to the <code>accordion-body,<\/code> and we say that elements with the class <code>collapsed<\/code> have the <code>display: none<\/code>.<\/p>\n<pre><code class=\"language-sass\">    .accordion-body\n        padding: 1em\n        border-top: 3px solid RGB(210, 210, 210)\n\n    .collapsed\n        display: none<\/code><\/pre>\n<p>That's it for the CSS.<\/p>\n<h2>JavaScript of the Accordion<\/h2>\n<p>Now let us get to the JavaScript of the accordion. We start by getting all the elements with the <code>accordion<\/code> class using the <code>querySelectorAll<\/code> function. The function will return an HTML collection, but we need an Array to loop over it, so we transform it with <code>Array.from(obj)<\/code>. Then we use the <code>forEach()<\/code> function to loop over it with a function called for each iteration. We save the current object in the <code>el<\/code> variable.<\/p>\n<pre><code class=\"language-js\">\/* Loop through all elements with the accordion class *\/\nArray.from(document.querySelectorAll('.accordion')).forEach(el =&gt; {\n    ...\n})<\/code><\/pre>\n<p>In the loop, we get the accordion title and accordion body divs by using the <code>querySelector<\/code> method on the object we currently have. Now the <code>querySelector<\/code> function returns the first item that matches the selector.<\/p>\n<pre><code class=\"language-js\">    \/* Save important Element References *\/\n    let accordionTitle = el.querySelector('.accordion-title');\n    let accordionBody = el.querySelector('.accordion-body');<\/code><\/pre>\n<p>Then we replace the inner HTML of the accordion title with some more complex HTML, but we get the previous inner HTML and reinsert it but we also insert an SVG path that is a simple arrow down.<\/p>\n<pre><code class=\"language-js\">    \/* Reinsert the Title with an Icon *\/\n    accordionTitle.innerHTML = `\n    &lt;div&gt;`+accordionTitle.innerHTML+`&lt;\/div&gt;\n    &lt;svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 448 512\" class=\"accordion-title-icon\"&gt;\n        &lt;path d=\"M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z\"\/&gt;\n    &lt;\/svg&gt;\n    `<\/code><\/pre>\n<p>Now we also get the accordion title icon that we just inserted.<\/p>\n<pre><code class=\"language-js\">    let accordionTitleIcon = el.querySelector('.accordion-title-icon');<\/code><\/pre>\n<p>After that, we define a function that toggles the <code>collapsed<\/code> Class for the body, and we rotate the icon dependent on the state of the body. We do this with a ternary operator.<\/p>\n<pre><code class=\"language-js\">    \/* Call this function when clicking on the title *\/\n    let toggle = function() {\n\n        \/* Use el.classList.toggle(name) to toggle the class in the Element *\/\n        accordionBody.classList.toggle('collapsed')\n\n        \/* Set the Icon Rotation depending on whether the collapsed Class has been set. *\/\n        accordionTitleIcon.style.transform = accordionBody.classList.contains('collapsed') ? 'rotate(0deg)' : 'rotate(180deg)'\n    }<\/code><\/pre>\n<p>Then we connect the click event on the accordion title with the function we just made.<\/p>\n<pre><code class=\"language-js\">    \/* Connect onclick event of title to our function (just the refernce to it) *\/\n    accordionTitle.addEventListener('click', toggle);<\/code><\/pre>\n<p>Last but not least, we call the toggle function two times, so the icon looks in the correct direction.<\/p>\n<pre><code class=\"language-js\">    \/* Call the function two times, so the arrow looks in the right direction *\/\n    toggle();\n    toggle();<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/accordion.gif\" alt=\"enter image description here\" \/><\/p>\n<p><a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2011%20-%20Accordion%20with%20HTML,%20CSS%20%28SASS%29%20and%20JavaScript\">GitHub Repository<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created an Accordion! See how you can add more features to this program, such as grouping them and only allowing one to be open simultaneously.<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!<\/p>\n<h2>Full Code<\/h2>\n<p>SASS<\/p>\n<pre><code class=\"language-sass\">.accordion\n    font-family: 'Segoe UI', sans-serif\n    margin-bottom: 1em\n    background-color: rgb(240, 240, 240)\n    border: 5px solid rgb(85, 214, 145)\n\n    .accordion-title\n        padding: 1em\n        font-size: 1.3em\n        display: flex\n        justify-content: space-between\n        align-items: center\n\n        &amp;:hover\n            background-color: rgb(230, 230, 230)\n            cursor: pointer\n\n        .accordion-title-icon\n            width: 30px\n            fill:  rgb(170, 170, 170)\n\n    .accordion-body\n        padding: 1em\n        border-top: 3px solid rgb(210, 210, 210)\n\n    .collapsed\n        display: none<\/code><\/pre>\n<p>Compiled CSS<\/p>\n<pre><code class=\"language-css\">.accordion {\n  font-family: \"Segoe UI\", sans-serif;\n  margin-bottom: 1em;\n  background-color: rgb(240, 240, 240);\n  border: 5px solid rgb(85, 214, 145);\n}\n.accordion .accordion-title {\n  padding: 1em;\n  font-size: 1.3em;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.accordion .accordion-title:hover {\n  background-color: rgb(230, 230, 230);\n  cursor: pointer;\n}\n.accordion .accordion-title .accordion-title-icon {\n  width: 30px;\n  fill: rgb(170, 170, 170);\n}\n.accordion .accordion-body {\n  padding: 1em;\n  border-top: 3px solid rgb(210, 210, 210);\n}\n.accordion .collapsed {\n  display: none;\n}<\/code><\/pre>\n<p>JS<\/p>\n<pre><code class=\"language-js\">\/* Loop through all elements with the accordion class *\/\nArray.from(document.querySelectorAll('.accordion')).forEach(el =&gt; {\n\n    \/* Save important Element References *\/\n    let accordionTitle = el.querySelector('.accordion-title');\n    let accordionBody = el.querySelector('.accordion-body');\n\n    \/* Reinsert the Title with an Icon *\/\n    accordionTitle.innerHTML = `\n    &lt;div&gt;`+accordionTitle.innerHTML+`&lt;\/div&gt;\n    &lt;svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 448 512\" class=\"accordion-title-icon\"&gt;\n        &lt;path d=\"M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z\"\/&gt;\n    &lt;\/svg&gt;\n    `\n\n    let accordionTitleIcon = el.querySelector('.accordion-title-icon');\n\n    \/* Call this function when clicking on the title *\/\n    let toggle = function() {\n\n        \/* Use el.classList.toggle(name) to toggle the class in the Element *\/\n        accordionBody.classList.toggle('collapsed')\n\n        \/* Set the Rotation of the Icon depending on wether the collapsed Class has been set. *\/\n        accordionTitleIcon.style.transform = accordionBody.classList.contains('collapsed') ? 'rotate(0deg)' : 'rotate(180deg)'\n    }\n\n    \/* Connect onclick event of title to our function (just the refernce to it) *\/\n    accordionTitle.addEventListener('click', toggle);\n\n    \/* Call the function two times so the arrow looks in the right direction *\/\n    toggle();\n    toggle();\n})<\/code><\/pre>\n<p>l, CSS (Sass) and a little bit of Javascript.**<\/p>\n<h2>Idea<\/h2>\n<p>In this Tutorial we are going to make a resuable Accordion Component with HTML, CSS (sass) and JavaScript. We will make it so we only have to provide a minimal HTML structure with a few classes for the accordion to work, well handle most of it in JS and CSS.<\/p>\n<p>So lets get right into coding.<\/p>\n<h2>HTML of the Accordion<\/h2>\n<h2>CSS of the Accordion<\/h2>\n<h2>JavaScript of the Accordion<\/h2>\n<h2>Showcase<\/h2>\n<p><a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2011%20-%20Accordion%20with%20HTML,%20CSS%20%28SASS%29%20and%20JavaScript\">GitHub Repository<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created an Accordion! See how you can add more features to this program such as grouping them and only allowing one to be open at a time.<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these Problems is not the best or that I use functions or features that arent advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Accordion with HTML, CSS (SASS) and JavaScript.",
            "post_excerpt": "Learn how to make an Accordion with HTML, CSS (Sass), and a little bit of Javascript.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "accordion-with-html-css-sass-and-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/accordion-with-html-css-sass-and-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Weather App with HTML, SASS, and JavaScript",
        "description": "Learn how to make a Simple App showing Temperatures for the next seven days. We learn about SVG and API fetching.",
        "slug": "weather-app-with-html-sass-and-javascript",
        "raw_content": "Before we get into it, I want to stress that I am no JavaScript Pro; therefore, it may be that my practices are not the best or even the worst. Feel free to contact me in any way and tell me better ways to do things!\r\n\r\n## Idea\r\n\r\nToday we will make a little Website that shows us the hourly temperatures in the next seven days for a certain choosable city. We will make the graph ourselves using the power of SVG. We get the data from the [Open Meteo API](https:\/\/open-meteo.com) ([Licence](https:\/\/creativecommons.org\/licenses\/by-nc\/4.0\/)). Before we get into coding, we look at how SVG will help us and what kind of data the API returns.\r\n\r\n[Live Demo](%5BWeather%20App%20%28maximmaeder.com%29%5D%28http:\/\/weather-app.maximmaeder.com\/)\r\n\r\n### SVG\r\n\r\nScalable Vector Graphics are fantastic. They look good in all sizes and can easily be made programmatically because they are HTML tags. Below you see a simple SVG tag that will show a polygon. We will use this tag for our graph and `line` and `text`. In the program, we add the points.\r\n\r\n```SVG\r\n<svg height=\"210\"  width=\"500\">  \r\n\t<polygon points=\"200,10 250,190 160,210\"\/>  \r\n<\/svg>\r\n```\r\n\r\n### API\r\n\r\nWe will request the hourly temperatures in the next seven days from the weather temperatures. We request an URL that looks something like this. The coordinates will be inserted.\r\n\r\n```\r\nhttps:\/\/api.open-meteo.com\/v1\/forecast?latitude=30.0&longitude=30.0&hourly=temperature_2m\r\n```\r\n\r\nSuch a request will return a JSON string with the information we need.\r\n\r\n```json\r\n{\r\n    \"latitude\": 30.0,\r\n    \"longitude\": 30.0,\r\n    \"generationtime_ms\": 1.3890266418457031,\r\n    \"utc_offset_seconds\": 0,\r\n    \"elevation\": 137.0,\r\n    \"hourly_units\": {\r\n        \"time\": \"iso8601\",\r\n        \"temperature_2m\": \"\u00b0C\"\r\n    },\r\n    \"hourly\": {\r\n        \"time\": [\r\n            \"2022-08-03T00:00\",\r\n            \"2022-08-03T01:00\",\r\n            \"2022-08-03T02:00\",\r\n            ...\r\n        ],\r\n        \"temperature_2m\": [\r\n            24.7,\r\n            24.3,\r\n            23.9,\r\n            ...\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nLet's get into coding!\r\n\r\n## HTML\r\n\r\nLet us start with the HTML of our website. As always, we use the default scaffolding that can be expanded in VS-code with the [emmet abbreviation](https:\/\/code.visualstudio.com\/docs\/editor\/emmet) `!`.\r\n\r\nIn the head, we import our stylesheet.\r\n\r\n```css\r\n<link  rel=\"stylesheet\"  href=\"style.css\">\r\n```\r\n\r\nIn our body, we have two `div` elements and the script tag for the js of the website. The first div holds the header and the `select` element for the choosable cities, and the other contains the SVG and the link to the API.\r\n\r\n```html\r\n<div class=\"header-container\">\r\n     <div class=\"header\">\r\n         ...\r\n     <\/div>\r\n <\/div>\r\n\r\n <div class=\"container graph-container\">\r\n     <svg height=\"400\" id=\"graph-svg\">\r\n\t\t...\r\n     <\/svg>\r\n\r\n     <div>\r\n         <a href=\"https:\/\/open-meteo.com\" target=\"_blank\">Weather Data Provided By Open-Meteo<\/a>\r\n     <\/div>\r\n <\/div>\r\n\r\n <script src=\"app.js\"><\/script>\r\n```\r\n\r\nInside the header, we set an `h1` and a `select` element. Each option represents a location; therefore, we give each of them a custom `data-lon` and `data-lat` attribute, which are the coordinates of the given area. We later access these attributes in the JS code.\r\n\r\n```html\r\n\t<h1>Weather App<\/h1>\r\n\r\n    <div>\r\n        <span>Choose Location: <\/span>\r\n        <select name=\"\" class=\"countrySelect\">\r\n            <option value=\"Berlin\" selected data-lat=\"52.5235\" data-lon=\"13.4115\">Berlin<\/option>\r\n            <option value=\"Paris\" data-lat=\"48.8567\" data-lon=\"2.3510\">Paris<\/option>\r\n            <option value=\"London\" data-lat=\"51.5002\" data-lon=\"-0.1262\">London<\/option>\r\n            <option value=\"Madrid\" data-lat=\"40.4167\" data-lon=\"-3.7033\">Madrid<\/option>\r\n\t\t\t...\r\n        <\/select>\r\n     <\/div>\r\n```\r\n\r\nInside the `svg` element, we first make a gradient texture that can be later used in visible SVG elements. Then we add two SVG groups with the element `g`. The first one holds all the labels and the second one the graph itself. We will insert the other SVG that's through the JS code.\r\n\r\n```html\r\n<defs>\r\n  <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n      <stop offset=\"0%\" style=\"stop-color:#5591c2  ;stop-opacity:1\" \/>\r\n      <stop offset=\"50%\" style=\"stop-color:#5591c2  ;stop-opacity:0.5\" \/>\r\n      <stop offset=\"100%\" style=\"stop-color:rgba(44, 44, 44, 0);stop-opacity:0\" \/>\r\n  <\/linearGradient>\r\n<\/defs>\r\n\r\n<g class=\"lables\"><\/g>\r\n<g class=\"data\"><\/g>\r\n```\r\n\r\nNow we add the functionalities with JavaScript!\r\n\r\n## JavaScript\r\n\r\nLet's get to the JS of the Program. We must remember that we must redraw the graph every time the window resizes or when the user changes the location.\r\n\r\n### Setup\r\n\r\nLet's setup up some variables. The first one `currentData` acts just as a cache, so we don't have to get the data each time the window resizes. The following three constants are used for the styling of the graph and the labels. We need to add a little padding to the left inside the SVG element because our temperature scale will be there. We also exaggerate the temperatures, so they have a more apparent difference. And we also define how far apart each step on the temperature scale is.\r\n\r\n```js\r\nlet currentData = {}\r\n\r\nconst paddingLeftGraph = 60\r\nconst height_exxagaration = 7\r\nconst LabelStepsY = 5\r\n```\r\n\r\nAfter that, we save some of the needed elements in variables. For this we use `querySelector` and `getElementById`. continuing, we get the dimensions of the SVG element minus the padding; this is important so the graph will span the full width of the container. Last but not least, we define a step multiplier. This value will be used in tandem with the width. \r\n\r\nThe API will always return `168` Datapoints, but it may be that the SVG is 500 Pixels wide, and we want each of the Datapoints evenly spread out in these 500 Pixels. These last three variables will always be overwritten when the window size changes.\r\n\r\n```js\r\nconst dataContainer = document.querySelector('.data')\r\nconst lableContainer = document.querySelector('.lables')\r\nconst citySelect = document.querySelector('.countrySelect')\r\nconst svgElement = document.getElementById('graph-svg')\r\n\r\nlet container_width = svgElement.getBoundingClientRect().width - paddingLeftGraph\r\nlet container_height = svgElement.getBoundingClientRect().height\r\nlet step_multiplier = container_width \/ 168\r\n```\r\n\r\n### Functions\r\n\r\nLet us go over the function used on our website.\r\n\r\nThe first one is pretty simple. It will just fetch a provided URL and return the parsed json.\r\n\r\n```js\r\nasync function request(url) {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n```\r\n\r\nThe next one is also simple as it will just set the new width and step multiplier and redraw the data and labels as soon as the window size changes.\r\n\r\n```js\r\nfunction setSize() {\r\n    let size = svgElement.getBoundingClientRect()\r\n    \r\n    container_width = size.width - paddingLeftGraph\r\n    step_multiplier = container_width \/ 168\r\n    \r\n    DrawData()\r\n    drawLables()\r\n}\r\n```\r\n\r\nThe `getWeekDay` function will return the name of the weekday from a given date.\r\n\r\n```js\r\nfunction getWeekDay(date) {\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    return days[date.getDay()];\r\n}\r\n```\r\n\r\nThe `changeLocation` function will first get the option element where the value is the same as the select itself. This returned element has the `data-lon` and `data-lat` attributes which we will get from it using `getAttribute()`. After that we build the request string where insert these coordinates and we call the `request()` function. As soon as the request is finished we set the `currentData` variable to the returned data and we redraw the graph with `DrawData()`\r\n\r\n```js\r\nfunction changeLocation() {    \r\n\r\n    let currentCityEl = citySelect.querySelector(`[value=\"${citySelect.value}\"]`)\r\n    \r\n    let lat = currentCityEl.getAttribute('data-lat')\r\n    let lon = currentCityEl.getAttribute('data-lon')\r\n\r\n    let requestString = `https:\/\/api.open-meteo.com\/v1\/forecast?latitude=${lat}&longitude=${lon}&hourly=temperature_2m`\r\n    \r\n    request(requestString).then((data) => {\r\n        currentData = data\r\n        DrawData(currentData)\r\n    })\r\n\r\n}\r\n```\r\n\r\nNow let us get to the `DrawData()` function. We start by making a string in which we build a `polygon` element. The thing about SVG polygons is that they always have to be closed, that is why we insert the positions of the start and end. We also add a placeholder `INSERT_POINTS` which will later be replaced with the points of the temperatures. When making the start and end point we take the padding into account.\r\n\r\nThen we define three variables one will hold the concatenated string of all the points and the other hold the hourly temperatures we got from the request. The last one will be the x index position.\r\n\r\nThen we loop over the hourly temperatures and we add the temperature and index to the points. We have to keep in mind the step multiplier and that the coordinates in a polygon start at the top left of the SVG element. Last but not least we insert the points string we just made into the string we made in the first place and we set it to be the inner HTML of the `dataContainer` which is a group in our SVG.\r\n\r\n```js\r\nfunction DrawData() {\r\n    let poly = `<polygon fill=\"url(#gradient)\" points=\"${paddingLeftGraph},${container_height} INSERT_POINTS ${container_width + paddingLeftGraph},${container_height}\"><\/polygon>`\r\n    let positions = ''\r\n\r\n    const temps = currentData.hourly.temperature_2m\r\n\r\n    let index = 0\r\n    temps.forEach(temperature => {\r\n        positions = positions + ` ${index * step_multiplier + paddingLeftGraph},${container_height - temperature * height_exxagaration}`\r\n\r\n        index++\r\n    })\r\n\r\n    poly = poly.replace('INSERT_POINTS', positions)\r\n\r\n    dataContainer.innerHTML = poly\r\n}\r\n```\r\n\r\nLet's all so go over the `drawLables` function. We do it pretty similar here, we build a string of `text` and `line` elements and we set them to be the inner HTML of the `lableContainer`. We make a loop where we count by our `LabelStepsY` variable. We do this for the X and Y axis. For the horizontal axis, we insert the weekdays but we set today and tomorrow.\r\n\r\n```js\r\nfunction drawLables() {\r\n\r\n    let verticalLinesString = ''\r\n    for (let index = 0; index < 50; index += LabelStepsY) {\r\n        let height = container_height - index * height_exxagaration\r\n        verticalLinesString = verticalLinesString + `<line x1=\"0\" y1=\"${height}\" x2=\"1000\" y2=\"${height}\" class=\"line\" \/><text x=\"0\" y=\"${height}\">${index} \u00b0C<\/text>`\r\n    }\r\n\r\n    let dayIndex = 0\r\n    for (let index = 0; index < 169; index += 24) {\r\n\r\n        let daytext\r\n        if (dayIndex == 0) {\r\n            daytext = 'Today'\r\n        }\r\n        else if (dayIndex == 1) {\r\n            daytext = 'Tomorrow'\r\n        }\r\n        else {\r\n            var date = new Date();\r\n            date.setDate(date.getDate() + dayIndex);\r\n\r\n            daytext = getWeekDay(date)\r\n        }\r\n\r\n        let width = index * step_multiplier + paddingLeftGraph\r\n        verticalLinesString = verticalLinesString + `<line x1=\"${width}\" y1=\"50\" x2=\"${width}\" y2=\"1000\" class=\"line\"\/><text x=\"${width}\" y=\"${container_height - 5}\">${daytext}<\/text>`\r\n\r\n        dayIndex++\r\n    }\r\n\r\n    lableContainer.innerHTML = verticalLinesString\r\n}\r\n```\r\n\r\n### Connecting Events\r\n\r\nAfter making the functions we connect the change event from the selection to the `changeLocation` function and the resize event from the document to `setSize`. Last but not least we call `changeLocation` and `drawLables` so the graph is drawn for the firs time after the page loads.\r\n\r\n```js\r\ncitySelect.addEventListener('change', changeLocation)\r\nwindow.addEventListener('resize', setSize, false);\r\n\r\nchangeLocation()\r\ndrawLables()\r\n```\r\n\r\n## CSS \/ SASS\r\n\r\nOur Web App will now work but it won't look good, so let's add some styling to it!\r\n\r\nIn the sass file, we first add four variables that hold the color palette and we define a `mixin` which is a reusable component that we can later include anywhere with `@include container`.\r\n\r\n```sass\r\n$color: #3e6b8f    \r\n$bg: rgb(65, 65, 65)\r\n$lines: rgb(90, 90, 90)\r\n$text: #f3f3f3\r\n\r\n@mixin container()\r\n    max-width: 900px\r\n    margin: 0 auto\r\n    padding: 1em\r\n```\r\n\r\nAfter that, we style the body by setting the font and color. We also make a class `container` that solely consists of the mixin.\r\n\r\n```sass\r\nbody\r\n    box-sizing: border-box\r\n    font-family: 'Segoe UI', sans-serif\r\n    margin: 0\r\n    background-color: $bg\r\n    color: $text\r\n\r\n\r\n.container\r\n    @include container\r\n```\r\n\r\nThen we make the header, where we also use the mixin\r\n\r\n```sass\r\n.header-container\r\n\r\n    background-color: $color\r\n    border-bottom: 6px solid darken($color, 5)\r\n\r\n    .header\r\n        @include container\r\n        padding: 1em\r\n        display: flex\r\n        justify-content: space-between\r\n        align-items: center\r\n\r\n    h1\r\n        margin: 0\r\n```\r\n\r\ncontinuing we style the SVG to be full width and we set the outline color of the lines with the `stroke` property and the color of the text with `fill`. Last but not least we style the link and we use the lighten function that will as its name suggests lighten the color by the amount given as a second argument.\r\n\r\n```sass\r\n.graph-container\r\n    margin-top: 1em\r\n\r\n    svg\r\n        width: 100%\r\n\r\n        .line\r\n            stroke: $lines\r\n\r\n        text\r\n            fill: $text\r\n\r\na\r\n    color: lighten($color, 20)\r\n    text-decoration: none\r\n    padding: 0.5em\r\n    display: block\r\n    text-align: center\r\n```\r\n\r\n## Showcase\r\n\r\nBelow you see the Website in action.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/weatherheihg.gif)\r\n\r\n[Weather App (maximmaeder.com)](http:\/\/weather-app.maximmaeder.com\/)\r\n[GitHub](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2012%20-%20Weather%20App%20with%20HTML%2C%20SASS%20and%20JavaScript)\r\n\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Weather using Web Technologies! See how you can add more features to this program, such as rain prediction or custom locations.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!\r\n\r\n## Attribution\r\n[Open Meteo](https:\/\/open-meteo.com)\r\n[Licence](https:\/\/creativecommons.org\/licenses\/by-nc\/4.0\/)",
        "featured_image": "012 - Weather App with HTML, SASS and JavaScript\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 662,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<p>Before we get into it, I want to stress that I am no JavaScript Pro; therefore, it may be that my practices are not the best or even the worst. Feel free to contact me in any way and tell me better ways to do things!<\/p>\n<h2>Idea<\/h2>\n<p>Today we will make a little Website that shows us the hourly temperatures in the next seven days for a certain choosable city. We will make the graph ourselves using the power of SVG. We get the data from the <a href=\"https:\/\/open-meteo.com\">Open Meteo API<\/a> (<a href=\"https:\/\/creativecommons.org\/licenses\/by-nc\/4.0\/\">Licence<\/a>). Before we get into coding, we look at how SVG will help us and what kind of data the API returns.<\/p>\n<p><a href=\"\/\/weather-app.maximmaeder.com\/\">Live Demo<\/a><\/p>\n<h3>SVG<\/h3>\n<p>Scalable Vector Graphics are fantastic. They look good in all sizes and can easily be made programmatically because they are HTML tags. Below you see a simple SVG tag that will show a polygon. We will use this tag for our graph and <code>line<\/code> and <code>text<\/code>. In the program, we add the points.<\/p>\n<pre><code class=\"language-SVG\">&lt;svg height=\"210\"  width=\"500\"&gt;  \n    &lt;polygon points=\"200,10 250,190 160,210\"\/&gt;  \n&lt;\/svg&gt;<\/code><\/pre>\n<h3>API<\/h3>\n<p>We will request the hourly temperatures in the next seven days from the weather temperatures. We request an URL that looks something like this. The coordinates will be inserted.<\/p>\n<pre><code>https:\/\/api.open-meteo.com\/v1\/forecast?latitude=30.0&amp;longitude=30.0&amp;hourly=temperature_2m<\/code><\/pre>\n<p>Such a request will return a JSON string with the information we need.<\/p>\n<pre><code class=\"language-json\">{\n    \"latitude\": 30.0,\n    \"longitude\": 30.0,\n    \"generationtime_ms\": 1.3890266418457031,\n    \"utc_offset_seconds\": 0,\n    \"elevation\": 137.0,\n    \"hourly_units\": {\n        \"time\": \"iso8601\",\n        \"temperature_2m\": \"\u00b0C\"\n    },\n    \"hourly\": {\n        \"time\": [\n            \"2022-08-03T00:00\",\n            \"2022-08-03T01:00\",\n            \"2022-08-03T02:00\",\n            ...\n        ],\n        \"temperature_2m\": [\n            24.7,\n            24.3,\n            23.9,\n            ...\n        ]\n    }\n}<\/code><\/pre>\n<p>Let's get into coding!<\/p>\n<h2>HTML<\/h2>\n<p>Let us start with the HTML of our website. As always, we use the default scaffolding that can be expanded in VS-code with the <a href=\"https:\/\/code.visualstudio.com\/docs\/editor\/emmet\">emmet abbreviation<\/a> <code>!<\/code>.<\/p>\n<p>In the head, we import our stylesheet.<\/p>\n<pre><code class=\"language-css\">&lt;link  rel=\"stylesheet\"  href=\"style.css\"&gt;<\/code><\/pre>\n<p>In our body, we have two <code>div<\/code> elements and the script tag for the js of the website. The first div holds the header and the <code>select<\/code> element for the choosable cities, and the other contains the SVG and the link to the API.<\/p>\n<pre><code class=\"language-html\">&lt;div class=\"header-container\"&gt;\n     &lt;div class=\"header\"&gt;\n         ...\n     &lt;\/div&gt;\n &lt;\/div&gt;\n\n &lt;div class=\"container graph-container\"&gt;\n     &lt;svg height=\"400\" id=\"graph-svg\"&gt;\n        ...\n     &lt;\/svg&gt;\n\n     &lt;div&gt;\n         &lt;a href=\"https:\/\/open-meteo.com\" target=\"_blank\"&gt;Weather Data Provided By Open-Meteo&lt;\/a&gt;\n     &lt;\/div&gt;\n &lt;\/div&gt;\n\n &lt;script src=\"app.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Inside the header, we set an <code>h1<\/code> and a <code>select<\/code> element. Each option represents a location; therefore, we give each of them a custom <code>data-lon<\/code> and <code>data-lat<\/code> attribute, which are the coordinates of the given area. We later access these attributes in the JS code.<\/p>\n<pre><code class=\"language-html\">    &lt;h1&gt;Weather App&lt;\/h1&gt;\n\n    &lt;div&gt;\n        &lt;span&gt;Choose Location: &lt;\/span&gt;\n        &lt;select name=\"\" class=\"countrySelect\"&gt;\n            &lt;option value=\"Berlin\" selected data-lat=\"52.5235\" data-lon=\"13.4115\"&gt;Berlin&lt;\/option&gt;\n            &lt;option value=\"Paris\" data-lat=\"48.8567\" data-lon=\"2.3510\"&gt;Paris&lt;\/option&gt;\n            &lt;option value=\"London\" data-lat=\"51.5002\" data-lon=\"-0.1262\"&gt;London&lt;\/option&gt;\n            &lt;option value=\"Madrid\" data-lat=\"40.4167\" data-lon=\"-3.7033\"&gt;Madrid&lt;\/option&gt;\n            ...\n        &lt;\/select&gt;\n     &lt;\/div&gt;<\/code><\/pre>\n<p>Inside the <code>svg<\/code> element, we first make a gradient texture that can be later used in visible SVG elements. Then we add two SVG groups with the element <code>g<\/code>. The first one holds all the labels and the second one the graph itself. We will insert the other SVG that's through the JS code.<\/p>\n<pre><code class=\"language-html\">&lt;defs&gt;\n  &lt;linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"&gt;\n      &lt;stop offset=\"0%\" style=\"stop-color:#5591c2  ;stop-opacity:1\" \/&gt;\n      &lt;stop offset=\"50%\" style=\"stop-color:#5591c2  ;stop-opacity:0.5\" \/&gt;\n      &lt;stop offset=\"100%\" style=\"stop-color:rgba(44, 44, 44, 0);stop-opacity:0\" \/&gt;\n  &lt;\/linearGradient&gt;\n&lt;\/defs&gt;\n\n&lt;g class=\"lables\"&gt;&lt;\/g&gt;\n&lt;g class=\"data\"&gt;&lt;\/g&gt;<\/code><\/pre>\n<p>Now we add the functionalities with JavaScript!<\/p>\n<h2>JavaScript<\/h2>\n<p>Let's get to the JS of the Program. We must remember that we must redraw the graph every time the window resizes or when the user changes the location.<\/p>\n<h3>Setup<\/h3>\n<p>Let's setup up some variables. The first one <code>currentData<\/code> acts just as a cache, so we don't have to get the data each time the window resizes. The following three constants are used for the styling of the graph and the labels. We need to add a little padding to the left inside the SVG element because our temperature scale will be there. We also exaggerate the temperatures, so they have a more apparent difference. And we also define how far apart each step on the temperature scale is.<\/p>\n<pre><code class=\"language-js\">let currentData = {}\n\nconst paddingLeftGraph = 60\nconst height_exxagaration = 7\nconst LabelStepsY = 5<\/code><\/pre>\n<p>After that, we save some of the needed elements in variables. For this we use <code>querySelector<\/code> and <code>getElementById<\/code>. continuing, we get the dimensions of the SVG element minus the padding; this is important so the graph will span the full width of the container. Last but not least, we define a step multiplier. This value will be used in tandem with the width. <\/p>\n<p>The API will always return <code>168<\/code> Datapoints, but it may be that the SVG is 500 Pixels wide, and we want each of the Datapoints evenly spread out in these 500 Pixels. These last three variables will always be overwritten when the window size changes.<\/p>\n<pre><code class=\"language-js\">const dataContainer = document.querySelector('.data')\nconst lableContainer = document.querySelector('.lables')\nconst citySelect = document.querySelector('.countrySelect')\nconst svgElement = document.getElementById('graph-svg')\n\nlet container_width = svgElement.getBoundingClientRect().width - paddingLeftGraph\nlet container_height = svgElement.getBoundingClientRect().height\nlet step_multiplier = container_width \/ 168<\/code><\/pre>\n<h3>Functions<\/h3>\n<p>Let us go over the function used on our website.<\/p>\n<p>The first one is pretty simple. It will just fetch a provided URL and return the parsed json.<\/p>\n<pre><code class=\"language-js\">async function request(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n}<\/code><\/pre>\n<p>The next one is also simple as it will just set the new width and step multiplier and redraw the data and labels as soon as the window size changes.<\/p>\n<pre><code class=\"language-js\">function setSize() {\n    let size = svgElement.getBoundingClientRect()\n\n    container_width = size.width - paddingLeftGraph\n    step_multiplier = container_width \/ 168\n\n    DrawData()\n    drawLables()\n}<\/code><\/pre>\n<p>The <code>getWeekDay<\/code> function will return the name of the weekday from a given date.<\/p>\n<pre><code class=\"language-js\">function getWeekDay(date) {\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    return days[date.getDay()];\n}<\/code><\/pre>\n<p>The <code>changeLocation<\/code> function will first get the option element where the value is the same as the select itself. This returned element has the <code>data-lon<\/code> and <code>data-lat<\/code> attributes which we will get from it using <code>getAttribute()<\/code>. After that we build the request string where insert these coordinates and we call the <code>request()<\/code> function. As soon as the request is finished we set the <code>currentData<\/code> variable to the returned data and we redraw the graph with <code>DrawData()<\/code><\/p>\n<pre><code class=\"language-js\">function changeLocation() {    \n\n    let currentCityEl = citySelect.querySelector(`[value=\"${citySelect.value}\"]`)\n\n    let lat = currentCityEl.getAttribute('data-lat')\n    let lon = currentCityEl.getAttribute('data-lon')\n\n    let requestString = `https:\/\/api.open-meteo.com\/v1\/forecast?latitude=${lat}&amp;longitude=${lon}&amp;hourly=temperature_2m`\n\n    request(requestString).then((data) =&gt; {\n        currentData = data\n        DrawData(currentData)\n    })\n\n}<\/code><\/pre>\n<p>Now let us get to the <code>DrawData()<\/code> function. We start by making a string in which we build a <code>polygon<\/code> element. The thing about SVG polygons is that they always have to be closed, that is why we insert the positions of the start and end. We also add a placeholder <code>INSERT_POINTS<\/code> which will later be replaced with the points of the temperatures. When making the start and end point we take the padding into account.<\/p>\n<p>Then we define three variables one will hold the concatenated string of all the points and the other hold the hourly temperatures we got from the request. The last one will be the x index position.<\/p>\n<p>Then we loop over the hourly temperatures and we add the temperature and index to the points. We have to keep in mind the step multiplier and that the coordinates in a polygon start at the top left of the SVG element. Last but not least we insert the points string we just made into the string we made in the first place and we set it to be the inner HTML of the <code>dataContainer<\/code> which is a group in our SVG.<\/p>\n<pre><code class=\"language-js\">function DrawData() {\n    let poly = `&lt;polygon fill=\"url(#gradient)\" points=\"${paddingLeftGraph},${container_height} INSERT_POINTS ${container_width + paddingLeftGraph},${container_height}\"&gt;&lt;\/polygon&gt;`\n    let positions = ''\n\n    const temps = currentData.hourly.temperature_2m\n\n    let index = 0\n    temps.forEach(temperature =&gt; {\n        positions = positions + ` ${index * step_multiplier + paddingLeftGraph},${container_height - temperature * height_exxagaration}`\n\n        index++\n    })\n\n    poly = poly.replace('INSERT_POINTS', positions)\n\n    dataContainer.innerHTML = poly\n}<\/code><\/pre>\n<p>Let's all so go over the <code>drawLables<\/code> function. We do it pretty similar here, we build a string of <code>text<\/code> and <code>line<\/code> elements and we set them to be the inner HTML of the <code>lableContainer<\/code>. We make a loop where we count by our <code>LabelStepsY<\/code> variable. We do this for the X and Y axis. For the horizontal axis, we insert the weekdays but we set today and tomorrow.<\/p>\n<pre><code class=\"language-js\">function drawLables() {\n\n    let verticalLinesString = ''\n    for (let index = 0; index &lt; 50; index += LabelStepsY) {\n        let height = container_height - index * height_exxagaration\n        verticalLinesString = verticalLinesString + `&lt;line x1=\"0\" y1=\"${height}\" x2=\"1000\" y2=\"${height}\" class=\"line\" \/&gt;&lt;text x=\"0\" y=\"${height}\"&gt;${index} \u00b0C&lt;\/text&gt;`\n    }\n\n    let dayIndex = 0\n    for (let index = 0; index &lt; 169; index += 24) {\n\n        let daytext\n        if (dayIndex == 0) {\n            daytext = 'Today'\n        }\n        else if (dayIndex == 1) {\n            daytext = 'Tomorrow'\n        }\n        else {\n            var date = new Date();\n            date.setDate(date.getDate() + dayIndex);\n\n            daytext = getWeekDay(date)\n        }\n\n        let width = index * step_multiplier + paddingLeftGraph\n        verticalLinesString = verticalLinesString + `&lt;line x1=\"${width}\" y1=\"50\" x2=\"${width}\" y2=\"1000\" class=\"line\"\/&gt;&lt;text x=\"${width}\" y=\"${container_height - 5}\"&gt;${daytext}&lt;\/text&gt;`\n\n        dayIndex++\n    }\n\n    lableContainer.innerHTML = verticalLinesString\n}<\/code><\/pre>\n<h3>Connecting Events<\/h3>\n<p>After making the functions we connect the change event from the selection to the <code>changeLocation<\/code> function and the resize event from the document to <code>setSize<\/code>. Last but not least we call <code>changeLocation<\/code> and <code>drawLables<\/code> so the graph is drawn for the firs time after the page loads.<\/p>\n<pre><code class=\"language-js\">citySelect.addEventListener('change', changeLocation)\nwindow.addEventListener('resize', setSize, false);\n\nchangeLocation()\ndrawLables()<\/code><\/pre>\n<h2>CSS \/ SASS<\/h2>\n<p>Our Web App will now work but it won't look good, so let's add some styling to it!<\/p>\n<p>In the sass file, we first add four variables that hold the color palette and we define a <code>mixin<\/code> which is a reusable component that we can later include anywhere with <code>@include container<\/code>.<\/p>\n<pre><code class=\"language-sass\">$color: #3e6b8f    \n$bg: rgb(65, 65, 65)\n$lines: rgb(90, 90, 90)\n$text: #f3f3f3\n\n@mixin container()\n    max-width: 900px\n    margin: 0 auto\n    padding: 1em<\/code><\/pre>\n<p>After that, we style the body by setting the font and color. We also make a class <code>container<\/code> that solely consists of the mixin.<\/p>\n<pre><code class=\"language-sass\">body\n    box-sizing: border-box\n    font-family: 'Segoe UI', sans-serif\n    margin: 0\n    background-color: $bg\n    color: $text\n\n.container\n    @include container<\/code><\/pre>\n<p>Then we make the header, where we also use the mixin<\/p>\n<pre><code class=\"language-sass\">.header-container\n\n    background-color: $color\n    border-bottom: 6px solid darken($color, 5)\n\n    .header\n        @include container\n        padding: 1em\n        display: flex\n        justify-content: space-between\n        align-items: center\n\n    h1\n        margin: 0<\/code><\/pre>\n<p>continuing we style the SVG to be full width and we set the outline color of the lines with the <code>stroke<\/code> property and the color of the text with <code>fill<\/code>. Last but not least we style the link and we use the lighten function that will as its name suggests lighten the color by the amount given as a second argument.<\/p>\n<pre><code class=\"language-sass\">.graph-container\n    margin-top: 1em\n\n    svg\n        width: 100%\n\n        .line\n            stroke: $lines\n\n        text\n            fill: $text\n\na\n    color: lighten($color, 20)\n    text-decoration: none\n    padding: 0.5em\n    display: block\n    text-align: center<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p>Below you see the Website in action.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/weatherheihg.gif\" alt=\"enter image description here\" \/><\/p>\n<p><a href=\"http:\/\/weather-app.maximmaeder.com\/\">Weather App (maximmaeder.com)<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2012%20-%20Weather%20App%20with%20HTML%2C%20SASS%20and%20JavaScript\">GitHub<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a Weather using Web Technologies! See how you can add more features to this program, such as rain prediction or custom locations.<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!<\/p>\n<h2>Attribution<\/h2>\n<p><a href=\"https:\/\/open-meteo.com\">Open Meteo<\/a>\n<a href=\"https:\/\/creativecommons.org\/licenses\/by-nc\/4.0\/\">Licence<\/a><\/p>",
            "post_title": "Weather App with HTML, SASS, and JavaScript",
            "post_excerpt": "Learn how to make a Simple App showing Temperatures for the next seven days. We learn about SVG and API fetching.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "weather-app-with-html-sass-and-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/weather-app-with-html-sass-and-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Country Quiz with HTML, SASS, and JavaScript.",
        "description": "Learn how to make a country quiz with HTML javascript and the CSS Pre-Processor SASS",
        "slug": "country-quiz-with-html-sass-and-javascript",
        "raw_content": "## Idea\r\n\r\nIn this Tutorial, we will make a Country Quiz  Website with HTML, SASS, and JavaScript. We will make it so the user sees a country silhouette and they have to choose from 4 Countries, where one is the right one. You can download the SVG images of the Countries from the [Repository](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2013%20-%20Country%20Quiz%20with%20HTML,%20SASS%20and%20JavaScript), you find them in the `output` folder.\r\n\r\n[Demo](https:\/\/country-quiz.maximmaeder.com\/)\r\n[Github Repo](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2013%20-%20Country%20Quiz%20with%20HTML,%20SASS%20and%20JavaScript)\r\n\r\nLet us get coding.\r\n\r\n## HTML\r\n\r\nLet us start with the HTML of the Page. In the Head of the HTML, we simply set a title and we include the style sheet.\r\n\r\n```html\r\n<title>Country Quiz<\/title>\r\n\r\n<link rel=\"stylesheet\" href=\"style.css\">\r\n```\r\n\r\nThen in the Body, we wrap all our content inside a div with the `container` class. Inside it, we have one div with the class `country` that will hold the picture of the current country and another div with the class `UI` that will hold the buttons for the quiz. In the end, we also link the JavaScript File to our Page.\r\n\r\n```html\r\n<div class=\"container\">\r\n\r\n    <div class=\"country\">\r\n        <img src=\"output\/Argentina.svg\">\r\n    <\/div>\r\n\r\n    <div class=\"ui\">\r\n\t    ...\r\n    <\/div>\r\n<\/div>\r\n\r\n<script src=\"app.js\"><\/script>\r\n```\r\n\r\nInside the div with the `ui` class  we simply add a Header and some buttons in a group that will be the possible countries. We will make it dynamic so you can add any amount of buttons in this group and our program will still work. We also add a button that skips to the next question and we provide a link to the source of the images, namely [GADM](https:\/\/gadm.org\/).\r\n\r\n```html\r\n<div>\r\n    <h1>What Country Is It?<\/h1>\r\n\r\n    <div class=\"btn-group\">\r\n        <button class=\"button\">A<\/button>\r\n        <button class=\"button\">B<\/button>\r\n        <button class=\"button\">C<\/button>\r\n        <button class=\"button\">D<\/button>\r\n    <\/div>\r\n    \r\n    <div>\r\n        <br>\r\n        <button class=\"continue\">Continue<\/button>\r\n    <\/div>\r\n<\/div>\r\n\r\n<div>\r\n    <br>\r\n    Data Provided By \r\n    <a href=\"https:\/\/gadm.org\/\">GADM<\/a>.\r\n<\/div>\r\n```\r\n\r\nThat is it for the HTML of the Page.\r\n\r\n## JavaScript\r\n\r\n### Setup\r\n\r\nNow let us come to the JS of the Page. We first define an Array that holds the names of all countries that could occur. It is important that each string is also the name of an image in our collection of countries. In my case, I stored them in a folder called `outputs`.\r\n\r\nThis is just a small part of all the countries.\r\n\r\n```js\r\nconst countries = ['Afghanistan', 'Angola', ...]\r\n```\r\n\r\nAfter that, we define some more variables. We start by copying the list we just made into another variable. We do this because every time a country from the array is used we delete it but as soon as this list dries out we refill it with the starting list. We also define a variable that reflects the current right country and a variable that holds the current selectable countries.\r\n\r\n```js\r\n\/* Shallow copy *\/\r\nlet countryPool = [...countries]\r\n\r\nlet currentCountry = '';\r\nlet currentPool\r\n```\r\n\r\nContinuing we find out how many buttons are in the button group and we also save that information for later usage. We also define a temporary variable that is not of much importance as it also could be defined later.\r\n\r\n```js\r\nconst amountButtons = document.querySelector('.btn-group').children.length\r\n\r\n\/* The Random Index will be stored here so that, only temporary*\/\r\nlet randomCountryIndex\r\n```\r\n\r\n### `Next()` Function\r\n\r\nNow let us get to the main function of our Quiz, which will skip on to the next question. In it, we start by defining the `currentPool` to an empty array, because here we store the countries that are currently selectable. Then we use a function called `randomChoiceIndex(list)` to get a random index inside a given array, we later go over its functionality. We save this random index so we can then get the item located at this index and delete it. Lastly, we push this randomly chosen country into our current Pool.\r\n\r\n```js\r\nfunction next() {\r\n    currentPool = []\r\n\r\n    \/* Get random element from the countries list and remove it*\/\r\n    randomCountryIndex = randomChoiceIndex(countryPool)\r\n    currentCountry = countryPool[randomCountryIndex]\r\n    countryPool.splice(randomCountryIndex, 1)\r\n    currentPool.push(currentCountry)\r\n\r\n\t...\r\n}\r\n```\r\n\r\nThen we set the attribute of the image to be the path to our current country. We use `querySelector` and `setAttribute`.\r\n\r\n```js\r\n    \/* Show the searched country in the img tag, by setting the source attribute*\/\r\n    document.querySelector('img').setAttribute('src', `output\/${currentCountry}.svg`)\r\n```\r\n\r\nThen we start a loop that will from on to the number of buttons and it will add another country from the array and add to the pool.\r\n\r\n```js\r\n    \/* Add three random and distinct countries to the current pool *\/\r\n    for (let i = 0; i < amountButtons - 1; i++) {\r\n        let randomCountryIndex = randomChoiceIndex(countryPool)\r\n\r\n        let tempcountry = countryPool[randomCountryIndex]\r\n        countryPool.splice(randomCountryIndex, 1)\r\n        currentPool.push(tempcountry)\r\n    }\r\n```\r\n\r\nThen we use another self-made function to shuffle the current pool in place.\r\n\r\n```js\r\n    \/* Shuffle List in Place *\/\r\n    shuffleArray(currentPool)\r\n```\r\n\r\nContinuing we loop over each of the buttons, we set the inner HTML and the background color. After that, we remove the event listener for the click event from this element and we add it immediately back again, essentially resetting the event listener.\r\n\r\n```js\r\n    let i = 0\r\n    document.querySelectorAll('.button').forEach(el => {\r\n\r\n        el.innerHTML = currentPool[i]\r\n        el.style.backgroundColor = '#e0e0e0'\r\n\r\n        \/* Reset Event Listeners *\/\r\n        el.removeEventListener('click', clicked)\r\n        el.addEventListener('click', clicked)\r\n\r\n        i++\r\n    })\r\n```\r\n\r\nLast but not least we check if the country Pool length does not succeed  10. If that is the case we fill the Array once again.\r\n\r\n```js\r\n    \/* Fill the Country Pool as soon it does not meet a certain threshold *\/\r\n    if (countryPool.length < 10) {\r\n        countryPool = [...countries]\r\n    }\r\n```\r\n\r\n### Other Helper functions\r\n\r\nLet us go over some helper functions, starting with the function that returns a random index from a given list. Keep in mind that `Math.random()` will return a random number between 0 and 1. `Math.floor()` will snap the given number to the lower integer so 5.2 will turn to 5. \r\n\r\n```js\r\nfunction randomChoiceIndex(list) {\r\n    return Math.floor(Math.random() * list.length)\r\n}\r\n```\r\n\r\nThe `shuffleArray()` function will also utilize this same algorithm and it will then reassign the item at the given index.\r\n\r\n```js\r\nfunction shuffleArray(arr) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n}\r\n```\r\n\r\nThen we also make a function that is connected to the buttons. In it, we first save the clicked element. Then we color the background to be red. After that, we loop over the buttons and if the inner HTML is the same as the current country, we color it to be green. We also remove the event listener from the object.\r\n\r\n```js\r\nfunction clicked(el) {\r\n\r\n    \/* Get the clicked element *\/\r\n    let clickedEl = el.path[0];\r\n    \r\n    \/* Color the pressed Button with Red *\/\r\n    \/* If the right button was pressed this will be overwritten*\/\r\n    clickedEl.style.backgroundColor = '#ffcea4'\r\n    \r\n    \/* Color the right Button with Green *\/\r\n    document.querySelectorAll('.button').forEach(ele => {\r\n        if (ele.innerHTML == currentCountry) {\r\n            ele.style.backgroundColor = '#a4ffaa'\r\n        };\r\n\r\n        \/* Remove event listener for each Button *\/\r\n        ele.removeEventListener('click', clicked)\r\n    })\r\n}\r\n```\r\n\r\n### Wrapping Up\r\n\r\nIn the end, we connect the continue button to the next function and we call it for the first time.\r\n\r\n```js\r\n\/* Connect Continue Button *\/\r\ndocument.querySelector('.continue').addEventListener('click', next)\r\n\r\n\/* Start the Quiz *\/\r\nnext()\r\n```\r\n\r\n## SASS \/ CSS\r\n\r\nBelow you also see the SASS of the page.\r\n\r\nvariables.\r\n\r\n```sass\r\n$color: #53a2e2\r\n$uiBG: rgb(85, 85, 85)\r\n$uiCountry: rgb(71, 71, 71)\r\n\r\n$paddingSmall: 0.5em\r\n$paddingLarge: 2em\r\n\r\n$breakpoint: 800px\r\n```\r\n\r\nstyle declarations.\r\n\r\n```sass\r\nbody\r\n    margin: 0\r\n    font-family: Georgia, 'Times New Roman', Times, serif\r\n\r\n\r\n.container\r\n    display: flex\r\n    flex-direction: column\r\n    height: 100vh\r\n\r\n    @media screen and (min-width: $breakpoint)\r\n        flex-direction: row-reverse\r\n\r\n\r\n    .country\r\n        flex-grow: 1\r\n        overflow: auto\r\n        padding: $paddingSmall\r\n        background-color: $uiCountry\r\n\r\n        display: flex\r\n        align-content: center\r\n\r\n        img\r\n            filter: invert(1)\r\n            width: 100%\r\n            margin: auto\r\n\r\n    .ui\r\n        padding: $paddingSmall\r\n        background-color: $uiBG\r\n        color: $color\r\n        text-align: center\r\n\r\n        display: flex\r\n        flex-direction: column\r\n        justify-content: space-between\r\n\r\n        h1\r\n            margin-top: 0\r\n\r\n        .btn-group\r\n            display: grid\r\n            grid-template-columns: 1fr 1fr\r\n            gap: 10px\r\n\r\n            @media screen and (min-width: $breakpoint)\r\n                grid-template-columns: 1fr\r\n                \r\n\r\n        button\r\n            border: none\r\n            padding: 1em\r\n\r\n            &:hover\r\n                background-color: lighten($color, 10)\r\n                cursor: pointer\r\n\r\n        @media screen and (min-width: $breakpoint)\r\n            width: clamp(200px, 20%, 350px)\r\n            padding: $paddingLarge\r\n    \r\n        a\r\n            color: $color\r\n```\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Country Quiz using JavaScript code! See how you can add more features to this program such as a points system.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "013 - Country Quiz with HTML, SASS and JavaScript\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 664,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>In this Tutorial, we will make a Country Quiz  Website with HTML, SASS, and JavaScript. We will make it so the user sees a country silhouette and they have to choose from 4 Countries, where one is the right one. You can download the SVG images of the Countries from the <a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2013%20-%20Country%20Quiz%20with%20HTML,%20SASS%20and%20JavaScript\">Repository<\/a>, you find them in the <code>output<\/code> folder.<\/p>\n<p><a href=\"https:\/\/country-quiz.maximmaeder.com\/\">Demo<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2013%20-%20Country%20Quiz%20with%20HTML,%20SASS%20and%20JavaScript\">Github Repo<\/a><\/p>\n<p>Let us get coding.<\/p>\n<h2>HTML<\/h2>\n<p>Let us start with the HTML of the Page. In the Head of the HTML, we simply set a title and we include the style sheet.<\/p>\n<pre><code class=\"language-html\">&lt;title&gt;Country Quiz&lt;\/title&gt;\n\n&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;<\/code><\/pre>\n<p>Then in the Body, we wrap all our content inside a div with the <code>container<\/code> class. Inside it, we have one div with the class <code>country<\/code> that will hold the picture of the current country and another div with the class <code>UI<\/code> that will hold the buttons for the quiz. In the end, we also link the JavaScript File to our Page.<\/p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n\n    &lt;div class=\"country\"&gt;\n        &lt;img src=\"output\/Argentina.svg\"&gt;\n    &lt;\/div&gt;\n\n    &lt;div class=\"ui\"&gt;\n        ...\n    &lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;script src=\"app.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Inside the div with the <code>ui<\/code> class  we simply add a Header and some buttons in a group that will be the possible countries. We will make it dynamic so you can add any amount of buttons in this group and our program will still work. We also add a button that skips to the next question and we provide a link to the source of the images, namely <a href=\"https:\/\/gadm.org\/\">GADM<\/a>.<\/p>\n<pre><code class=\"language-html\">&lt;div&gt;\n    &lt;h1&gt;What Country Is It?&lt;\/h1&gt;\n\n    &lt;div class=\"btn-group\"&gt;\n        &lt;button class=\"button\"&gt;A&lt;\/button&gt;\n        &lt;button class=\"button\"&gt;B&lt;\/button&gt;\n        &lt;button class=\"button\"&gt;C&lt;\/button&gt;\n        &lt;button class=\"button\"&gt;D&lt;\/button&gt;\n    &lt;\/div&gt;\n\n    &lt;div&gt;\n        &lt;br&gt;\n        &lt;button class=\"continue\"&gt;Continue&lt;\/button&gt;\n    &lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;div&gt;\n    &lt;br&gt;\n    Data Provided By \n    &lt;a href=\"https:\/\/gadm.org\/\"&gt;GADM&lt;\/a&gt;.\n&lt;\/div&gt;<\/code><\/pre>\n<p>That is it for the HTML of the Page.<\/p>\n<h2>JavaScript<\/h2>\n<h3>Setup<\/h3>\n<p>Now let us come to the JS of the Page. We first define an Array that holds the names of all countries that could occur. It is important that each string is also the name of an image in our collection of countries. In my case, I stored them in a folder called <code>outputs<\/code>.<\/p>\n<p>This is just a small part of all the countries.<\/p>\n<pre><code class=\"language-js\">const countries = ['Afghanistan', 'Angola', ...]<\/code><\/pre>\n<p>After that, we define some more variables. We start by copying the list we just made into another variable. We do this because every time a country from the array is used we delete it but as soon as this list dries out we refill it with the starting list. We also define a variable that reflects the current right country and a variable that holds the current selectable countries.<\/p>\n<pre><code class=\"language-js\">\/* Shallow copy *\/\nlet countryPool = [...countries]\n\nlet currentCountry = '';\nlet currentPool<\/code><\/pre>\n<p>Continuing we find out how many buttons are in the button group and we also save that information for later usage. We also define a temporary variable that is not of much importance as it also could be defined later.<\/p>\n<pre><code class=\"language-js\">const amountButtons = document.querySelector('.btn-group').children.length\n\n\/* The Random Index will be stored here so that, only temporary*\/\nlet randomCountryIndex<\/code><\/pre>\n<h3><code>Next()<\/code> Function<\/h3>\n<p>Now let us get to the main function of our Quiz, which will skip on to the next question. In it, we start by defining the <code>currentPool<\/code> to an empty array, because here we store the countries that are currently selectable. Then we use a function called <code>randomChoiceIndex(list)<\/code> to get a random index inside a given array, we later go over its functionality. We save this random index so we can then get the item located at this index and delete it. Lastly, we push this randomly chosen country into our current Pool.<\/p>\n<pre><code class=\"language-js\">function next() {\n    currentPool = []\n\n    \/* Get random element from the countries list and remove it*\/\n    randomCountryIndex = randomChoiceIndex(countryPool)\n    currentCountry = countryPool[randomCountryIndex]\n    countryPool.splice(randomCountryIndex, 1)\n    currentPool.push(currentCountry)\n\n    ...\n}<\/code><\/pre>\n<p>Then we set the attribute of the image to be the path to our current country. We use <code>querySelector<\/code> and <code>setAttribute<\/code>.<\/p>\n<pre><code class=\"language-js\">    \/* Show the searched country in the img tag, by setting the source attribute*\/\n    document.querySelector('img').setAttribute('src', `output\/${currentCountry}.svg`)<\/code><\/pre>\n<p>Then we start a loop that will from on to the number of buttons and it will add another country from the array and add to the pool.<\/p>\n<pre><code class=\"language-js\">    \/* Add three random and distinct countries to the current pool *\/\n    for (let i = 0; i &lt; amountButtons - 1; i++) {\n        let randomCountryIndex = randomChoiceIndex(countryPool)\n\n        let tempcountry = countryPool[randomCountryIndex]\n        countryPool.splice(randomCountryIndex, 1)\n        currentPool.push(tempcountry)\n    }<\/code><\/pre>\n<p>Then we use another self-made function to shuffle the current pool in place.<\/p>\n<pre><code class=\"language-js\">    \/* Shuffle List in Place *\/\n    shuffleArray(currentPool)<\/code><\/pre>\n<p>Continuing we loop over each of the buttons, we set the inner HTML and the background color. After that, we remove the event listener for the click event from this element and we add it immediately back again, essentially resetting the event listener.<\/p>\n<pre><code class=\"language-js\">    let i = 0\n    document.querySelectorAll('.button').forEach(el =&gt; {\n\n        el.innerHTML = currentPool[i]\n        el.style.backgroundColor = '#e0e0e0'\n\n        \/* Reset Event Listeners *\/\n        el.removeEventListener('click', clicked)\n        el.addEventListener('click', clicked)\n\n        i++\n    })<\/code><\/pre>\n<p>Last but not least we check if the country Pool length does not succeed  10. If that is the case we fill the Array once again.<\/p>\n<pre><code class=\"language-js\">    \/* Fill the Country Pool as soon it does not meet a certain threshold *\/\n    if (countryPool.length &lt; 10) {\n        countryPool = [...countries]\n    }<\/code><\/pre>\n<h3>Other Helper functions<\/h3>\n<p>Let us go over some helper functions, starting with the function that returns a random index from a given list. Keep in mind that <code>Math.random()<\/code> will return a random number between 0 and 1. <code>Math.floor()<\/code> will snap the given number to the lower integer so 5.2 will turn to 5. <\/p>\n<pre><code class=\"language-js\">function randomChoiceIndex(list) {\n    return Math.floor(Math.random() * list.length)\n}<\/code><\/pre>\n<p>The <code>shuffleArray()<\/code> function will also utilize this same algorithm and it will then reassign the item at the given index.<\/p>\n<pre><code class=\"language-js\">function shuffleArray(arr) {\n    for (let i = arr.length - 1; i &gt; 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n}<\/code><\/pre>\n<p>Then we also make a function that is connected to the buttons. In it, we first save the clicked element. Then we color the background to be red. After that, we loop over the buttons and if the inner HTML is the same as the current country, we color it to be green. We also remove the event listener from the object.<\/p>\n<pre><code class=\"language-js\">function clicked(el) {\n\n    \/* Get the clicked element *\/\n    let clickedEl = el.path[0];\n\n    \/* Color the pressed Button with Red *\/\n    \/* If the right button was pressed this will be overwritten*\/\n    clickedEl.style.backgroundColor = '#ffcea4'\n\n    \/* Color the right Button with Green *\/\n    document.querySelectorAll('.button').forEach(ele =&gt; {\n        if (ele.innerHTML == currentCountry) {\n            ele.style.backgroundColor = '#a4ffaa'\n        };\n\n        \/* Remove event listener for each Button *\/\n        ele.removeEventListener('click', clicked)\n    })\n}<\/code><\/pre>\n<h3>Wrapping Up<\/h3>\n<p>In the end, we connect the continue button to the next function and we call it for the first time.<\/p>\n<pre><code class=\"language-js\">\/* Connect Continue Button *\/\ndocument.querySelector('.continue').addEventListener('click', next)\n\n\/* Start the Quiz *\/\nnext()<\/code><\/pre>\n<h2>SASS \/ CSS<\/h2>\n<p>Below you also see the SASS of the page.<\/p>\n<p>variables.<\/p>\n<pre><code class=\"language-sass\">$color: #53a2e2\n$uiBG: rgb(85, 85, 85)\n$uiCountry: rgb(71, 71, 71)\n\n$paddingSmall: 0.5em\n$paddingLarge: 2em\n\n$breakpoint: 800px<\/code><\/pre>\n<p>style declarations.<\/p>\n<pre><code class=\"language-sass\">body\n    margin: 0\n    font-family: Georgia, 'Times New Roman', Times, serif\n\n.container\n    display: flex\n    flex-direction: column\n    height: 100vh\n\n    @media screen and (min-width: $breakpoint)\n        flex-direction: row-reverse\n\n    .country\n        flex-grow: 1\n        overflow: auto\n        padding: $paddingSmall\n        background-color: $uiCountry\n\n        display: flex\n        align-content: center\n\n        img\n            filter: invert(1)\n            width: 100%\n            margin: auto\n\n    .ui\n        padding: $paddingSmall\n        background-color: $uiBG\n        color: $color\n        text-align: center\n\n        display: flex\n        flex-direction: column\n        justify-content: space-between\n\n        h1\n            margin-top: 0\n\n        .btn-group\n            display: grid\n            grid-template-columns: 1fr 1fr\n            gap: 10px\n\n            @media screen and (min-width: $breakpoint)\n                grid-template-columns: 1fr\n\n        button\n            border: none\n            padding: 1em\n\n            &amp;:hover\n                background-color: lighten($color, 10)\n                cursor: pointer\n\n        @media screen and (min-width: $breakpoint)\n            width: clamp(200px, 20%, 350px)\n            padding: $paddingLarge\n\n        a\n            color: $color<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a Country Quiz using JavaScript code! See how you can add more features to this program such as a points system.<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Country Quiz with HTML, SASS, and JavaScript.",
            "post_excerpt": "Learn how to make a country quiz with HTML javascript and the CSS Pre-Processor SASS",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "country-quiz-with-html-sass-and-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/country-quiz-with-html-sass-and-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Ripple Button with HTML, SASS, and JavaScript",
        "description": "Learn how to make a button that has a ripple effect when you click it. We will use HTML, SASS and JavaScript.",
        "slug": "ripple-button-with-html-sass-and-javascript",
        "raw_content": "## Idea\r\n\r\nIn this Tutorial, we will make a button component usable in HTML that will show a little splash when clicking on it. We will learn about CSS Keyframe Animations and JavaScript. We will make it so we can simply add a class to a button in order for it to work. We will also make variations of the button for colors and sizes.\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/ripple-button\/index.html)\r\n[Look at the Source Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2014%20-%20Ripple%20Button%20with%20HTML,%20SASS%20and%20JavaScript)\r\n\r\n## Sass\r\n\r\nLet's start with the Sass \/ CSS of the button. We first define some colors. In the first list, we have values and in the second one we have the corresponding names, so these lists must have the same amount of items. The last variables combine them both. With `zip()` we can merge two or more lists so the items with the same index are placed in a nested list together. We do this so we can access the values and names at the same time when looping.\r\n\r\n```sass\r\n$color-values:  rgb(234, 95, 95), rgb(95, 211, 234), rgb(234, 162, 95), rgb(95, 234, 165), rgb(95, 95, 95), rgb(0, 0, 0), rgb(255, 255, 255)\r\n$color-names:   'red', 'blue', 'orange', 'green', 'grey', 'black', 'white'\r\n$colors: zip($color-values, $color-names)\r\n```\r\n\r\n\r\nWe do the same things for the possible sizes. The numbers indicate `%`.\r\n\r\n```sass\r\n$size-values: 70, 100, 130\r\n$size-names: small, normal, large\r\n$sizes: zip($size-values, $size-names)\r\n```\r\n\r\nLastly, we define a ripple size variable because depending on the size the ripple should be larger.\r\n\r\n```sass\r\n$rippleSize: 8px\r\n```\r\n\r\nNow we select all elements that have the substring `button` in their class attribute. It is important that we set its position to relative so we can later place child elements with high precision. We also use the text-transform property to transform the letters to uppercase. The other styles are pretty similar.\r\n\r\n```sass\r\n[class*='button']\r\n    padding: 0.5em 1em\r\n    background-color: rgb(240, 240, 240)\r\n    \/* border: 0.5px solid rgb(185, 185, 185) *\/\r\n    border: none\r\n    border-radius: 5px\r\n    position: relative\r\n    text-transform: uppercase\r\n    \r\n    font-family: 'Segoe UI', sans-serif\r\n```\r\n\r\nNow for elements with the `ripple-button` class. we set overflow to hidden so we don't see the splash outside of the bounds of the button. We also add a hover effect.\r\n\r\n```sass\r\n.ripple-button\r\n    overflow: hidden\r\n\r\n\r\n.ripple-button:hover\r\n    cursor: pointer\r\n```\r\n\r\nThe ripple effect will be caused by a round span element inside the button that grows over time. We set the position to absolute so we can specify `top` and `left` Then we also insert the ripple size variable for the width and height. We also set the border radius to a high number so the element will be a circle. We also disable all pointer-events with the `pointer-events` property. This will make the span *transparent* for the mouse. Last but not least we give the ripple an animation and an animation duration.\r\n\r\n```sass\r\n.ripple\r\n    position: absolute\r\n    background-color: rgba(200, 200, 200, 0.322)\r\n    width: $rippleSize\r\n    height: $rippleSize\r\n    border-radius: 999px\r\n    pointer-events: none\r\n    animation-name: ripple-grow\r\n    animation-duration: 0.7s\r\n```\r\n\r\nThe animation is defined below with `@keyframes`. Here we can specify at what time in the animation certain styles apply. If the ripple element is created it will play this animation, going from scale 0 to 15 so it will grow centered. We also animate the opacity. After 60% of the animation, we go back and fade out.\r\n\r\n```sass\r\n@keyframes ripple-grow\r\n    0%\r\n        transform: scale(0)\r\n        opacity: 0\r\n\r\n    60%                \r\n        transform: scale(15)\r\n        opacity: 1\r\n    \r\n    100%                \r\n        opacity: 0\r\n        transform: scale(15)\r\n```\r\n\r\nThat is for the SASS \/ CSS of the Ripple Button, but we also make some variations with the colors and sizes we have specified at the top of the script.\r\n\r\nFirst, we loop over the colors while unpacking\/destructuring the values. So we simply make classes like `button-blue`, with a blue background. We also set the background color of the ripple to be a transparent version of the given color, we do this with `fade-out()`\r\n\r\n```sass\r\n@each $value, $name in $colors\r\n    .button-#{$name}\r\n        background-color: $value\r\n\r\n        .ripple\r\n            background-color: fade-out(darken($value, 10), 0.5)\r\n```\r\n\r\nThen we also make some classes for the sizes in a similar way, but we use the `unquote` function to remove the quotes from the value because have combined it with a percent `%`. We also calculate how large the ripple should be at this size and reinsert these values.\r\n\r\n```sass\r\n@each $value, $name in $sizes\r\n    .button-#{$name}\r\n        font-size: unquote($value + '%')\r\n\r\n        $multiplier: ($value \/ 100)\r\n\r\n        .ripple\r\n            width: calc($rippleSize *  $multiplier)\r\n            height: calc($rippleSize *  $multiplier)\r\n```\r\n\r\n## JavaScript\r\n\r\nNow let us get to the JS of the Ripple Button. We simply have to register the click event on such ripple buttons and add a span element to it and delete it after `0.7` seconds.\r\n\r\nSo we start by getting all the elements with the `ripple-button` class and we turn this HTML collection into an array so we can loop over it using the `forEach` function. Inside the callback, we can use the element of the current iteration.\r\n\r\n```js\r\nArray.from(document.querySelectorAll('.ripple-button')).forEach((el) => {\r\n\t...\r\n}\r\n```\r\n\r\nInside the callback, we immediately set up an event listener for the elements click event. We define a width variable and we create a new element with `document.createElement(name)`. Then we also add the ripple class to this span element with `element.classList.toggle(class_name)`, we could have also used `element.setAttribute('class', 'ripple')`. After that we set the `left` and `top` properties of the span element by using the `event.layerX` which `event.layerY` that holds the coordinates of the click within the element.\r\n\r\n```js\r\n\tel.addEventListener('click', (event) => {\r\n\t\tlet width = 10\r\n\r\n        let span = document.createElement('span');\r\n        span.classList.toggle('ripple')\r\n\t\t\r\n\t\tspan.style.left = event.layerX - width \/ 2 + 'px';\r\n        span.style.top = event.layerY - width \/ 2 + 'px';\r\n\t\t\r\n\t\t...\r\n\t}\r\n```\r\n\r\nContinuing we add the span element to the button as a child with the `appendChild` function and we set a time out on the window that will remove the span after 700 Milliseconds, so after the animation fades out.\r\n\r\n```js\r\n\t\tel.appendChild(span);\r\n\r\n        window.setTimeout(() => {\r\n            span.remove()\r\n        }, 700)\r\n```\r\n\r\n## HTML\r\n\r\nNow let us look at how to set up such a button. It is as simple as making a button with the class `ripple-button`!\r\n\r\n```html\r\n<button class=\"ripple-button\">\r\n\tRipple Button\r\n<\/button>\r\n```\r\n\r\nIn this [Demo](https:\/\/articles.maximmaeder.com\/a\/ripple-button\/index.html) you also see the sizes and colors in action.\r\n\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a ripple effect button!\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/ripple-button\/index.html)\r\n[Look at the Source Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2014%20-%20Ripple%20Button%20with%20HTML,%20SASS%20and%20JavaScript)",
        "featured_image": "014 - Ripple Button with HTML, SASS and JavaScript\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 666,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>In this Tutorial, we will make a button component usable in HTML that will show a little splash when clicking on it. We will learn about CSS Keyframe Animations and JavaScript. We will make it so we can simply add a class to a button in order for it to work. We will also make variations of the button for colors and sizes.<\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/ripple-button\/index.html\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2014%20-%20Ripple%20Button%20with%20HTML,%20SASS%20and%20JavaScript\">Look at the Source Code<\/a><\/p>\n<h2>Sass<\/h2>\n<p>Let's start with the Sass \/ CSS of the button. We first define some colors. In the first list, we have values and in the second one we have the corresponding names, so these lists must have the same amount of items. The last variables combine them both. With <code>zip()<\/code> we can merge two or more lists so the items with the same index are placed in a nested list together. We do this so we can access the values and names at the same time when looping.<\/p>\n<pre><code class=\"language-sass\">$color-values:  rgb(234, 95, 95), rgb(95, 211, 234), rgb(234, 162, 95), rgb(95, 234, 165), rgb(95, 95, 95), rgb(0, 0, 0), rgb(255, 255, 255)\n$color-names:   'red', 'blue', 'orange', 'green', 'grey', 'black', 'white'\n$colors: zip($color-values, $color-names)<\/code><\/pre>\n<p>We do the same things for the possible sizes. The numbers indicate <code>%<\/code>.<\/p>\n<pre><code class=\"language-sass\">$size-values: 70, 100, 130\n$size-names: small, normal, large\n$sizes: zip($size-values, $size-names)<\/code><\/pre>\n<p>Lastly, we define a ripple size variable because depending on the size the ripple should be larger.<\/p>\n<pre><code class=\"language-sass\">$rippleSize: 8px<\/code><\/pre>\n<p>Now we select all elements that have the substring <code>button<\/code> in their class attribute. It is important that we set its position to relative so we can later place child elements with high precision. We also use the text-transform property to transform the letters to uppercase. The other styles are pretty similar.<\/p>\n<pre><code class=\"language-sass\">[class*='button']\n    padding: 0.5em 1em\n    background-color: rgb(240, 240, 240)\n    \/* border: 0.5px solid rgb(185, 185, 185) *\/\n    border: none\n    border-radius: 5px\n    position: relative\n    text-transform: uppercase\n\n    font-family: 'Segoe UI', sans-serif<\/code><\/pre>\n<p>Now for elements with the <code>ripple-button<\/code> class. we set overflow to hidden so we don't see the splash outside of the bounds of the button. We also add a hover effect.<\/p>\n<pre><code class=\"language-sass\">.ripple-button\n    overflow: hidden\n\n.ripple-button:hover\n    cursor: pointer<\/code><\/pre>\n<p>The ripple effect will be caused by a round span element inside the button that grows over time. We set the position to absolute so we can specify <code>top<\/code> and <code>left<\/code> Then we also insert the ripple size variable for the width and height. We also set the border radius to a high number so the element will be a circle. We also disable all pointer-events with the <code>pointer-events<\/code> property. This will make the span <em>transparent<\/em> for the mouse. Last but not least we give the ripple an animation and an animation duration.<\/p>\n<pre><code class=\"language-sass\">.ripple\n    position: absolute\n    background-color: rgba(200, 200, 200, 0.322)\n    width: $rippleSize\n    height: $rippleSize\n    border-radius: 999px\n    pointer-events: none\n    animation-name: ripple-grow\n    animation-duration: 0.7s<\/code><\/pre>\n<p>The animation is defined below with <code>@keyframes<\/code>. Here we can specify at what time in the animation certain styles apply. If the ripple element is created it will play this animation, going from scale 0 to 15 so it will grow centered. We also animate the opacity. After 60% of the animation, we go back and fade out.<\/p>\n<pre><code class=\"language-sass\">@keyframes ripple-grow\n    0%\n        transform: scale(0)\n        opacity: 0\n\n    60%                \n        transform: scale(15)\n        opacity: 1\n\n    100%                \n        opacity: 0\n        transform: scale(15)<\/code><\/pre>\n<p>That is for the SASS \/ CSS of the Ripple Button, but we also make some variations with the colors and sizes we have specified at the top of the script.<\/p>\n<p>First, we loop over the colors while unpacking\/destructuring the values. So we simply make classes like <code>button-blue<\/code>, with a blue background. We also set the background color of the ripple to be a transparent version of the given color, we do this with <code>fade-out()<\/code><\/p>\n<pre><code class=\"language-sass\">@each $value, $name in $colors\n    .button-#{$name}\n        background-color: $value\n\n        .ripple\n            background-color: fade-out(darken($value, 10), 0.5)<\/code><\/pre>\n<p>Then we also make some classes for the sizes in a similar way, but we use the <code>unquote<\/code> function to remove the quotes from the value because have combined it with a percent <code>%<\/code>. We also calculate how large the ripple should be at this size and reinsert these values.<\/p>\n<pre><code class=\"language-sass\">@each $value, $name in $sizes\n    .button-#{$name}\n        font-size: unquote($value + '%')\n\n        $multiplier: ($value \/ 100)\n\n        .ripple\n            width: calc($rippleSize *  $multiplier)\n            height: calc($rippleSize *  $multiplier)<\/code><\/pre>\n<h2>JavaScript<\/h2>\n<p>Now let us get to the JS of the Ripple Button. We simply have to register the click event on such ripple buttons and add a span element to it and delete it after <code>0.7<\/code> seconds.<\/p>\n<p>So we start by getting all the elements with the <code>ripple-button<\/code> class and we turn this HTML collection into an array so we can loop over it using the <code>forEach<\/code> function. Inside the callback, we can use the element of the current iteration.<\/p>\n<pre><code class=\"language-js\">Array.from(document.querySelectorAll('.ripple-button')).forEach((el) =&gt; {\n    ...\n}<\/code><\/pre>\n<p>Inside the callback, we immediately set up an event listener for the elements click event. We define a width variable and we create a new element with <code>document.createElement(name)<\/code>. Then we also add the ripple class to this span element with <code>element.classList.toggle(class_name)<\/code>, we could have also used <code>element.setAttribute('class', 'ripple')<\/code>. After that we set the <code>left<\/code> and <code>top<\/code> properties of the span element by using the <code>event.layerX<\/code> which <code>event.layerY<\/code> that holds the coordinates of the click within the element.<\/p>\n<pre><code class=\"language-js\">    el.addEventListener('click', (event) =&gt; {\n        let width = 10\n\n        let span = document.createElement('span');\n        span.classList.toggle('ripple')\n\n        span.style.left = event.layerX - width \/ 2 + 'px';\n        span.style.top = event.layerY - width \/ 2 + 'px';\n\n        ...\n    }<\/code><\/pre>\n<p>Continuing we add the span element to the button as a child with the <code>appendChild<\/code> function and we set a time out on the window that will remove the span after 700 Milliseconds, so after the animation fades out.<\/p>\n<pre><code class=\"language-js\">        el.appendChild(span);\n\n        window.setTimeout(() =&gt; {\n            span.remove()\n        }, 700)<\/code><\/pre>\n<h2>HTML<\/h2>\n<p>Now let us look at how to set up such a button. It is as simple as making a button with the class <code>ripple-button<\/code>!<\/p>\n<pre><code class=\"language-html\">&lt;button class=\"ripple-button\"&gt;\n    Ripple Button\n&lt;\/button&gt;<\/code><\/pre>\n<p>In this <a href=\"https:\/\/articles.maximmaeder.com\/a\/ripple-button\/index.html\">Demo<\/a> you also see the sizes and colors in action.<\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a ripple effect button!<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/ripple-button\/index.html\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2014%20-%20Ripple%20Button%20with%20HTML,%20SASS%20and%20JavaScript\">Look at the Source Code<\/a><\/p>",
            "post_title": "Ripple Button with HTML, SASS, and JavaScript",
            "post_excerpt": "Learn how to make a button that has a ripple effect when you click it. We will use HTML, SASS and JavaScript.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "ripple-button-with-html-sass-and-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/ripple-button-with-html-sass-and-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Tabs with HTML, SASS, and JS",
        "description": "Learn how to make functional tabs for your website with HTML, Sass, and JavaScript.",
        "slug": "tabs-with-html-sass-and-js",
        "raw_content": "## Idea\r\n\r\nThis Tutorial will make functional tabs with HTML, SASS, and JavaScript. We will make it so you can add the CSS and js file to the page and apply some classes to nested divs for it to work. We will also try to make it semantically correct by adding ARIA Attributes to the formal elements. However, don't take this too seriously because I am unsure if I did it correctly. Still, it is always essential to give your HTML meaning.\r\n\r\nEither way, Let us get started!\r\n\r\n## HTML of the Tabs\r\n\r\nThe Potential structure of such tabs could look something like this. We first would have a div with the class `tabs` and then two divs inside, one with the class `tab-registers` and one with the class `tab-bodies.` The First button inside `tab-register` is connected to the first item in the `tab-bodies` element. We can optionally give one of the buttons the class `active-tab` so it starts as the active tab.\r\n\r\n```HTML\r\n<div class=\"tabs\">\r\n    <div class=\"tab-registers\">\r\n        <button>Tab 1<\/button>\r\n        <button>Tab 2<\/button>\r\n        <button>Tab 2<\/button>\r\n    <\/div>\r\n    <div class=\"tab-bodies\">\r\n        <div>\r\n\t\t\t...\r\n        <\/div>\r\n        <div>\r\n\t\t\t...\r\n        <\/div>\r\n        <div>\r\n            ...\r\n        <\/div>\r\n    <\/div>\r\n<\/div>\r\n```\r\n\r\n## JavaScript of the Tabs\r\n\r\nWe start by getting an HTML collection of all elements with the `tabs` class, and we loop over it after we have turned it into a list using `Array. from(list_like)`. The call back for the loop takes the element itself and the Index. We will need the Index to identify this tab group uniquely.\r\n\r\n```js\r\nArray.from(document.querySelectorAll('.tabs')).forEach((tab_container, TabID) => {\r\n    ...\r\n})\r\n```\r\n\r\nThen we save some of the essential elements to variables, namely the `tabs-registers` and `tab-bodies` elements.\r\n\r\n```js\r\n    const registers = tab_container.querySelector('.tab-registers');\r\n    const bodies = tab_container.querySelector('.tab-bodies');\r\n\r\n```\r\n\r\nContinuing, we get the active register, but because it could be undefined, we set it to the first button if that's the case. Either way, we add the class `active-tab` to the element.\r\n\r\n```js\r\n    let activeRegister = registers.querySelector('.active-tab');\r\n    activeRegister = activeRegister ? activeRegister : registers.children[0]\r\n    activeRegister.classList.add('active-tab')\r\n```\r\n\r\nAfter that, we call the `changeBody()` function, which will, as it says, hide all bodies except the one corresponding to the current register\/tab. We also call this function every time the tab is changed.\r\n\r\n```js\r\n\tchangeBody()\r\n```\r\n\r\nNow we also loop over all the elements directly inside the registers container. These are the buttons\/Tabs. We then set the aria-controls attribute, which says what other element is controlled by this one. We also have to set an id for the corresponding body. We use the tab id and the Index of the tab button to build a unique id.\r\n\r\nThen we add an event listener to the button, remove the active tab class from the current register, and replace the content of the variable with the new current register, so we also need to add the active tab class. Last, we call the `changeBody()` function.\r\n\r\n```js\r\n    Array.from(registers.children).forEach((el, i) => {\r\n        el.setAttribute('aria-controls', `${TabID}_${i}`)\r\n        bodies.children[i]?.setAttribute('id', `${TabID}_${i}`)\r\n        \r\n        el.addEventListener('click', (ev) => {\r\n            activeRegister.classList.remove('active-tab')\r\n            activeRegister = el;\r\n            activeRegister.classList.add('active-tab')\r\n            changeBody()\r\n        })\r\n    })\r\n```\r\n\r\nNow to the `changeBody()` function. In it, we once again loop over the registers children. We also get the Index of each iteration. Then if the body at that Index exists, we decide whether its display property is block or none depending on the current register. We do this check so there can be more registers than bodies. Then we also set the aria-expanded attribute for the button, which tells the user if the content of this panel or button that leads to a panel is expanded or not.\r\n\r\n```js\r\nfunction changeBody() {\r\n        Array.from(registers.children).forEach((el, i) => {\r\n            if (bodies.children[i]) {\r\n                bodies.children[i].style.display = el == activeRegister ? 'block' : 'none'\r\n            }\r\n\r\n            el.setAttribute('aria-expanded', el == activeRegister ? 'true' : 'false')\r\n        })\r\n    }\r\n```\r\n\r\n## Sass of the Tabs\r\n\r\nBelow you see the sass\/CSS code of the program. We won't go into detail.\r\n\r\n```sass\r\n.tabs \r\n    font-family: 'Lucida Sans', sans-serif\r\n    font-size: 20px\r\n\r\n\r\n    .tab-registers \r\n        display: flex\r\n        background-color: RGB(255, 255, 255)\r\n\r\n\r\n    button \r\n        padding: 0.5em\r\n        background-color: RGB(255, 255, 255)\r\n        border: none\r\n        font: inherit\r\n\r\n\r\n    .tab-registers button:hover \r\n        cursor: pointer\r\n\r\n\r\n    .tab-bodies \r\n        padding: 0.5em\r\n        background-color: RGB(235, 235, 235)\r\n        flex-grow: 1\r\n        overflow-y: auto\r\n\r\n\r\n    button.active-tab \r\n            background-color: rgb(235, 235, 235)\r\n\r\n```\r\n\r\n## Showcase\r\n\r\n[Visit the Demo](https:\/\/articles.maximmaeder.com\/a\/Tabs\/)\r\n[Visit the Repository](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2015%20-%20Tabs%20with%20HTML,%20SASS%20and%20JS)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created functional tabs using! See how you can add more features to this program, such as dynamically adding and deleting tabs.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!",
        "featured_image": "015 - Tabs with HTML, SASS and JS\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 668,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>This Tutorial will make functional tabs with HTML, SASS, and JavaScript. We will make it so you can add the CSS and js file to the page and apply some classes to nested divs for it to work. We will also try to make it semantically correct by adding ARIA Attributes to the formal elements. However, don't take this too seriously because I am unsure if I did it correctly. Still, it is always essential to give your HTML meaning.<\/p>\n<p>Either way, Let us get started!<\/p>\n<h2>HTML of the Tabs<\/h2>\n<p>The Potential structure of such tabs could look something like this. We first would have a div with the class <code>tabs<\/code> and then two divs inside, one with the class <code>tab-registers<\/code> and one with the class <code>tab-bodies.<\/code> The First button inside <code>tab-register<\/code> is connected to the first item in the <code>tab-bodies<\/code> element. We can optionally give one of the buttons the class <code>active-tab<\/code> so it starts as the active tab.<\/p>\n<pre><code class=\"language-HTML\">&lt;div class=\"tabs\"&gt;\n    &lt;div class=\"tab-registers\"&gt;\n        &lt;button&gt;Tab 1&lt;\/button&gt;\n        &lt;button&gt;Tab 2&lt;\/button&gt;\n        &lt;button&gt;Tab 2&lt;\/button&gt;\n    &lt;\/div&gt;\n    &lt;div class=\"tab-bodies\"&gt;\n        &lt;div&gt;\n            ...\n        &lt;\/div&gt;\n        &lt;div&gt;\n            ...\n        &lt;\/div&gt;\n        &lt;div&gt;\n            ...\n        &lt;\/div&gt;\n    &lt;\/div&gt;\n&lt;\/div&gt;<\/code><\/pre>\n<h2>JavaScript of the Tabs<\/h2>\n<p>We start by getting an HTML collection of all elements with the <code>tabs<\/code> class, and we loop over it after we have turned it into a list using <code>Array. from(list_like)<\/code>. The call back for the loop takes the element itself and the Index. We will need the Index to identify this tab group uniquely.<\/p>\n<pre><code class=\"language-js\">Array.from(document.querySelectorAll('.tabs')).forEach((tab_container, TabID) =&gt; {\n    ...\n})<\/code><\/pre>\n<p>Then we save some of the essential elements to variables, namely the <code>tabs-registers<\/code> and <code>tab-bodies<\/code> elements.<\/p>\n<pre><code class=\"language-js\">    const registers = tab_container.querySelector('.tab-registers');\n    const bodies = tab_container.querySelector('.tab-bodies');\n<\/code><\/pre>\n<p>Continuing, we get the active register, but because it could be undefined, we set it to the first button if that's the case. Either way, we add the class <code>active-tab<\/code> to the element.<\/p>\n<pre><code class=\"language-js\">    let activeRegister = registers.querySelector('.active-tab');\n    activeRegister = activeRegister ? activeRegister : registers.children[0]\n    activeRegister.classList.add('active-tab')<\/code><\/pre>\n<p>After that, we call the <code>changeBody()<\/code> function, which will, as it says, hide all bodies except the one corresponding to the current register\/tab. We also call this function every time the tab is changed.<\/p>\n<pre><code class=\"language-js\">    changeBody()<\/code><\/pre>\n<p>Now we also loop over all the elements directly inside the registers container. These are the buttons\/Tabs. We then set the aria-controls attribute, which says what other element is controlled by this one. We also have to set an id for the corresponding body. We use the tab id and the Index of the tab button to build a unique id.<\/p>\n<p>Then we add an event listener to the button, remove the active tab class from the current register, and replace the content of the variable with the new current register, so we also need to add the active tab class. Last, we call the <code>changeBody()<\/code> function.<\/p>\n<pre><code class=\"language-js\">    Array.from(registers.children).forEach((el, i) =&gt; {\n        el.setAttribute('aria-controls', `${TabID}_${i}`)\n        bodies.children[i]?.setAttribute('id', `${TabID}_${i}`)\n\n        el.addEventListener('click', (ev) =&gt; {\n            activeRegister.classList.remove('active-tab')\n            activeRegister = el;\n            activeRegister.classList.add('active-tab')\n            changeBody()\n        })\n    })<\/code><\/pre>\n<p>Now to the <code>changeBody()<\/code> function. In it, we once again loop over the registers children. We also get the Index of each iteration. Then if the body at that Index exists, we decide whether its display property is block or none depending on the current register. We do this check so there can be more registers than bodies. Then we also set the aria-expanded attribute for the button, which tells the user if the content of this panel or button that leads to a panel is expanded or not.<\/p>\n<pre><code class=\"language-js\">function changeBody() {\n        Array.from(registers.children).forEach((el, i) =&gt; {\n            if (bodies.children[i]) {\n                bodies.children[i].style.display = el == activeRegister ? 'block' : 'none'\n            }\n\n            el.setAttribute('aria-expanded', el == activeRegister ? 'true' : 'false')\n        })\n    }<\/code><\/pre>\n<h2>Sass of the Tabs<\/h2>\n<p>Below you see the sass\/CSS code of the program. We won't go into detail.<\/p>\n<pre><code class=\"language-sass\">.tabs \n    font-family: 'Lucida Sans', sans-serif\n    font-size: 20px\n\n    .tab-registers \n        display: flex\n        background-color: RGB(255, 255, 255)\n\n    button \n        padding: 0.5em\n        background-color: RGB(255, 255, 255)\n        border: none\n        font: inherit\n\n    .tab-registers button:hover \n        cursor: pointer\n\n    .tab-bodies \n        padding: 0.5em\n        background-color: RGB(235, 235, 235)\n        flex-grow: 1\n        overflow-y: auto\n\n    button.active-tab \n            background-color: rgb(235, 235, 235)\n<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/Tabs\/\">Visit the Demo<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2015%20-%20Tabs%20with%20HTML,%20SASS%20and%20JS\">Visit the Repository<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created functional tabs using! See how you can add more features to this program, such as dynamically adding and deleting tabs.<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Tabs with HTML, SASS, and JS",
            "post_excerpt": "Learn how to make functional tabs for your website with HTML, Sass, and JavaScript.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "tabs-with-html-sass-and-js",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/tabs-with-html-sass-and-js\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Display JSON with HTML, CSS, and Javascript",
        "description": "Learn how to display nested JavaScript Objects the same way the console in the developer tools does.",
        "slug": "display-json-with-html-css-and-javascript",
        "raw_content": "## Idea\r\nThe most used tool by any Web Developer would be probably the *Dev Tools* that are built into the browser for os programmers to analyze the HTML and CSS of our pages. This Tool also shows us the outputs by `console.log` and if the output is more complex than a string or number. It will show a tree view of the object where keys are highlighted by their data type. Below you see the console of the browser Microsoft edge where the window object has been printed out. As you see we could further expand this view into the nested object it has, and today we will try to implement this in HTML with JavaScript and CSS. We will make a recursive function that will make the HTML of any given object. This could be useful for debugging purposes or for the sake of showing how to display any tree structure.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/devtools.png)\r\n\r\nLet us get started!\r\n\r\n## JavaScript Code\r\n\r\nLet us start with the JavaScript Code, which will just entail a function that will call itself for each branch of a tree or object.\r\n\r\n### Arguments\r\n\r\nThe function is set up to have three arguments. The first one is the `root`, which means the root element where the content is filled in. For each function call, this root will change so it is deeper into the tree. The `data` will be the `object` or `array` that should be displayed. And lastly, the `depth` just registers how deep the function call is into the object. This is needed for two reasons; Maybe we want to set a max width and maybe the behavior should be special for the first layer.\r\n\r\n```js\r\nfunction renderJson({root = '', data, depth = 0} = {}) {\r\n\t...\r\n}\r\n```\r\n\r\nHere we use object destructuring so we can have parameters for this function that can be given in any order. We also set a default Value of `{}`.\r\n\r\n### Setting up the Highest Root Element\r\n\r\nNow inside the function, we first check if the depth is zero and if the root parameter is empty. This would mean that we are at the start of our object, so we have to create the root first. It simply consists of a `ul` element inside a `pre`, we then set the root to be the ul element.\r\n\r\n```js\r\n\tif (depth == 0 && root == '') {\r\n        const pre = document.createElement('pre')\r\n        const ul = document.createElement('ul')\r\n\r\n        pre.appendChild(ul)\r\n        root = ul\r\n        document.body.appendChild(pre)\r\n    }\r\n    else {\r\n        root.innerHTML = ''\r\n    }\r\n```\r\n\r\n### Looping over the Properties\r\n\r\nThen we loop over the properties of the object that sits inside the data variables. In the loop, we check if the current value at the specified key is an object and not null. So inside here we have code that handles nested objects and arrays, but if that's not the case this means its a primitive so we can just display it.\r\n\r\n```js\r\nfor (d in data) {\r\n\tif (typeof data[d] == 'object' && data[d] != null) { \/* Handling Objects *\/ }\r\n\telse { \/* Handling Primitive Values *\/ }\r\n}\r\n```\r\n\r\nLet's first go over the primitives inside the else statement, because we simply show the value. So we first get the type of data at the key. Then we create a `li` element, that will hold this value. The Display value will hold the actual displayed value. Then we check if the type is `object` with a switch case. `Null` is the only object that is displayed that is why we have to do it this way. If it's not null we simply put in the value from the data.\r\n\r\n```js\r\nlet currentType = typeof data[d]\r\nlet el = document.createElement('li')\r\nlet display = null\r\n\r\nswitch (currentType) {\r\n    case 'object':\r\n        display = 'null'\r\n        break;\r\n    default:\r\n        display = data[d]\r\n        break;\r\n}\r\n```\r\n\r\n### Showing Primitives\r\n\r\nThen we create three span elements. the first one holds the key and the second one holds the value. The third one holds additional info about the value like its length, boolean value, and its type. We add the content and a class to each one of these spans. Then we also append all these elements at the correct spots.\r\n\r\n```js\r\nlet titleSpan = document.createElement('span')\r\nlet contentSpan = document.createElement('span')\r\nlet detailsContentSpan = document.createElement('span')\r\n\r\ntitleSpan.innerText = `${d}: `\r\ntitleSpan.classList.add('titleStyle')\r\n\r\ncontentSpan.innerText = display\r\ncontentSpan.classList.add(currentType)\r\n\r\ndetailsContentSpan.innerText = `   Type: ${currentType}; Length: ${display?.length}; Boolean: ${Boolean(display)}`\r\ndetailsContentSpan.classList.add('moreDetails')\r\n\r\nel.appendChild(titleSpan)\r\nel.appendChild(contentSpan)\r\nel.appendChild(detailsContentSpan)\r\n\r\nroot.appendChild(el)\r\n```\r\n\r\n### Showing Objects\r\n\r\nNow, what if the value is another Object or Array? In that case, we make a detailed element that can be expanded to show the content. The details tag also needs a summary tag that holds the title of the content, so we also make that.\r\n\r\n```js\r\nconst nestedData = data[d]\r\n\r\nconst detailsElement = document.createElement('details')\r\nconst summaryEl = document.createElement('summary')\r\nsummaryEl.classList.add('titleStyle')\r\n\r\ndetailsElement.appendChild(summaryEl)\r\n```\r\n\r\nThen we find out if the object is an Array. If that's the case we show its length. This whole information will be shown behind the object in paranthases.\r\n\r\n```js\r\nlet appendedString = Array.isArray(data[d]) ? `Array, ${data[d].length}` : 'Object'\r\n\r\nsummaryEl.innerHTML = `${d} <span class=\"titleStyleDescription\">(${appendedString})<span><\/summary>`\r\n```\r\n\r\nThen we create a new root element that is a `ul`. We append this to the details element.\r\n\r\n```js\r\nconst newRoot = document.createElement('ul')\r\n\r\ndetailsElement.appendChild(newRoot)\r\n\r\nroot.appendChild(detailsElement)\r\n```\r\n\r\nNow we haven't actually inserted the nested content into the new lower root. For optimization purposes, we only insert the content if the user opens the details element. So we connect the click event of the summary element, and we check if the details element is open or closed. Now it is closed we clear it but if it is open we call this function itself with the new root and the nested data. This can go on as deep as possible.\r\n\r\n```js\r\nsummaryEl.addEventListener('click', () => {\r\n    if ( !detailsElement.hasAttribute('open') ) {\r\n        renderJson({\r\n                root: newRoot,\r\n                data: nestedData,\r\n                depth: depth + 1\r\n            }) \r\n        clicked = true\r\n    }\r\n    else {\r\n        newRoot.innerHTML = ''\r\n    }\r\n})\r\n```\r\n\r\nAnd that's it a recursive function allows us to show objects. We could simply call the function with any given object and it will be shown.\r\n\r\n```js\r\nrenderJson({data: document})\r\n```\r\n\r\n## CSS Code\r\n\r\nNow we can also style the displayed objects. We define some variables inside the root element and we change them if the user has dark mode enabled. We can do this with `@media (prefers-color-scheme: dark)`.\r\n\r\n```js\r\n:root {\r\n    --bg: rgb(255, 255, 255);\r\n    --titleStyle: rgb(121, 121, 121);\r\n    --moreDetails: rgb(200, 200, 200);\r\n    --string: orange;\r\n    --number: rgb(0, 76, 255);\r\n    --boolean: rgb(191, 0, 255);\r\n    --function: rgb(109, 176, 137);\r\n    --objectNull: rgb(176, 142, 109);\r\n    --undefined: rgb(176, 142, 109);\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n    :root {\r\n        --bg: rgb(40, 40, 40);\r\n        --titleStyle: rgb(170, 170, 170);\r\n        --moreDetails: rgb(140, 140, 140);\r\n        --string: rgb(223, 177, 93);\r\n        --number: rgb(119, 152, 229);\r\n        --boolean: rgb(206, 142, 227);\r\n        --function: rgb(109, 176, 137);\r\n        --objectNull: rgb(176, 142, 109);\r\n        --undefined: rgb(176, 142, 109);\r\n    }\r\n}\r\n```\r\n\r\nNow we also apply some styles to the body, any `ul` and `pre`'s. We also hide the spans that show more details about the primitive by default so it only shows when the user hovers over its li elment.\r\n\r\n```css\r\nbody {\r\n    margin: 0\r\n}\r\n\r\nul {\r\n    list-style-type: none;\r\n    padding-inline-start: 20px;\r\n}\r\n\r\npre {\r\n    padding: 1em;\r\n    margin: 0;\r\n    background-color: var(--bg)\r\n}\r\n\r\nli:hover .moreDetails {\r\n    display: unset\r\n}\r\n\r\n.moreDetails {\r\n    display: none;\r\n    color: var(--moreDetails)\r\n}\r\n```\r\n\r\nWe then just apply some styles to the different data types that can be encountered in such an object.\r\n\r\n```css\r\n.titleStyle {\r\n    color: var(--titleStyle)\r\n}\r\n.titleStyleDescription {\r\n    color: var(--moreDetails)\r\n}\r\n\r\n\r\n.string {color: var(--string);}\r\n.string::before,.string::after {content: '\"';color: var(--string)}\r\n.number {color: var(--number);}\r\n.boolean {color: var(--boolean)}\r\n.function {color: var(--function)}\r\n.object {color: var(--objectNull)}\r\n.undefined {color: var(--undefined)}\r\n```\r\n\r\n## Showcase\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/json.gif)\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/Display%20Objects%20Recursively%20with%20JavaScript\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2016%20-%20Display%20Objects%20Recursively%20with%20JavaScript)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully displayed JSON using JavaScript code!\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "016 - Display Objects Recursively with JavaScript\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 670,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>The most used tool by any Web Developer would be probably the <em>Dev Tools<\/em> that are built into the browser for os programmers to analyze the HTML and CSS of our pages. This Tool also shows us the outputs by <code>console.log<\/code> and if the output is more complex than a string or number. It will show a tree view of the object where keys are highlighted by their data type. Below you see the console of the browser Microsoft edge where the window object has been printed out. As you see we could further expand this view into the nested object it has, and today we will try to implement this in HTML with JavaScript and CSS. We will make a recursive function that will make the HTML of any given object. This could be useful for debugging purposes or for the sake of showing how to display any tree structure.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/devtools.png\" alt=\"enter image description here\" \/><\/p>\n<p>Let us get started!<\/p>\n<h2>JavaScript Code<\/h2>\n<p>Let us start with the JavaScript Code, which will just entail a function that will call itself for each branch of a tree or object.<\/p>\n<h3>Arguments<\/h3>\n<p>The function is set up to have three arguments. The first one is the <code>root<\/code>, which means the root element where the content is filled in. For each function call, this root will change so it is deeper into the tree. The <code>data<\/code> will be the <code>object<\/code> or <code>array<\/code> that should be displayed. And lastly, the <code>depth<\/code> just registers how deep the function call is into the object. This is needed for two reasons; Maybe we want to set a max width and maybe the behavior should be special for the first layer.<\/p>\n<pre><code class=\"language-js\">function renderJson({root = '', data, depth = 0} = {}) {\n    ...\n}<\/code><\/pre>\n<p>Here we use object destructuring so we can have parameters for this function that can be given in any order. We also set a default Value of <code>{}<\/code>.<\/p>\n<h3>Setting up the Highest Root Element<\/h3>\n<p>Now inside the function, we first check if the depth is zero and if the root parameter is empty. This would mean that we are at the start of our object, so we have to create the root first. It simply consists of a <code>ul<\/code> element inside a <code>pre<\/code>, we then set the root to be the ul element.<\/p>\n<pre><code class=\"language-js\">    if (depth == 0 &amp;&amp; root == '') {\n        const pre = document.createElement('pre')\n        const ul = document.createElement('ul')\n\n        pre.appendChild(ul)\n        root = ul\n        document.body.appendChild(pre)\n    }\n    else {\n        root.innerHTML = ''\n    }<\/code><\/pre>\n<h3>Looping over the Properties<\/h3>\n<p>Then we loop over the properties of the object that sits inside the data variables. In the loop, we check if the current value at the specified key is an object and not null. So inside here we have code that handles nested objects and arrays, but if that's not the case this means its a primitive so we can just display it.<\/p>\n<pre><code class=\"language-js\">for (d in data) {\n    if (typeof data[d] == 'object' &amp;&amp; data[d] != null) { \/* Handling Objects *\/ }\n    else { \/* Handling Primitive Values *\/ }\n}<\/code><\/pre>\n<p>Let's first go over the primitives inside the else statement, because we simply show the value. So we first get the type of data at the key. Then we create a <code>li<\/code> element, that will hold this value. The Display value will hold the actual displayed value. Then we check if the type is <code>object<\/code> with a switch case. <code>Null<\/code> is the only object that is displayed that is why we have to do it this way. If it's not null we simply put in the value from the data.<\/p>\n<pre><code class=\"language-js\">let currentType = typeof data[d]\nlet el = document.createElement('li')\nlet display = null\n\nswitch (currentType) {\n    case 'object':\n        display = 'null'\n        break;\n    default:\n        display = data[d]\n        break;\n}<\/code><\/pre>\n<h3>Showing Primitives<\/h3>\n<p>Then we create three span elements. the first one holds the key and the second one holds the value. The third one holds additional info about the value like its length, boolean value, and its type. We add the content and a class to each one of these spans. Then we also append all these elements at the correct spots.<\/p>\n<pre><code class=\"language-js\">let titleSpan = document.createElement('span')\nlet contentSpan = document.createElement('span')\nlet detailsContentSpan = document.createElement('span')\n\ntitleSpan.innerText = `${d}: `\ntitleSpan.classList.add('titleStyle')\n\ncontentSpan.innerText = display\ncontentSpan.classList.add(currentType)\n\ndetailsContentSpan.innerText = `   Type: ${currentType}; Length: ${display?.length}; Boolean: ${Boolean(display)}`\ndetailsContentSpan.classList.add('moreDetails')\n\nel.appendChild(titleSpan)\nel.appendChild(contentSpan)\nel.appendChild(detailsContentSpan)\n\nroot.appendChild(el)<\/code><\/pre>\n<h3>Showing Objects<\/h3>\n<p>Now, what if the value is another Object or Array? In that case, we make a detailed element that can be expanded to show the content. The details tag also needs a summary tag that holds the title of the content, so we also make that.<\/p>\n<pre><code class=\"language-js\">const nestedData = data[d]\n\nconst detailsElement = document.createElement('details')\nconst summaryEl = document.createElement('summary')\nsummaryEl.classList.add('titleStyle')\n\ndetailsElement.appendChild(summaryEl)<\/code><\/pre>\n<p>Then we find out if the object is an Array. If that's the case we show its length. This whole information will be shown behind the object in paranthases.<\/p>\n<pre><code class=\"language-js\">let appendedString = Array.isArray(data[d]) ? `Array, ${data[d].length}` : 'Object'\n\nsummaryEl.innerHTML = `${d} &lt;span class=\"titleStyleDescription\"&gt;(${appendedString})&lt;span&gt;&lt;\/summary&gt;`<\/code><\/pre>\n<p>Then we create a new root element that is a <code>ul<\/code>. We append this to the details element.<\/p>\n<pre><code class=\"language-js\">const newRoot = document.createElement('ul')\n\ndetailsElement.appendChild(newRoot)\n\nroot.appendChild(detailsElement)<\/code><\/pre>\n<p>Now we haven't actually inserted the nested content into the new lower root. For optimization purposes, we only insert the content if the user opens the details element. So we connect the click event of the summary element, and we check if the details element is open or closed. Now it is closed we clear it but if it is open we call this function itself with the new root and the nested data. This can go on as deep as possible.<\/p>\n<pre><code class=\"language-js\">summaryEl.addEventListener('click', () =&gt; {\n    if ( !detailsElement.hasAttribute('open') ) {\n        renderJson({\n                root: newRoot,\n                data: nestedData,\n                depth: depth + 1\n            }) \n        clicked = true\n    }\n    else {\n        newRoot.innerHTML = ''\n    }\n})<\/code><\/pre>\n<p>And that's it a recursive function allows us to show objects. We could simply call the function with any given object and it will be shown.<\/p>\n<pre><code class=\"language-js\">renderJson({data: document})<\/code><\/pre>\n<h2>CSS Code<\/h2>\n<p>Now we can also style the displayed objects. We define some variables inside the root element and we change them if the user has dark mode enabled. We can do this with <code>@media (prefers-color-scheme: dark)<\/code>.<\/p>\n<pre><code class=\"language-js\">:root {\n    --bg: rgb(255, 255, 255);\n    --titleStyle: rgb(121, 121, 121);\n    --moreDetails: rgb(200, 200, 200);\n    --string: orange;\n    --number: rgb(0, 76, 255);\n    --boolean: rgb(191, 0, 255);\n    --function: rgb(109, 176, 137);\n    --objectNull: rgb(176, 142, 109);\n    --undefined: rgb(176, 142, 109);\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --bg: rgb(40, 40, 40);\n        --titleStyle: rgb(170, 170, 170);\n        --moreDetails: rgb(140, 140, 140);\n        --string: rgb(223, 177, 93);\n        --number: rgb(119, 152, 229);\n        --boolean: rgb(206, 142, 227);\n        --function: rgb(109, 176, 137);\n        --objectNull: rgb(176, 142, 109);\n        --undefined: rgb(176, 142, 109);\n    }\n}<\/code><\/pre>\n<p>Now we also apply some styles to the body, any <code>ul<\/code> and <code>pre<\/code>'s. We also hide the spans that show more details about the primitive by default so it only shows when the user hovers over its li elment.<\/p>\n<pre><code class=\"language-css\">body {\n    margin: 0\n}\n\nul {\n    list-style-type: none;\n    padding-inline-start: 20px;\n}\n\npre {\n    padding: 1em;\n    margin: 0;\n    background-color: var(--bg)\n}\n\nli:hover .moreDetails {\n    display: unset\n}\n\n.moreDetails {\n    display: none;\n    color: var(--moreDetails)\n}<\/code><\/pre>\n<p>We then just apply some styles to the different data types that can be encountered in such an object.<\/p>\n<pre><code class=\"language-css\">.titleStyle {\n    color: var(--titleStyle)\n}\n.titleStyleDescription {\n    color: var(--moreDetails)\n}\n\n.string {color: var(--string);}\n.string::before,.string::after {content: '\"';color: var(--string)}\n.number {color: var(--number);}\n.boolean {color: var(--boolean)}\n.function {color: var(--function)}\n.object {color: var(--objectNull)}\n.undefined {color: var(--undefined)}<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/08\/json.gif\" alt=\"enter image description here\" \/><\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/Display%20Objects%20Recursively%20with%20JavaScript\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2016%20-%20Display%20Objects%20Recursively%20with%20JavaScript\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully displayed JSON using JavaScript code!<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Display JSON with HTML, CSS, and Javascript",
            "post_excerpt": "Learn how to display nested JavaScript Objects the same way the console in the developer tools does.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "display-json-with-html-css-and-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/display-json-with-html-css-and-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Markdown Inputs with HTML, CSS and JavaScript",
        "description": "Learn how to make input and textarea tags that allow and show markdown.",
        "slug": "markdown-inputs-with-html-css-and-javascript",
        "raw_content": "## Idea\r\n\r\nIn this Tutorial, we will make input areas that allow simple markdown markup to show itself when the user is not currently focused on the input itself. Visit the [Demo](https:\/\/articles.maximmaeder.com\/a\/Markdown%20Input\/) to get a clearer Idea of what we are trying to accomplish here. Input areas like these are used in [Trello](http:\/\/trello.com\/) and other software by [Atlassian](https:\/\/www.atlassian.com\/software\/jira). One could say this approach is somewhere between only unformatted text and a full Rich Text Editor.\r\n\r\nLet us get into it!\r\n\r\n## HTML Structure\r\n\r\nLet's first think about what the HTML for such an input or textarea element should look like. In this Tutorial, we will do it as you see in the Code below. We have a wrapper `div` with the class `mdEdit,` and inside, we have one div that will hold the formatted text and either an input element or a textarea. We will then make it, so only one of those two items is visible at any time. \r\n\r\nLet's keep this structure in mind for the JavaScript and CSS later in the Tutorial.\r\n\r\n```HTML\r\n<div class=\"mdEdit\">\r\n  <div><\/div>\r\n  <input type=\"text\" value=\"Initial Value\"> \r\n<\/div>\r\n```\r\n\r\n## JavaScript\r\n\r\nThe script will handle formatting the text and toggling focus for the input elements. We make it so the page can have any number of these special inputs. That's why we first loop over a list of all the `.mdEdit` wrapper elements. We have to first transform the HTMLElementCollection to an Array with `Array.from()`.\r\n\r\n```js\r\nArray.from(document.querySelectorAll('.mdEdit')).forEach((el) => {\r\n\t...\r\n}\r\n```\r\n\r\nInside the loop for each element, we first set a title that explains a little bit of the functionality to the user, and we also set `tabindex` to 0, so the user can focus on this element with the tab key.\r\n\r\n```js\r\nel.setAttribute('title', 'Click to change Markdown content')\r\nel.setAttribute('tabindex', '0')\r\n```\r\n\r\nThen we get the two elements inside the wrapper: The Edit Area and the Display Area. For the display, this is easy, but for the edit, we first check if the querySelector for an `input` element yields a result. If that's the case, we get that; if not, we search for a `textarea`.\r\n\r\n```js\r\nconst display = el.querySelector('div');\r\nconst editEl = el.querySelector('input') ? el.querySelector('input') : el.querySelector('textarea');\r\n```\r\n\r\nThen we check if the tag is a `textarea`. We do this with the `tagName` Attribute of any element. This value is, for some reason, capitalized. Anyway, if that's the case, we set the wrapper's height to 300 Pixels.\r\n\r\n```js\r\nif (editEl.tagName == 'TEXTAREA') {\r\n    el.style.height = '300px';\r\n}\r\n```\r\n\r\nThen we connect the change event of the edit element to a function called `applyRegex` that will handle formatting the text. We also call this function after that, so the text is formatted for the first time.\r\n\r\n```js\r\neditEl.addEventListener('change', applyRegex)\r\napplyRegex()\r\n```\r\n\r\nAfter that, we also add an event listener for the click event to the wrapper that will set focus onto the edit element.\r\n\r\n```js\r\nel.addEventListener('click', () => {\r\n    editEl.focus();\r\n})\r\n```\r\n\r\nAnd now, the last event listener is for the whole document and the key down event. We make it so if the user presses enter while focused on the wrapper; we also focus on the editor. To do this, we use the `activeElement` property from the document that will, as its name suggests, return the currently active element. We also make it, so the focus is lost if the user presses escape. To achieve this, we use the `blur()` method.\r\n\r\n```js\r\ndocument.addEventListener('keydown, (ev) => {\r\n    if (ev.key == 'Enter' && document.activeElement == el) {\r\n        editEl.focus()\r\n    } else if (ev.key == 'Escape' && document.activeElement == editEl) {\r\n        document.activeElement.blur()\r\n    }\r\n})\r\n```\r\n\r\nLet's get to the `applyRegex` function. In this case, we parse the text ourselves, but maybe it's better to use a pre-made parser like [Showdown](https:\/\/github.com\/showdownjs\/showdown). Either way, we start by getting the value from the input element with the `value` attribute, and we save the text to a variable.\r\n\r\n```js\r\nfunction applyRegex() {\r\n\tlet parsed = editEl.value\r\n}\r\n```\r\n\r\nThen we once again check if we are dealing with a textarea. If that is the case, we replace lines starting with `#` with `h*` tags. We do all six header tags in reverse order. Here we use the `multiline` modifier and the line start character `^`. After that, we check for substrings like this `![Img name](url_to_image)` that we will replace with images, placeholders with `$` come in handy here. We do the same thing with links only difference is that they don't start with a `!`.\r\n\r\n```js\r\nif (editEl.tagName == 'TEXTAREA') {\r\n    parsed = parsed.replace(\/^###### (.*)\/gm, '<h6>$1<\/h6>')\r\n    parsed = parsed.replace(\/^##### (.*)\/gm, '<h5>$1<\/h5>')\r\n    parsed = parsed.replace(\/^#### (.*)\/gm, '<h4>$1<\/h4>')\r\n    parsed = parsed.replace(\/^### (.*)\/gm, '<h3>$1<\/h3>')\r\n    parsed = parsed.replace(\/^## (.*)\/gm, '<h2>$1<\/h2>')\r\n    parsed = parsed.replace(\/^# (.*)\/gm, '<h1>$1<\/h1>')\r\n\r\n    parsed = parsed.replace(\/\\!\\[(.*?)\\]\\((.*?)\\)\/g, '<img src=\"$2\">')\r\n\r\n    parsed = parsed.replace(\/\\[(.*?)\\]\\((.*?)\\)\/g, '<a href=\"$2\" target=\"_blank\">$1<\/a>')\r\n}\r\n```\r\n\r\nNow for syntax that is replaced in textareas and input elements. These Patterns handle inline markdown markup like `**bold**`, `*\u00ectalic*`, `strikethrough`, and so on, so they all look similar. Remember that you can escape special characters in regex by putting a backslash in front of them.\r\n\r\n```js\r\nparsed = parsed.replace(\/\\*\\*(.*?)\\*\\*\/g, '<b>$1<\/b>')\r\nparsed = parsed.replace(\/\\*(.*?)\\*\/g, '<i>$1<\/i>')\r\nparsed = parsed.replace(\/_(.*?)_\/g, '<sub>$1<\/sub>')\r\nparsed = parsed.replace(\/~(.*?)~\/g, '<del>$1<\/del>')\r\nparsed = parsed.replace(\/\\^(.*?)\\^\/g, '<sup>$1<\/sup>')\r\nparsed = parsed.replace(\/`(.*?)`\/g, '<code>$1<\/code>')\r\n```\r\n\r\nLastly, we insert the parsed string into the display element.\r\n\r\n```js\r\ndisplayEl.innerHTML = parsed\r\n```\r\n\r\n## CSS\r\n\r\nOur program should work now, but it won't look nice, so let's also style it with CSS. We start by simply setting box-sizing to border-box so things are easier later, and we also put another font for the body.\r\n\r\n```CSS\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: 'Segoe UI', sans-serif;\r\n}\r\n```\r\n\r\nThen we set a height and a line height, among other things, for the wrapper element. And we change the outline if there is focus on or within the wrapper. We do this with `:focus-within`.\r\n\r\n```CSS\r\n.mdEdit {\r\n    height: 2em;\r\n    background-color: RGB(255, 255, 255);\r\n    outline: 2px ridge rgba(50, 104, 220, 0.2);\r\n    transition: outline 0.5s ease;\r\n    line-height: 2em;\r\n}\r\n\r\n.mdEdit:focus-within {\r\n    \/* box-shadow: 0 0 5px rgb(181, 181, 181); *\/\r\n    outline: 2px ridge rgba(50, 104, 220, 1);\r\n}\r\n```\r\n\r\nThen for the two elements inside the wrapper, we set the height to be 100%, we add a little bit of padding to the left and set overflow to auto so the display area won't flow out of the wrapper weirdly.\r\n\r\n```CSS\r\n.mdEdit>* {\r\n    height: 100%;\r\n    font-size: 1em;\r\n    padding: 0;\r\n    padding-left: 0.5em;\r\n    width: 100%;\r\n    overflow: auto;\r\n}\r\n```\r\n\r\nWe then add some styles to the elements inside the display element. `white-space: pre-wrap will make it so new lines also show in the HTML and aren't omitted.\r\n\r\n```CSS\r\n.mdEdit div * {\r\n    margin-bottom: 0.1em;\r\n    line-height: 0.5em;\r\n}\r\n\r\n.mdEdit div a{\r\n    color: rgba(50, 104, 220, 1);\r\n}\r\n\r\n.mdEdit div code {\r\n    color: rgba(50, 104, 220, 1);\r\n    background-color: rgb(240, 240, 240);\r\n    padding: 0.4em;\r\n}\r\n.mdEdit div img {\r\n    max-width: 95%;\r\n}\r\n\r\n.mdEdit div {\r\n    white-space: pre-wrap;\r\n}\r\n```\r\n\r\nNow we also need to make it so the input element won't show by default only when there is focus on the wrapper or itself. \r\n\r\n```CSS\r\n.mdEdit:focus-within>div {\r\n    display: none;\r\n}\r\n\r\n.mdEdit:focus-within :is(input, textarea) {\r\n    display: initial;\r\n}\r\n\r\n.mdEdit input,\r\n.mdEdit textarea {\r\n    display: none;\r\n    font: inherit;\r\n    border: none;\r\n    overflow-x: auto;\r\n    resize: none;\r\n}\r\n.mdEdit textarea {\r\n    font-family: consolas;\r\n}\r\n\r\n.mdEdit input:focus,\r\n.mdEdit textarea:focus {\r\n    border: none;\r\n    outline: none;\r\n}\r\n```\r\n\r\n## Showcase\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/09\/markdown-input.gif)\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/Markdown%20Input\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2017%20-%20Markdown%20Inputs)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created Markdown Inputs!\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "017 - Markdown Inputs\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 672,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>In this Tutorial, we will make input areas that allow simple markdown markup to show itself when the user is not currently focused on the input itself. Visit the <a href=\"https:\/\/articles.maximmaeder.com\/a\/Markdown%20Input\/\">Demo<\/a> to get a clearer Idea of what we are trying to accomplish here. Input areas like these are used in <a href=\"http:\/\/trello.com\/\">Trello<\/a> and other software by <a href=\"https:\/\/www.atlassian.com\/software\/jira\">Atlassian<\/a>. One could say this approach is somewhere between only unformatted text and a full Rich Text Editor.<\/p>\n<p>Let us get into it!<\/p>\n<h2>HTML Structure<\/h2>\n<p>Let's first think about what the HTML for such an input or textarea element should look like. In this Tutorial, we will do it as you see in the Code below. We have a wrapper <code>div<\/code> with the class <code>mdEdit,<\/code> and inside, we have one div that will hold the formatted text and either an input element or a textarea. We will then make it, so only one of those two items is visible at any time. <\/p>\n<p>Let's keep this structure in mind for the JavaScript and CSS later in the Tutorial.<\/p>\n<pre><code class=\"language-HTML\">&lt;div class=\"mdEdit\"&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;input type=\"text\" value=\"Initial Value\"&gt; \n&lt;\/div&gt;<\/code><\/pre>\n<h2>JavaScript<\/h2>\n<p>The script will handle formatting the text and toggling focus for the input elements. We make it so the page can have any number of these special inputs. That's why we first loop over a list of all the <code>.mdEdit<\/code> wrapper elements. We have to first transform the HTMLElementCollection to an Array with <code>Array.from()<\/code>.<\/p>\n<pre><code class=\"language-js\">Array.from(document.querySelectorAll('.mdEdit')).forEach((el) =&gt; {\n    ...\n}<\/code><\/pre>\n<p>Inside the loop for each element, we first set a title that explains a little bit of the functionality to the user, and we also set <code>tabindex<\/code> to 0, so the user can focus on this element with the tab key.<\/p>\n<pre><code class=\"language-js\">el.setAttribute('title', 'Click to change Markdown content')\nel.setAttribute('tabindex', '0')<\/code><\/pre>\n<p>Then we get the two elements inside the wrapper: The Edit Area and the Display Area. For the display, this is easy, but for the edit, we first check if the querySelector for an <code>input<\/code> element yields a result. If that's the case, we get that; if not, we search for a <code>textarea<\/code>.<\/p>\n<pre><code class=\"language-js\">const display = el.querySelector('div');\nconst editEl = el.querySelector('input') ? el.querySelector('input') : el.querySelector('textarea');<\/code><\/pre>\n<p>Then we check if the tag is a <code>textarea<\/code>. We do this with the <code>tagName<\/code> Attribute of any element. This value is, for some reason, capitalized. Anyway, if that's the case, we set the wrapper's height to 300 Pixels.<\/p>\n<pre><code class=\"language-js\">if (editEl.tagName == 'TEXTAREA') {\n    el.style.height = '300px';\n}<\/code><\/pre>\n<p>Then we connect the change event of the edit element to a function called <code>applyRegex<\/code> that will handle formatting the text. We also call this function after that, so the text is formatted for the first time.<\/p>\n<pre><code class=\"language-js\">editEl.addEventListener('change', applyRegex)\napplyRegex()<\/code><\/pre>\n<p>After that, we also add an event listener for the click event to the wrapper that will set focus onto the edit element.<\/p>\n<pre><code class=\"language-js\">el.addEventListener('click', () =&gt; {\n    editEl.focus();\n})<\/code><\/pre>\n<p>And now, the last event listener is for the whole document and the key down event. We make it so if the user presses enter while focused on the wrapper; we also focus on the editor. To do this, we use the <code>activeElement<\/code> property from the document that will, as its name suggests, return the currently active element. We also make it, so the focus is lost if the user presses escape. To achieve this, we use the <code>blur()<\/code> method.<\/p>\n<pre><code class=\"language-js\">document.addEventListener('keydown, (ev) =&gt; {\n    if (ev.key == 'Enter' &amp;&amp; document.activeElement == el) {\n        editEl.focus()\n    } else if (ev.key == 'Escape' &amp;&amp; document.activeElement == editEl) {\n        document.activeElement.blur()\n    }\n})<\/code><\/pre>\n<p>Let's get to the <code>applyRegex<\/code> function. In this case, we parse the text ourselves, but maybe it's better to use a pre-made parser like <a href=\"https:\/\/github.com\/showdownjs\/showdown\">Showdown<\/a>. Either way, we start by getting the value from the input element with the <code>value<\/code> attribute, and we save the text to a variable.<\/p>\n<pre><code class=\"language-js\">function applyRegex() {\n    let parsed = editEl.value\n}<\/code><\/pre>\n<p>Then we once again check if we are dealing with a textarea. If that is the case, we replace lines starting with <code>#<\/code> with <code>h*<\/code> tags. We do all six header tags in reverse order. Here we use the <code>multiline<\/code> modifier and the line start character <code>^<\/code>. After that, we check for substrings like this <code>![Img name](url_to_image)<\/code> that we will replace with images, placeholders with <code>$<\/code> come in handy here. We do the same thing with links only difference is that they don't start with a <code>!<\/code>.<\/p>\n<pre><code class=\"language-js\">if (editEl.tagName == 'TEXTAREA') {\n    parsed = parsed.replace(\/^###### (.*)\/gm, '&lt;h6&gt;$1&lt;\/h6&gt;')\n    parsed = parsed.replace(\/^##### (.*)\/gm, '&lt;h5&gt;$1&lt;\/h5&gt;')\n    parsed = parsed.replace(\/^#### (.*)\/gm, '&lt;h4&gt;$1&lt;\/h4&gt;')\n    parsed = parsed.replace(\/^### (.*)\/gm, '&lt;h3&gt;$1&lt;\/h3&gt;')\n    parsed = parsed.replace(\/^## (.*)\/gm, '&lt;h2&gt;$1&lt;\/h2&gt;')\n    parsed = parsed.replace(\/^# (.*)\/gm, '&lt;h1&gt;$1&lt;\/h1&gt;')\n\n    parsed = parsed.replace(\/![(.*?)]((.*?))\/g, '&lt;img src=\"$2\"&gt;')\n\n    parsed = parsed.replace(\/[(.*?)]((.*?))\/g, '&lt;a href=\"$2\" target=\"_blank\"&gt;$1&lt;\/a&gt;')\n}<\/code><\/pre>\n<p>Now for syntax that is replaced in textareas and input elements. These Patterns handle inline markdown markup like <code>**bold**<\/code>, <code>*\u00ectalic*<\/code>, <code>strikethrough<\/code>, and so on, so they all look similar. Remember that you can escape special characters in regex by putting a backslash in front of them.<\/p>\n<pre><code class=\"language-js\">parsed = parsed.replace(\/**(.*?)**\/g, '&lt;b&gt;$1&lt;\/b&gt;')\nparsed = parsed.replace(\/*(.*?)*\/g, '&lt;i&gt;$1&lt;\/i&gt;')\nparsed = parsed.replace(\/_(.*?)_\/g, '&lt;sub&gt;$1&lt;\/sub&gt;')\nparsed = parsed.replace(\/~(.*?)~\/g, '&lt;del&gt;$1&lt;\/del&gt;')\nparsed = parsed.replace(\/^(.*?)^\/g, '&lt;sup&gt;$1&lt;\/sup&gt;')\nparsed = parsed.replace(\/`(.*?)`\/g, '&lt;code&gt;$1&lt;\/code&gt;')<\/code><\/pre>\n<p>Lastly, we insert the parsed string into the display element.<\/p>\n<pre><code class=\"language-js\">displayEl.innerHTML = parsed<\/code><\/pre>\n<h2>CSS<\/h2>\n<p>Our program should work now, but it won't look nice, so let's also style it with CSS. We start by simply setting box-sizing to border-box so things are easier later, and we also put another font for the body.<\/p>\n<pre><code class=\"language-CSS\">* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', sans-serif;\n}<\/code><\/pre>\n<p>Then we set a height and a line height, among other things, for the wrapper element. And we change the outline if there is focus on or within the wrapper. We do this with <code>:focus-within<\/code>.<\/p>\n<pre><code class=\"language-CSS\">.mdEdit {\n    height: 2em;\n    background-color: RGB(255, 255, 255);\n    outline: 2px ridge rgba(50, 104, 220, 0.2);\n    transition: outline 0.5s ease;\n    line-height: 2em;\n}\n\n.mdEdit:focus-within {\n    \/* box-shadow: 0 0 5px rgb(181, 181, 181); *\/\n    outline: 2px ridge rgba(50, 104, 220, 1);\n}<\/code><\/pre>\n<p>Then for the two elements inside the wrapper, we set the height to be 100%, we add a little bit of padding to the left and set overflow to auto so the display area won't flow out of the wrapper weirdly.<\/p>\n<pre><code class=\"language-CSS\">.mdEdit&gt;* {\n    height: 100%;\n    font-size: 1em;\n    padding: 0;\n    padding-left: 0.5em;\n    width: 100%;\n    overflow: auto;\n}<\/code><\/pre>\n<p>We then add some styles to the elements inside the display element. `white-space: pre-wrap will make it so new lines also show in the HTML and aren't omitted.<\/p>\n<pre><code class=\"language-CSS\">.mdEdit div * {\n    margin-bottom: 0.1em;\n    line-height: 0.5em;\n}\n\n.mdEdit div a{\n    color: rgba(50, 104, 220, 1);\n}\n\n.mdEdit div code {\n    color: rgba(50, 104, 220, 1);\n    background-color: rgb(240, 240, 240);\n    padding: 0.4em;\n}\n.mdEdit div img {\n    max-width: 95%;\n}\n\n.mdEdit div {\n    white-space: pre-wrap;\n}<\/code><\/pre>\n<p>Now we also need to make it so the input element won't show by default only when there is focus on the wrapper or itself. <\/p>\n<pre><code class=\"language-CSS\">.mdEdit:focus-within&gt;div {\n    display: none;\n}\n\n.mdEdit:focus-within :is(input, textarea) {\n    display: initial;\n}\n\n.mdEdit input,\n.mdEdit textarea {\n    display: none;\n    font: inherit;\n    border: none;\n    overflow-x: auto;\n    resize: none;\n}\n.mdEdit textarea {\n    font-family: consolas;\n}\n\n.mdEdit input:focus,\n.mdEdit textarea:focus {\n    border: none;\n    outline: none;\n}<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/09\/markdown-input.gif\" alt=\"enter image description here\" \/><\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/Markdown%20Input\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2017%20-%20Markdown%20Inputs\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created Markdown Inputs!<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Markdown Inputs with HTML, CSS and JavaScript",
            "post_excerpt": "Learn how to make input and textarea tags that allow and show markdown.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "markdown-inputs-with-html-css-and-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/markdown-inputs-with-html-css-and-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Split Container Web Component",
        "description": "let us learn together how to make a custom HTML element with JavaScript by making a resizeable split container.",
        "slug": "split-container-web-component",
        "raw_content": "## Idea\r\n\r\nNot long ago I learned that it's possible that one can make custom HTML elements with JavaScript and today I want to make a resizeable split container with you to learn how to make custom web components. Keep in mind that I also did this for the first time and I am just a beginner who documents what he learns, so come along!\r\n\r\nLet's do this!\r\n\r\n## Class\r\n\r\nNow how exactly does one make a custom HTML Element? Its really easy we just have to make a class that extends `HTMLElement` or any other Predefined Element and we have to add this class to the custom elements with:\r\n\r\n```js\r\ncustomElements.define('hsplit-container', splitContainer)\r\n```\r\n\r\nThe first argument here is the name that will be used in the HTML and the second one is the class. Now inside this class, we can have several functions that will be called by the browser in the lifetime of the element. The one we use here is `connnectedCallback` which is called when the element is created. Most of the Script happens here so let's go over it.\r\n\r\n## Connected Function\r\n\r\nSo inside our split container class, we define a function to handle setting everything up. So we start by getting attributes from the element itself and storing them inside an object called config. in this case `this` refers to the element so we can access and edit properties like `innerHTML` like normally. Normally `||` is used to check if either of two conditions is true but actually, it returns the first value that is true. So we can use this syntax to easily create a default value for each attribute because if it was not set `getAttribute` will return `null`.\r\n\r\n```js\r\nclass splitContainer extends HTMLElement {\r\n\tconnectedCallback() {\r\n\t\tthis.config = {\r\n            min: this.getAttribute('min') || 20,\r\n            max: this.getAttribute('max') || 80,\r\n            start: this.getAttribute('start') || 50,\r\n            draggerwidth: this.getAttribute('draggerwidth') || 50,\r\n        }\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n### Shadow DOM and Templates\r\n\r\nNext up we create a shadow DOM which is just HTML normally hidden that is used when a component needs many elements or a restructure of given elements. We make this shadow DOM with the `attachShadow()` function that returns an object that also has the sam[Selber noch nie Gemacht und dass ganze erkl\u00e4ren]\r\n\r\n## Class\r\n\r\nDas mit der klasse function as any element. Inside there we can define styles slots and other elements.\r\n\r\n```js\r\nconst shadow = this.attachShadow({ mode: 'open' })\r\nshadow.innerHTML = `...`\r\n```\r\n\r\nThe first thing we insert into the shadow DOM is the custom HTML in our case this is a slot element followed by a div with another div as a child and in the end another slot.\r\n\r\n```html\r\n<slot name=\"first\"><\/slot>\r\n<div id=\"dragger-container\">\r\n    <div><\/div>\r\n<\/div>\r\n<slot name=\"second\"><\/slot>\r\n...\r\n```\r\n\r\nThe divs in the middle will represent the dragger. The slots are used to rearrange elements in the original Structure to fit our needs. The Markup will look something like this, where we have the root custom element with two children representing the two sides of the split. But we want to insert dragger in between and that's why we use the shadow DOM. The Developer Tools normally don't show shadow elements so this has to be enabled.\r\n\r\n```html\r\n<hsplit-container>\r\n    <div>\r\n        Left Side\r\n    <\/div>\r\n    <div>\r\n        Right Side\r\n    <\/div>\r\n<\/hsplit-container>\r\n```\r\n\r\nThe First slot element will have the first element inside the `hsplit-container` and the second will have the second.\r\n\r\nWe later also go over the CSS that is also inserted into this shadow dom so keep that in mind.\r\n\r\nContinuing we search for the dragger inside the shadow element and we save the reference. We then set its width according to the config object. But then we get the actual width in pixel with the `el.getBoundingClientRect()` function that return box informations about any element. We will use these functions often in this Tutorial. Last but not least we define a variable that is used to tell if the dragger has been clicked or relased.\r\n\r\n```js\r\n\/\/ Getting the Dragger\r\nthis.dragger = shadow.querySelector('#dragger-container')\r\nthis.dragger.style.width = this.config.draggerwidth + 'px'\r\n\r\nthis.config.draggerwidth = this.dragger.getBoundingClientRect().width\r\nthis.draggerClicked = false\r\n```\r\n\r\nThen we also save the two nested elements that are split to variables and we set the slot attribute for each of them so the are rearranged properly.\r\n\r\n```js\r\n\/\/ Get the two children\r\nthis.firstEl = this.children[0]\r\nthis.lastEl = this.children[1]\r\n\r\n\/\/ the Slot Attribute for both Elements\r\nthis.firstEl.setAttribute('slot', 'first')\r\nthis.lastEl.setAttribute('slot', 'second')\r\n```\r\n\r\nThen we connect some events to some functions. For the Drag we want it to work so the user has to press on the dragger but can then leave it to drag it along. That is why we set the `pointerdown` (Click) to the dragger but `pointerup` and `pointermove` to the document. For the movement we call a function called `moveCallback`, we will go over it later.\r\n\r\n```js\r\nthis.dragger.addEventListener('pointerdown', (ev) => { this.draggerClicked = true; })\r\ndocument.addEventListener('pointerup', () => { this.draggerClicked = false; })\r\ndocument.addEventListener('pointermove', (ev) => { this.moveCallback(ev) }\r\n```\r\n\r\n## Movement Callback\r\n\r\nLet's go over the function that handles movement. In it, we first check if the dragger is clicked if that's not the case we return essentially doing nothing.\r\n\r\n```js\r\nmoveCallback(ev) {\r\n\tif (!this.draggerClicked) return\r\n\t\r\n\t...\r\n}\r\n```\r\n\r\nif that is the case we continue by saving the x position and width to variables and we use this info and the x position of the click to calculate how far to the left inside the element the mouse pointer is currently in percent. We then also clamp this value to the max and min width.\r\n\r\n```js\r\n        const x = this.getBoundingClientRect().x\r\n        const width = this.getBoundingClientRect().width\r\n\r\n        \/\/ Calcualate\r\n        const perc = ((ev.x - x) \/ width) * 100\r\n        const percClamped = this.clamp(perc, this.config.min, this.config.max)\r\n```\r\n\r\n We define this function somewhere in the class, and it looks like this.\r\n \r\n```js\r\nclamp(val, min, max) {\r\n    if (val > max) return max\r\n    if (val < min) return min\r\n    return val\r\n}\r\n```\r\n\r\nAnyway, we then continue by setting the width for both inserted elements and the left property for the dragger. To do this we use the `calc` function in CSS and we need to make adjustments so the dragger is placed so its middle is at the mouse position and so on.\r\n\r\n```js\r\nthis.dragger.style.left = `calc(${percClamped}% - ${this.config.draggerwidth \/ 2}px)`\r\nthis.firstEl.style.width = `calc(${percClamped}% - ${this.config.draggerwidth \/ 2}px)`\r\nthis.lastEl.style.width = `calc(${100 - percClamped}% - ${this.config.draggerwidth \/ 2}px)`\r\n```\r\n\r\n## CSS\r\n\r\nLet us also go over the CSS that is defined in the Shadow DOM. I don't want to go into detail that much, I just want to point out a few things. We can select the element itself. with `:host` and slotted styles are made within`::slotted(selector)`. We need to set the position to absolute and right to zero for the second div so it's on the right side.\r\n\r\n```css\r\n:host * {\r\n    box-sizing: border-box;\r\n}\r\n\r\n:host {\r\n    background-color: rgb(255, 255, 255);\r\n    font-family: 'Segoe UI', sans-serif;\r\n    display: flex;\r\n    position: relative;\r\n}\r\n\r\n::slotted(div) {\r\n    box-sizing: border-box;\r\n}\r\n\r\n::slotted(div:last-child) {\r\n    position: absolute;\r\n    right: 0\r\n}\r\n\r\n\r\n#dragger-container {\r\n    height: 100%;\r\n    width: 100px;\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: center;\r\n    opacity: 0.1;\r\n    left: calc(50% - 1em - 2.5px);\r\n    transition: opacity 0.2s ease;\r\n    position: absolute;\r\n    touch-action: none;\r\n}\r\n\r\n#dragger-container:hover {\r\n    opacity: 0.3;\r\n    cursor: ew-resize;\r\n}\r\n\r\n#dragger-container:active {\r\n    opacity: 1;\r\n    cursor: ew-resize;\r\n}\r\n\r\n\r\n#dragger-container div {\r\n    background-color: rgb(0, 149, 255);\r\n    width: 5px;\r\n    height: 100%;\r\n    border-radius: 99px;\r\n    transition: width 0.2s ease\r\n}\r\n\r\n#dragger-container:active div {\r\n    width: 10px;\r\n}\r\n```\r\n\r\n## HTMl Usage\r\n\r\nNow that we have the code we can use the element in our HTML with its custom name like this.\r\n\r\n```html\r\n<hsplit-container>\r\n\t<div>\r\n\t\tContent\r\n    <\/div>\r\n    <div>\r\n        Content\r\n    <\/div>\r\n<\/hsplit-container>\r\n```\r\n\r\n## Showcase\r\n\r\n![Showcase](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/09\/split.gif)\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/Vertical%20Split%20Container\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2018%20-%20Vertical%20Split%20Web%20Component)\r\n\r\n\r\n## Conclusion\r\n\r\nAwesome! We have created a custom HTML Element with JavaScript now how could we use this newly gained knowledge?\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "018 - Vertical Split Web Component\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 674,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:21",
            "post_date_gmt": "2023-02-11 12:55:21",
            "post_content": "<h2>Idea<\/h2>\n<p>Not long ago I learned that it's possible that one can make custom HTML elements with JavaScript and today I want to make a resizeable split container with you to learn how to make custom web components. Keep in mind that I also did this for the first time and I am just a beginner who documents what he learns, so come along!<\/p>\n<p>Let's do this!<\/p>\n<h2>Class<\/h2>\n<p>Now how exactly does one make a custom HTML Element? Its really easy we just have to make a class that extends <code>HTMLElement<\/code> or any other Predefined Element and we have to add this class to the custom elements with:<\/p>\n<pre><code class=\"language-js\">customElements.define('hsplit-container', splitContainer)<\/code><\/pre>\n<p>The first argument here is the name that will be used in the HTML and the second one is the class. Now inside this class, we can have several functions that will be called by the browser in the lifetime of the element. The one we use here is <code>connnectedCallback<\/code> which is called when the element is created. Most of the Script happens here so let's go over it.<\/p>\n<h2>Connected Function<\/h2>\n<p>So inside our split container class, we define a function to handle setting everything up. So we start by getting attributes from the element itself and storing them inside an object called config. in this case <code>this<\/code> refers to the element so we can access and edit properties like <code>innerHTML<\/code> like normally. Normally <code>||<\/code> is used to check if either of two conditions is true but actually, it returns the first value that is true. So we can use this syntax to easily create a default value for each attribute because if it was not set <code>getAttribute<\/code> will return <code>null<\/code>.<\/p>\n<pre><code class=\"language-js\">class splitContainer extends HTMLElement {\n    connectedCallback() {\n        this.config = {\n            min: this.getAttribute('min') || 20,\n            max: this.getAttribute('max') || 80,\n            start: this.getAttribute('start') || 50,\n            draggerwidth: this.getAttribute('draggerwidth') || 50,\n        }\n    }\n    ...\n}<\/code><\/pre>\n<h3>Shadow DOM and Templates<\/h3>\n<p>Next up we create a shadow DOM which is just HTML normally hidden that is used when a component needs many elements or a restructure of given elements. We make this shadow DOM with the <code>attachShadow()<\/code> function that returns an object that also has the sam[Selber noch nie Gemacht und dass ganze erkl\u00e4ren]<\/p>\n<h2>Class<\/h2>\n<p>Das mit der klasse function as any element. Inside there we can define styles slots and other elements.<\/p>\n<pre><code class=\"language-js\">const shadow = this.attachShadow({ mode: 'open' })\nshadow.innerHTML = `...`<\/code><\/pre>\n<p>The first thing we insert into the shadow DOM is the custom HTML in our case this is a slot element followed by a div with another div as a child and in the end another slot.<\/p>\n<pre><code class=\"language-html\">&lt;slot name=\"first\"&gt;&lt;\/slot&gt;\n&lt;div id=\"dragger-container\"&gt;\n    &lt;div&gt;&lt;\/div&gt;\n&lt;\/div&gt;\n&lt;slot name=\"second\"&gt;&lt;\/slot&gt;\n...<\/code><\/pre>\n<p>The divs in the middle will represent the dragger. The slots are used to rearrange elements in the original Structure to fit our needs. The Markup will look something like this, where we have the root custom element with two children representing the two sides of the split. But we want to insert dragger in between and that's why we use the shadow DOM. The Developer Tools normally don't show shadow elements so this has to be enabled.<\/p>\n<pre><code class=\"language-html\">&lt;hsplit-container&gt;\n    &lt;div&gt;\n        Left Side\n    &lt;\/div&gt;\n    &lt;div&gt;\n        Right Side\n    &lt;\/div&gt;\n&lt;\/hsplit-container&gt;<\/code><\/pre>\n<p>The First slot element will have the first element inside the <code>hsplit-container<\/code> and the second will have the second.<\/p>\n<p>We later also go over the CSS that is also inserted into this shadow dom so keep that in mind.<\/p>\n<p>Continuing we search for the dragger inside the shadow element and we save the reference. We then set its width according to the config object. But then we get the actual width in pixel with the <code>el.getBoundingClientRect()<\/code> function that return box informations about any element. We will use these functions often in this Tutorial. Last but not least we define a variable that is used to tell if the dragger has been clicked or relased.<\/p>\n<pre><code class=\"language-js\">\/\/ Getting the Dragger\nthis.dragger = shadow.querySelector('#dragger-container')\nthis.dragger.style.width = this.config.draggerwidth + 'px'\n\nthis.config.draggerwidth = this.dragger.getBoundingClientRect().width\nthis.draggerClicked = false<\/code><\/pre>\n<p>Then we also save the two nested elements that are split to variables and we set the slot attribute for each of them so the are rearranged properly.<\/p>\n<pre><code class=\"language-js\">\/\/ Get the two children\nthis.firstEl = this.children[0]\nthis.lastEl = this.children[1]\n\n\/\/ the Slot Attribute for both Elements\nthis.firstEl.setAttribute('slot', 'first')\nthis.lastEl.setAttribute('slot', 'second')<\/code><\/pre>\n<p>Then we connect some events to some functions. For the Drag we want it to work so the user has to press on the dragger but can then leave it to drag it along. That is why we set the <code>pointerdown<\/code> (Click) to the dragger but <code>pointerup<\/code> and <code>pointermove<\/code> to the document. For the movement we call a function called <code>moveCallback<\/code>, we will go over it later.<\/p>\n<pre><code class=\"language-js\">this.dragger.addEventListener('pointerdown', (ev) =&gt; { this.draggerClicked = true; })\ndocument.addEventListener('pointerup', () =&gt; { this.draggerClicked = false; })\ndocument.addEventListener('pointermove', (ev) =&gt; { this.moveCallback(ev) }<\/code><\/pre>\n<h2>Movement Callback<\/h2>\n<p>Let's go over the function that handles movement. In it, we first check if the dragger is clicked if that's not the case we return essentially doing nothing.<\/p>\n<pre><code class=\"language-js\">moveCallback(ev) {\n    if (!this.draggerClicked) return\n\n    ...\n}<\/code><\/pre>\n<p>if that is the case we continue by saving the x position and width to variables and we use this info and the x position of the click to calculate how far to the left inside the element the mouse pointer is currently in percent. We then also clamp this value to the max and min width.<\/p>\n<pre><code class=\"language-js\">        const x = this.getBoundingClientRect().x\n        const width = this.getBoundingClientRect().width\n\n        \/\/ Calcualate\n        const perc = ((ev.x - x) \/ width) * 100\n        const percClamped = this.clamp(perc, this.config.min, this.config.max)<\/code><\/pre>\n<p>We define this function somewhere in the class, and it looks like this.<\/p>\n<pre><code class=\"language-js\">clamp(val, min, max) {\n    if (val &gt; max) return max\n    if (val &lt; min) return min\n    return val\n}<\/code><\/pre>\n<p>Anyway, we then continue by setting the width for both inserted elements and the left property for the dragger. To do this we use the <code>calc<\/code> function in CSS and we need to make adjustments so the dragger is placed so its middle is at the mouse position and so on.<\/p>\n<pre><code class=\"language-js\">this.dragger.style.left = `calc(${percClamped}% - ${this.config.draggerwidth \/ 2}px)`\nthis.firstEl.style.width = `calc(${percClamped}% - ${this.config.draggerwidth \/ 2}px)`\nthis.lastEl.style.width = `calc(${100 - percClamped}% - ${this.config.draggerwidth \/ 2}px)`<\/code><\/pre>\n<h2>CSS<\/h2>\n<p>Let us also go over the CSS that is defined in the Shadow DOM. I don't want to go into detail that much, I just want to point out a few things. We can select the element itself. with <code>:host<\/code> and slotted styles are made within<code>::slotted(selector)<\/code>. We need to set the position to absolute and right to zero for the second div so it's on the right side.<\/p>\n<pre><code class=\"language-css\">:host * {\n    box-sizing: border-box;\n}\n\n:host {\n    background-color: rgb(255, 255, 255);\n    font-family: 'Segoe UI', sans-serif;\n    display: flex;\n    position: relative;\n}\n\n::slotted(div) {\n    box-sizing: border-box;\n}\n\n::slotted(div:last-child) {\n    position: absolute;\n    right: 0\n}\n\n#dragger-container {\n    height: 100%;\n    width: 100px;\n    display: flex;\n    align-content: center;\n    justify-content: center;\n    opacity: 0.1;\n    left: calc(50% - 1em - 2.5px);\n    transition: opacity 0.2s ease;\n    position: absolute;\n    touch-action: none;\n}\n\n#dragger-container:hover {\n    opacity: 0.3;\n    cursor: ew-resize;\n}\n\n#dragger-container:active {\n    opacity: 1;\n    cursor: ew-resize;\n}\n\n#dragger-container div {\n    background-color: rgb(0, 149, 255);\n    width: 5px;\n    height: 100%;\n    border-radius: 99px;\n    transition: width 0.2s ease\n}\n\n#dragger-container:active div {\n    width: 10px;\n}<\/code><\/pre>\n<h2>HTMl Usage<\/h2>\n<p>Now that we have the code we can use the element in our HTML with its custom name like this.<\/p>\n<pre><code class=\"language-html\">&lt;hsplit-container&gt;\n    &lt;div&gt;\n        Content\n    &lt;\/div&gt;\n    &lt;div&gt;\n        Content\n    &lt;\/div&gt;\n&lt;\/hsplit-container&gt;<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/09\/split.gif\" alt=\"Showcase\" \/><\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/Vertical%20Split%20Container\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2018%20-%20Vertical%20Split%20Web%20Component\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Awesome! We have created a custom HTML Element with JavaScript now how could we use this newly gained knowledge?<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Split Container Web Component",
            "post_excerpt": "let us learn together how to make a custom HTML element with JavaScript by making a resizeable split container.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "split-container-web-component",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:21",
            "post_modified_gmt": "2023-02-11 12:55:21",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/split-container-web-component\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Link Previews with JavaScript and PHP",
        "description": "In this short Tutorial we will make it so the links of our page show a little preview window panel that shows the title and description of the linked page.",
        "slug": "link-previews-with-javascript-and-php",
        "raw_content": "## Idea\r\n\r\nOn Wikipedia, its links are a little bit different than on other Pages, if you hover over one it displays a short description and an image of the page that this link leads to and today we will try to do this ourselves with JavaScript and a little bit of PHP. Just keep in mind this will be a quick and dirty solution to the problem you could work it out work consistently. The PHP part will be just one file with one function so we simply go over it in the JavaScript part.\r\n\r\nLet us get into it.\r\n\r\n## JavaScript\r\n\r\nLet's start with the JavaScript of the program. We start by looping over all link elements by using `document.querySelectorAll`, `Array.from`, and `forEach`. inside the callback, the rest of the program happens. It's important that the callback is an async function because later we will use `fetch` to get the data.\r\n\r\n```js\r\nArray.from(document.querySelectorAll('a')).forEach(async el => {\r\n\t...\r\n})\r\n```\r\n\r\nFirstly we call a PHP file with the fetch function called `script.php` with a query called `url`.\r\n\r\n```js\r\nlet response = await fetch(`script.php?url=${el.href}`);\r\n```\r\n\r\nThe PHP file simply gets the contents of the URL as you see below and it echos them so JavaScript can read them later.\r\n\r\n```php\r\n<?php\r\necho file_get_contents($_GET['url']);\r\n```\r\n\r\nContinuing we get the response text with the `text` method and we use regex to find the title and description content of the returned HTML. If this info is not available we simply set `No Title` or for a empty string.\r\n\r\n```js\r\nlet html = await response.text();\r\n\r\ntitle = html.match(\/<title.*?>(?<t>.*?)<\\\/title>\/s)?.groups.t ?? 'No Title';\r\ndescription = html.match(\/<meta name=\"description\" content=\"(?<d>.*?)\".*?>\/s)?.groups.d ?? '';\r\n```\r\n\r\nThen we finally create a div that will hold this information, we set a class for the link element and we insert the content we just got. Lastly, we add this element to the link.\r\n\r\n```js\r\npanel = document.createElement('div');\r\n                \r\nel.className = 'linkPreviewWrapper';\r\n\r\npanel.innerHTML = `\r\n    <h3>${title}<\/h3>\r\n    <p>${description}<\/p>\r\n`\r\n\r\nel.appendChild(panel);\r\n```\r\n\r\n## CSS\r\n\r\nBelow you find the CSS code where it is important that we set the position attributes correctly so the panel will show below the link. We also add a little gradient so i look better.\r\n\r\n```css\r\n.linkPreviewWrapper {\r\n    position: relative;\r\n}\r\n\r\n.linkPreviewWrapper > div {\r\n    width: 250px;\r\n    max-height: 200px;\r\n    box-shadow: 0 0 10px rgb(0,0,0,0.3);\r\n    position: absolute;\r\n    color: black;\r\n    padding: 1em;\r\n    overflow-y: hidden;\r\n    left: 0;\r\n    top: 100%;\r\n    display: none;\r\n    background: linear-gradient(0deg, rgb(228, 228, 228) 0%, rgba(0,0,0,0) 100%);\r\n    background-color: white;\r\n    z-index: 999;\r\n}\r\n\r\n.linkPreviewWrapper:hover h3 {\r\n    margin-top: 0;\r\n    font-weight: normal;\r\n}\r\n\r\n.linkPreviewWrapper:hover > * {\r\n    display: block;\r\n}\r\n```\r\n\r\n\r\n## Showcase\r\n\r\nIn the Links below you can find a live demo of the Project and the source code on GitHub.\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/Link%20Previews\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2019%20-%20Link%20Preview)\r\n\r\n## Conclusion\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "019 - Link Preview\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 676,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>On Wikipedia, its links are a little bit different than on other Pages, if you hover over one it displays a short description and an image of the page that this link leads to and today we will try to do this ourselves with JavaScript and a little bit of PHP. Just keep in mind this will be a quick and dirty solution to the problem you could work it out work consistently. The PHP part will be just one file with one function so we simply go over it in the JavaScript part.<\/p>\n<p>Let us get into it.<\/p>\n<h2>JavaScript<\/h2>\n<p>Let's start with the JavaScript of the program. We start by looping over all link elements by using <code>document.querySelectorAll<\/code>, <code>Array.from<\/code>, and <code>forEach<\/code>. inside the callback, the rest of the program happens. It's important that the callback is an async function because later we will use <code>fetch<\/code> to get the data.<\/p>\n<pre><code class=\"language-js\">Array.from(document.querySelectorAll('a')).forEach(async el =&gt; {\n    ...\n})<\/code><\/pre>\n<p>Firstly we call a PHP file with the fetch function called <code>script.php<\/code> with a query called <code>url<\/code>.<\/p>\n<pre><code class=\"language-js\">let response = await fetch(`script.php?url=${el.href}`);<\/code><\/pre>\n<p>The PHP file simply gets the contents of the URL as you see below and it echos them so JavaScript can read them later.<\/p>\n<pre><code class=\"language-php\">&lt;?php\necho file_get_contents($_GET['url']);<\/code><\/pre>\n<p>Continuing we get the response text with the <code>text<\/code> method and we use regex to find the title and description content of the returned HTML. If this info is not available we simply set <code>No Title<\/code> or for a empty string.<\/p>\n<pre><code class=\"language-js\">let html = await response.text();\n\ntitle = html.match(\/&lt;title.*?&gt;(?&lt;t&gt;.*?)&lt;\/title&gt;\/s)?.groups.t ?? 'No Title';\ndescription = html.match(\/&lt;meta name=\"description\" content=\"(?&lt;d&gt;.*?)\".*?&gt;\/s)?.groups.d ?? '';<\/code><\/pre>\n<p>Then we finally create a div that will hold this information, we set a class for the link element and we insert the content we just got. Lastly, we add this element to the link.<\/p>\n<pre><code class=\"language-js\">panel = document.createElement('div');\n\nel.className = 'linkPreviewWrapper';\n\npanel.innerHTML = `\n    &lt;h3&gt;${title}&lt;\/h3&gt;\n    &lt;p&gt;${description}&lt;\/p&gt;\n`\n\nel.appendChild(panel);<\/code><\/pre>\n<h2>CSS<\/h2>\n<p>Below you find the CSS code where it is important that we set the position attributes correctly so the panel will show below the link. We also add a little gradient so i look better.<\/p>\n<pre><code class=\"language-css\">.linkPreviewWrapper {\n    position: relative;\n}\n\n.linkPreviewWrapper &gt; div {\n    width: 250px;\n    max-height: 200px;\n    box-shadow: 0 0 10px rgb(0,0,0,0.3);\n    position: absolute;\n    color: black;\n    padding: 1em;\n    overflow-y: hidden;\n    left: 0;\n    top: 100%;\n    display: none;\n    background: linear-gradient(0deg, rgb(228, 228, 228) 0%, rgba(0,0,0,0) 100%);\n    background-color: white;\n    z-index: 999;\n}\n\n.linkPreviewWrapper:hover h3 {\n    margin-top: 0;\n    font-weight: normal;\n}\n\n.linkPreviewWrapper:hover &gt; * {\n    display: block;\n}<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p>In the Links below you can find a live demo of the Project and the source code on GitHub.<\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/Link%20Previews\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2019%20-%20Link%20Preview\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Link Previews with JavaScript and PHP",
            "post_excerpt": "In this short Tutorial we will make it so the links of our page show a little preview window panel that shows the title and description of the linked page.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "link-previews-with-javascript-and-php",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/link-previews-with-javascript-and-php\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Calculator with History Function in HTML, CSS, and JavaScript",
        "description": "Learn how to make a simple calculator with a history function using web technologies.",
        "slug": "calculator-with-history-function-in-html-css-and-javascript",
        "raw_content": "## Idea\r\n\r\nIn this Tutorial, we will make a simple Calculator with a history function utilizing JavaScript, HTML, and CSS. We will use the eval function to evaluate the expression, but keep in mind that this is somewhat dangerous and it should be used with great care in Production Environments. We will also make use of the [Window.localStorage](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Window\/localStorage) API to store a list of expressions that were previously typed into the calculator.\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/Calculator\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2020%20-%20Calculator)\r\n\r\n## HTML\r\n\r\nLet's start with the Markup of the Calculator as it defines the Buttons and possible tokens. \r\n\r\nWe start by wrapping everything in a div with the container class then we have to divs as children that act as two columns. the left side will be the calculator itself and the right side will show the History. For the input and output, we use the `input` element and we disable it for the output. We do it this way so the elements always have the same height regardless of the current content.\r\n\r\nAfter that, we have the buttons of the Calculator that are once again located inside a container that will align them in a grid. Later we will connect the buttons and mostly insert their content into the input and evaluate that.\r\n\r\nWe then also add a right-side container that will hold the history.\r\n\r\n```html\r\n<div class=\"container\">\r\n  <div class=\"leftSide\">\r\n    <input type=\"text\" id=\"input\" placeholder=\"Input\">\r\n    <input type=\"text\" id=\"output\" placeholder=\"Output\" disabled=\"true\">\r\n\r\n    <div class=\"buttons\">\r\n      <button class=\"greyButton\">7<\/button>\r\n      <button class=\"greyButton\">8<\/button>\r\n      <button class=\"greyButton\">9<\/button>\r\n      <button>*<\/button>\r\n      <button>+<\/button>\r\n\r\n      <button class=\"greyButton\">4<\/button>\r\n      <button class=\"greyButton\">5<\/button>\r\n      <button class=\"greyButton\">6<\/button>\r\n      <button>\/<\/button>\r\n      <button>-<\/button>\r\n\r\n      <button class=\"greyButton\">1<\/button>\r\n      <button class=\"greyButton\">2<\/button>\r\n      <button class=\"greyButton\" class=\"greyButton\">3<\/button>\r\n      <button>(<\/button>\r\n      <button>)<\/button>\r\n\r\n      <button class=\"greyButton\">0<\/button>\r\n      <button class=\"greyButton\">.<\/button>\r\n      <button class=\"blueButton\">=<\/button>\r\n      <button>CLEAR<\/button>\r\n      <button>DEL<\/button>\r\n    <\/div>\r\n  <\/div>\r\n  <div class=\"rightSide\">\r\n    <h4>HISTORY<\/h4>\r\n    <div class=\"historyContainer\">\r\n      \r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n```\r\n\r\n## JavaScript\r\n\r\nLet's now get to the JavaScript of the Calculator. Bear in mind that this code will be a wee bit convoluted since we make a calculator while also implementing a history function for it.\r\n\r\nWe start by saving some important elements to variables so we can use them later and so we don't have to query them a bunch of times.\r\n\r\n```js\r\nconst buttons = document.querySelectorAll('.buttons button')\r\nconst inputEl = document.querySelector('input')\r\nconst output = document.querySelector('#output')\r\nconst historyContainer = document.querySelector('.historyContainer')\r\n```\r\n\r\nThen we set a name for the storage of the history. We then also check if there is something at this name inside local storage by using the `getItem()` method. In case this value is null we set this index to an empty array. The local storage is basically an object which survives the page and the browser reloads but it does not support other objects so we have to turn them to json strings with `JSON.stringify()`. Lastly, we call the `refreshHistory()` Function that will redraw the items in the history column, we will later look at what it does exactly.\r\n\r\n```js\r\nconst STORAGE_NAME = 'history_v4';\r\n\r\nif (localStorage.getItem(STORAGE_NAME) == null) {\r\n    localStorage.setItem(STORAGE_NAME, JSON.stringify([]))\r\n}\r\n\r\nrefreshHistory()\r\n```\r\n\r\nWe continue by looper over all the button elements. Inside the loop, we save the innerHTML of the Elements to a variable and we add an event listener to it for the `pointerdown` event which triggers if someone clicks or taps the element.\r\n\r\n```js\r\nfor (let button of buttons) {\r\n    const symbol = button.innerHTML\r\n\r\n    button.addEventListener('pointerdown', () => {\r\n        ...\r\n    })\r\n}\r\n```\r\n\r\nInside the event listener Callback, we check the elements for special meaning. For `=` we want to save the current expression and push the output content into the input element, so we get the History List by using `localStorage.getItem(key)` and `JSON.parse(str)`. We then check if the element is already in the history and if it's not, we insert it. After that, we also need to set the value in the local Storage with `localStorage.setItem(key, value)`.\r\n\r\nNow if the pressed button had the value `DEL` we delete one character from the end and if it was `CLEAR` we clear the input of any content. In any other case, we simply add the character to the input. Lastly, we call a function that will registrate the changes made to the input element.\r\n\r\n```js\r\n\/\/ Inside event callback\r\n\r\nif (symbol == '=') {\r\n\r\n    const historyElements = JSON.parse(localStorage.getItem(STORAGE_NAME))\r\n    if (!historyElements.includes(inputEl.value)) {\r\n        historyElements.push(inputEl.value)\r\n    }\r\n    localStorage.setItem(STORAGE_NAME, JSON.stringify(historyElements))\r\n    \r\n\r\n    inputEl.value = output.value\r\n    refreshHistory()\r\n}\r\nelse if (symbol == 'DEL') {\r\n    inputEl.value = inputEl.value.slice(0, inputEl.value.length - 1)\r\n} else if (symbol == 'CLEAR') {\r\n    inputEl.value = ''\r\n} else {\r\n    inputEl.value += symbol;\r\n}\r\n\r\nregistrateChange()\r\n```\r\n\r\n### Registrate Changes\r\n\r\nThen we bind the `input` event of input elements to the `registrateChange` function and we define it. We simply evaluate the value in the input and we insert the result into the output.\r\n\r\n```js\r\ninputEl.addEventListener('input', registrateChange)\r\n\r\nfunction registrateChange() {\r\n    let newValue = eval(inputEl.value) || ''\r\n\r\n    output.value = newValue\r\n}\r\n```\r\n\r\n### Refresh History Function\r\n\r\nLet's also go over the `refreshHistory` function, which will redraw the content of the history column. So we first empty the container and then we get the history list from local storage and then we loop over each item and we add a div to the container for each expression. \r\n\r\n```js\r\nfunction refreshHistory() {\r\n    historyContainer.innerHTML = ''\r\n\r\n    let historyElements = JSON.parse(localStorage.getItem(STORAGE_NAME))\r\n\r\n    for (let i = historyElements.length - 1; i >= 0; i--) {\r\n\r\n        const div = document.createElement('div')\r\n        div.className = 'historyItem'\r\n\r\n        let evaluated = ''\r\n\r\n        try {\r\n            evaluated = eval(historyElements[i])\r\n            \r\n        } catch (error) {\r\n            evaluated = 'INVALID RESULT'\r\n        }\r\n\r\n        div.innerHTML = `\r\n            <div>${truncate(historyElements[i], 14)}<\/div>\r\n            <div>${truncate(evaluated, 14)}<\/div>\r\n        `\r\n        \r\n        historyContainer.appendChild(div)\r\n\r\n        div.addEventListener('pointerdown', () => {\r\n            inputEl.value = historyElements[i];\r\n            registrateChange()\r\n        })\r\n    }\r\n}\r\n```\r\n\r\n## CSS\r\n\r\nBelow you see the CSS code of the Program, I will not go further into detail.\r\n\r\n```css\r\n@import url('https:\/\/fonts.googleapis.com\/css2?family=Ubuntu+Mono&display=swap');\r\n\r\n#input,\r\n#output {\r\n    padding: 0.5em;\r\n}\r\n\r\n#output {\r\n    text-align: right;\r\n    background-color: rgb(30, 30, 30);\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\nh6 {\r\n    margin: 0\r\n}\r\n\r\nbody {\r\n    font-family: 'Ubuntu Mono', monospace;\r\n    font-size: 200%;\r\n    height: 100vh;\r\n    margin: 0;\r\n    background-color: rgb(50, 50, 50);\r\n    color: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: none;\r\n}\r\n\r\n.container {\r\n    overflow: none;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: rgb(40, 40, 40);\r\n    box-shadow: 0 0 4px rgb(0, 0, 0);\r\n    display: grid;\r\n    grid-template-columns: 1fr 250px;\r\n}\r\n\r\n.leftSide {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.rightSide {\r\n    background-color: rgb(50, 50, 50);\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n}\r\n\r\n.rightSide h4 {\r\n    padding: 0.5em;\r\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n    margin: 0;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n    .rightSide {\r\n        display: none;\r\n    }\r\n    .container {\r\n        grid-template-columns: 1fr;\r\n    }\r\n}\r\n\r\n.historyContainer {\r\n    flex-grow: 1;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n}\r\n\r\nbutton,\r\ninput {\r\n    font: inherit;\r\n    color: inherit;\r\n    background-color: inherit;\r\n    border: none;\r\n}\r\n\r\n.buttons {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n    flex-grow: 1;\r\n\r\n}\r\n\r\n.buttons button {\r\n    border: 1px solid rgb(60, 60, 60);\r\n}\r\n\r\n.blueButton {\r\n    background-color: rgb(81, 81, 164)\r\n}\r\n\r\n.greyButton {\r\n    background-color: rgba(100, 100, 100, 0.2)\r\n}\r\n\r\n.historyItem {\r\n    border-bottom: 1px solid rgb(100, 100, 100);\r\n    padding-left: 1em;\r\n    padding-right: 1em;\r\n    color: grey;\r\n    font-size: 60%;\r\n}\r\n\r\n.historyItem>*:first-child {\r\n    padding-top: 0.5em;\r\n}\r\n\r\n.historyItem>*:last-child {\r\n    text-align: right;\r\n}\r\n\r\n::-webkit-scrollbar {\r\n    background-color: transparent;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n    background-color: rgba(100, 100, 100, 0.2);\r\n    transition: background-color 0.3s ease;\r\n}\r\n```\r\n\r\n\r\n\r\n## Conclusion\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/Calculator\/)\r\n\r\nExcellent! You have successfully created a Calculator using HTML, CSS, and JavaScript code!\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "020 - Calculator\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 678,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>In this Tutorial, we will make a simple Calculator with a history function utilizing JavaScript, HTML, and CSS. We will use the eval function to evaluate the expression, but keep in mind that this is somewhat dangerous and it should be used with great care in Production Environments. We will also make use of the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Window\/localStorage\">Window.localStorage<\/a> API to store a list of expressions that were previously typed into the calculator.<\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/Calculator\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2020%20-%20Calculator\">Look at the Code<\/a><\/p>\n<h2>HTML<\/h2>\n<p>Let's start with the Markup of the Calculator as it defines the Buttons and possible tokens. <\/p>\n<p>We start by wrapping everything in a div with the container class then we have to divs as children that act as two columns. the left side will be the calculator itself and the right side will show the History. For the input and output, we use the <code>input<\/code> element and we disable it for the output. We do it this way so the elements always have the same height regardless of the current content.<\/p>\n<p>After that, we have the buttons of the Calculator that are once again located inside a container that will align them in a grid. Later we will connect the buttons and mostly insert their content into the input and evaluate that.<\/p>\n<p>We then also add a right-side container that will hold the history.<\/p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"leftSide\"&gt;\n    &lt;input type=\"text\" id=\"input\" placeholder=\"Input\"&gt;\n    &lt;input type=\"text\" id=\"output\" placeholder=\"Output\" disabled=\"true\"&gt;\n\n    &lt;div class=\"buttons\"&gt;\n      &lt;button class=\"greyButton\"&gt;7&lt;\/button&gt;\n      &lt;button class=\"greyButton\"&gt;8&lt;\/button&gt;\n      &lt;button class=\"greyButton\"&gt;9&lt;\/button&gt;\n      &lt;button&gt;*&lt;\/button&gt;\n      &lt;button&gt;+&lt;\/button&gt;\n\n      &lt;button class=\"greyButton\"&gt;4&lt;\/button&gt;\n      &lt;button class=\"greyButton\"&gt;5&lt;\/button&gt;\n      &lt;button class=\"greyButton\"&gt;6&lt;\/button&gt;\n      &lt;button&gt;\/&lt;\/button&gt;\n      &lt;button&gt;-&lt;\/button&gt;\n\n      &lt;button class=\"greyButton\"&gt;1&lt;\/button&gt;\n      &lt;button class=\"greyButton\"&gt;2&lt;\/button&gt;\n      &lt;button class=\"greyButton\" class=\"greyButton\"&gt;3&lt;\/button&gt;\n      &lt;button&gt;(&lt;\/button&gt;\n      &lt;button&gt;)&lt;\/button&gt;\n\n      &lt;button class=\"greyButton\"&gt;0&lt;\/button&gt;\n      &lt;button class=\"greyButton\"&gt;.&lt;\/button&gt;\n      &lt;button class=\"blueButton\"&gt;=&lt;\/button&gt;\n      &lt;button&gt;CLEAR&lt;\/button&gt;\n      &lt;button&gt;DEL&lt;\/button&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"rightSide\"&gt;\n    &lt;h4&gt;HISTORY&lt;\/h4&gt;\n    &lt;div class=\"historyContainer\"&gt;\n\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;<\/code><\/pre>\n<h2>JavaScript<\/h2>\n<p>Let's now get to the JavaScript of the Calculator. Bear in mind that this code will be a wee bit convoluted since we make a calculator while also implementing a history function for it.<\/p>\n<p>We start by saving some important elements to variables so we can use them later and so we don't have to query them a bunch of times.<\/p>\n<pre><code class=\"language-js\">const buttons = document.querySelectorAll('.buttons button')\nconst inputEl = document.querySelector('input')\nconst output = document.querySelector('#output')\nconst historyContainer = document.querySelector('.historyContainer')<\/code><\/pre>\n<p>Then we set a name for the storage of the history. We then also check if there is something at this name inside local storage by using the <code>getItem()<\/code> method. In case this value is null we set this index to an empty array. The local storage is basically an object which survives the page and the browser reloads but it does not support other objects so we have to turn them to json strings with <code>JSON.stringify()<\/code>. Lastly, we call the <code>refreshHistory()<\/code> Function that will redraw the items in the history column, we will later look at what it does exactly.<\/p>\n<pre><code class=\"language-js\">const STORAGE_NAME = 'history_v4';\n\nif (localStorage.getItem(STORAGE_NAME) == null) {\n    localStorage.setItem(STORAGE_NAME, JSON.stringify([]))\n}\n\nrefreshHistory()<\/code><\/pre>\n<p>We continue by looper over all the button elements. Inside the loop, we save the innerHTML of the Elements to a variable and we add an event listener to it for the <code>pointerdown<\/code> event which triggers if someone clicks or taps the element.<\/p>\n<pre><code class=\"language-js\">for (let button of buttons) {\n    const symbol = button.innerHTML\n\n    button.addEventListener('pointerdown', () =&gt; {\n        ...\n    })\n}<\/code><\/pre>\n<p>Inside the event listener Callback, we check the elements for special meaning. For <code>=<\/code> we want to save the current expression and push the output content into the input element, so we get the History List by using <code>localStorage.getItem(key)<\/code> and <code>JSON.parse(str)<\/code>. We then check if the element is already in the history and if it's not, we insert it. After that, we also need to set the value in the local Storage with <code>localStorage.setItem(key, value)<\/code>.<\/p>\n<p>Now if the pressed button had the value <code>DEL<\/code> we delete one character from the end and if it was <code>CLEAR<\/code> we clear the input of any content. In any other case, we simply add the character to the input. Lastly, we call a function that will registrate the changes made to the input element.<\/p>\n<pre><code class=\"language-js\">\/\/ Inside event callback\n\nif (symbol == '=') {\n\n    const historyElements = JSON.parse(localStorage.getItem(STORAGE_NAME))\n    if (!historyElements.includes(inputEl.value)) {\n        historyElements.push(inputEl.value)\n    }\n    localStorage.setItem(STORAGE_NAME, JSON.stringify(historyElements))\n\n    inputEl.value = output.value\n    refreshHistory()\n}\nelse if (symbol == 'DEL') {\n    inputEl.value = inputEl.value.slice(0, inputEl.value.length - 1)\n} else if (symbol == 'CLEAR') {\n    inputEl.value = ''\n} else {\n    inputEl.value += symbol;\n}\n\nregistrateChange()<\/code><\/pre>\n<h3>Registrate Changes<\/h3>\n<p>Then we bind the <code>input<\/code> event of input elements to the <code>registrateChange<\/code> function and we define it. We simply evaluate the value in the input and we insert the result into the output.<\/p>\n<pre><code class=\"language-js\">inputEl.addEventListener('input', registrateChange)\n\nfunction registrateChange() {\n    let newValue = eval(inputEl.value) || ''\n\n    output.value = newValue\n}<\/code><\/pre>\n<h3>Refresh History Function<\/h3>\n<p>Let's also go over the <code>refreshHistory<\/code> function, which will redraw the content of the history column. So we first empty the container and then we get the history list from local storage and then we loop over each item and we add a div to the container for each expression. <\/p>\n<pre><code class=\"language-js\">function refreshHistory() {\n    historyContainer.innerHTML = ''\n\n    let historyElements = JSON.parse(localStorage.getItem(STORAGE_NAME))\n\n    for (let i = historyElements.length - 1; i &gt;= 0; i--) {\n\n        const div = document.createElement('div')\n        div.className = 'historyItem'\n\n        let evaluated = ''\n\n        try {\n            evaluated = eval(historyElements[i])\n\n        } catch (error) {\n            evaluated = 'INVALID RESULT'\n        }\n\n        div.innerHTML = `\n            &lt;div&gt;${truncate(historyElements[i], 14)}&lt;\/div&gt;\n            &lt;div&gt;${truncate(evaluated, 14)}&lt;\/div&gt;\n        `\n\n        historyContainer.appendChild(div)\n\n        div.addEventListener('pointerdown', () =&gt; {\n            inputEl.value = historyElements[i];\n            registrateChange()\n        })\n    }\n}<\/code><\/pre>\n<h2>CSS<\/h2>\n<p>Below you see the CSS code of the Program, I will not go further into detail.<\/p>\n<pre><code class=\"language-css\">@import url('https:\/\/fonts.googleapis.com\/css2?family=Ubuntu+Mono&amp;display=swap');\n\n#input,\n#output {\n    padding: 0.5em;\n}\n\n#output {\n    text-align: right;\n    background-color: rgb(30, 30, 30);\n}\n\n* {\n    box-sizing: border-box;\n}\n\nh6 {\n    margin: 0\n}\n\nbody {\n    font-family: 'Ubuntu Mono', monospace;\n    font-size: 200%;\n    height: 100vh;\n    margin: 0;\n    background-color: rgb(50, 50, 50);\n    color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: none;\n}\n\n.container {\n    overflow: none;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgb(40, 40, 40);\n    box-shadow: 0 0 4px rgb(0, 0, 0);\n    display: grid;\n    grid-template-columns: 1fr 250px;\n}\n\n.leftSide {\n    display: flex;\n    flex-direction: column;\n}\n\n.rightSide {\n    background-color: rgb(50, 50, 50);\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n}\n\n.rightSide h4 {\n    padding: 0.5em;\n    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);\n}\n\nh1, h2, h3, h4, h5, h6 {\n    margin: 0;\n}\n\n@media screen and (max-width: 700px) {\n    .rightSide {\n        display: none;\n    }\n    .container {\n        grid-template-columns: 1fr;\n    }\n}\n\n.historyContainer {\n    flex-grow: 1;\n    overflow-y: auto;\n    overflow-x: hidden;\n}\n\nbutton,\ninput {\n    font: inherit;\n    color: inherit;\n    background-color: inherit;\n    border: none;\n}\n\n.buttons {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n    flex-grow: 1;\n\n}\n\n.buttons button {\n    border: 1px solid rgb(60, 60, 60);\n}\n\n.blueButton {\n    background-color: rgb(81, 81, 164)\n}\n\n.greyButton {\n    background-color: rgba(100, 100, 100, 0.2)\n}\n\n.historyItem {\n    border-bottom: 1px solid rgb(100, 100, 100);\n    padding-left: 1em;\n    padding-right: 1em;\n    color: grey;\n    font-size: 60%;\n}\n\n.historyItem&gt;*:first-child {\n    padding-top: 0.5em;\n}\n\n.historyItem&gt;*:last-child {\n    text-align: right;\n}\n\n::-webkit-scrollbar {\n    background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: rgba(100, 100, 100, 0.2);\n    transition: background-color 0.3s ease;\n}<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/Calculator\/\">Visit the Demonstration<\/a><\/p>\n<p>Excellent! You have successfully created a Calculator using HTML, CSS, and JavaScript code!<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Calculator with History Function in HTML, CSS, and JavaScript",
            "post_excerpt": "Learn how to make a simple calculator with a history function using web technologies.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "calculator-with-history-function-in-html-css-and-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/calculator-with-history-function-in-html-css-and-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Keyboard Shortcuts with JavaScript",
        "description": "Learn how to make functions to set up keyboard shortcuts easily in JavaScript",
        "slug": "shortcuts-with-javascript",
        "raw_content": "## Idea\r\n\r\nIn this short Tutorial, we will make two functions that will make it easy to set up keyboard shortcuts. one function will accept an object as a parameter, and another will receive a string in the likes of `ctrl+a` or `shift-alt-for and a callback function. The second one will call the first one because it is essentially the same, just easier for programming. Let's get started!\r\n\r\n## Function with Object Parameter\r\n\r\nWe start with the object parameter function. It sounds more complex than it is. For the parameter, we can destructure objects, as you see below. Here we can also set default values. So we want to know the key, and the programmer can specify if the `ctrl`, `alt`, or `shift` keys should be pressed for this shortcut. We also give the option to prevent the default action of the shortcut so, for example, `ctrl+s` won't trigger a page safe. We also want a callback and the option to specify which element the event listener is in. Since this is an object, the programmer can give the arguments in any order. Inside the function, we immediately get to an event listener.\r\n\r\n```js\r\nfunction hotkeyHandler({key, ctrlKey=null, altKey=null, shiftKey=null, preventDefault=false, callback=() => {}, element=document}) {\r\n    element.addEventListener('keydown', ev => {\r\n\t\t...\r\n    })\r\n}\r\n```\r\n\r\nNow inside the event listener, we check a few things starting with the key. If the key in the event and the arguments don't match, nothing should happen, so we return. We then do something very similar for the three modifier keys. We check if the argument is not set to null and if the argument value and event value match up. We do it this way so the user can specify that, for example, alt should not be pressed, the shift should be pressed, or it does not matter if ctrl was pressed. By doing it this way, we say we don't care whether the modifier was pressed by default.\r\n\r\nWe then call the `ev.preventDefault()` function if the programmer says it should be called. This function will tell the browser not to do the default thing for this keyboard shortcut. Lastly, we call the callback given as an argument.\r\n\r\n```js\r\nif (ev.key.toLowerCase() != key.toLowerCase()) return\r\nif (ctrlKey != null && ev.ctrlKey != ctrlKey) return\r\nif (altKey != null && ev.altKey != altKey) return\r\nif (shiftKey != null && ev.shiftKey != shiftKey) return\r\n\r\nif (preventDefault) ev.preventDefault()\r\n\r\ncallback()\r\n```\r\n\r\n### Setting up a shortcut\r\n\r\nThe code below shows how one would set up `ctrl+s` to work with our function. Of course, since this will trigger a page save, we need to prevent the default action.\r\n\r\n```js\r\nhotkeyHandler({\r\n    key: 's',\r\n    ctrlKey: true,\r\n    callback: () => {\r\n        console.log('Ctrl+S pressed');\r\n    },\r\n    preventDefault: true,\r\n})\r\n```\r\n\r\nThis is alright, but maybe we can make a shorter version ...\r\n\r\n## Function with string Parameter\r\n\r\nLet's also look at how to make a wrapper function for more straightforward but less detailed usage. This function will ask for a hotkey string, a callback, and whether to prevent the default or not. The hotkey string should look like this: `ctrl+a` or `shift-alt-o`, `ctrl+Backspace`. The key must come last in this order.\r\n\r\nIn the function, we search for the key with regex. We use the string end anchor for this. We then build the argument object with the key, callback, and preventDefault option. We then see if the respective modifier keys have been mentioned in the hotkey string and set this argument according to that. Doing it this way means we can not say *only if shift was not pressed*, but that's alright for simple use cases. Lastly, we also call the other function with these arguments.\r\n\r\n```js\r\nfunction hotKey(hotkey, callback, preventDefault=false) {\r\n    const key = hotkey.match(\/[a-z0-9]*$\/i)[0];\r\n\r\n    const args = {\r\n        key,\r\n        ctrlKey: hotkey.match(\/CTRL\/i) != null ? true : null,\r\n        shiftKey: hotkey.match(\/shift\/i) != null ? true : null,\r\n        altKey: hotkey.match(\/alt\/i) != null ? true : null,\r\n        callback,\r\n        preventDefault\r\n    }\r\n\r\n    hotkeyHandler(args);\r\n}\r\n```\r\n\r\n### Setting up a shortcut\r\n\r\nSetting up the same keyboard shortcut as above looks like this. You see, it's much shorter, but it does the same.\r\n\r\n```js\r\nhotKey(\r\n\t'ctrl+s',\r\n\t() => { console.log('Ctrl+S pressed') },\r\n\ttrue\r\n)\r\n```\r\n\r\n## Conclusion\r\n\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2021%20-%20Hotkeys%20with%20JavaScript)\r\n\r\nExcellent! You have successfully created functions for setting up Keyboard shortcuts using JavaScript code!\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!",
        "featured_image": "021 - Hotkeys with JavaScript\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 680,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>In this short Tutorial, we will make two functions that will make it easy to set up keyboard shortcuts. one function will accept an object as a parameter, and another will receive a string in the likes of <code>ctrl+a<\/code> or `shift-alt-for and a callback function. The second one will call the first one because it is essentially the same, just easier for programming. Let's get started!<\/p>\n<h2>Function with Object Parameter<\/h2>\n<p>We start with the object parameter function. It sounds more complex than it is. For the parameter, we can destructure objects, as you see below. Here we can also set default values. So we want to know the key, and the programmer can specify if the <code>ctrl<\/code>, <code>alt<\/code>, or <code>shift<\/code> keys should be pressed for this shortcut. We also give the option to prevent the default action of the shortcut so, for example, <code>ctrl+s<\/code> won't trigger a page safe. We also want a callback and the option to specify which element the event listener is in. Since this is an object, the programmer can give the arguments in any order. Inside the function, we immediately get to an event listener.<\/p>\n<pre><code class=\"language-js\">function hotkeyHandler({key, ctrlKey=null, altKey=null, shiftKey=null, preventDefault=false, callback=() =&gt; {}, element=document}) {\n    element.addEventListener('keydown', ev =&gt; {\n        ...\n    })\n}<\/code><\/pre>\n<p>Now inside the event listener, we check a few things starting with the key. If the key in the event and the arguments don't match, nothing should happen, so we return. We then do something very similar for the three modifier keys. We check if the argument is not set to null and if the argument value and event value match up. We do it this way so the user can specify that, for example, alt should not be pressed, the shift should be pressed, or it does not matter if ctrl was pressed. By doing it this way, we say we don't care whether the modifier was pressed by default.<\/p>\n<p>We then call the <code>ev.preventDefault()<\/code> function if the programmer says it should be called. This function will tell the browser not to do the default thing for this keyboard shortcut. Lastly, we call the callback given as an argument.<\/p>\n<pre><code class=\"language-js\">if (ev.key.toLowerCase() != key.toLowerCase()) return\nif (ctrlKey != null &amp;&amp; ev.ctrlKey != ctrlKey) return\nif (altKey != null &amp;&amp; ev.altKey != altKey) return\nif (shiftKey != null &amp;&amp; ev.shiftKey != shiftKey) return\n\nif (preventDefault) ev.preventDefault()\n\ncallback()<\/code><\/pre>\n<h3>Setting up a shortcut<\/h3>\n<p>The code below shows how one would set up <code>ctrl+s<\/code> to work with our function. Of course, since this will trigger a page save, we need to prevent the default action.<\/p>\n<pre><code class=\"language-js\">hotkeyHandler({\n    key: 's',\n    ctrlKey: true,\n    callback: () =&gt; {\n        console.log('Ctrl+S pressed');\n    },\n    preventDefault: true,\n})<\/code><\/pre>\n<p>This is alright, but maybe we can make a shorter version ...<\/p>\n<h2>Function with string Parameter<\/h2>\n<p>Let's also look at how to make a wrapper function for more straightforward but less detailed usage. This function will ask for a hotkey string, a callback, and whether to prevent the default or not. The hotkey string should look like this: <code>ctrl+a<\/code> or <code>shift-alt-o<\/code>, <code>ctrl+Backspace<\/code>. The key must come last in this order.<\/p>\n<p>In the function, we search for the key with regex. We use the string end anchor for this. We then build the argument object with the key, callback, and preventDefault option. We then see if the respective modifier keys have been mentioned in the hotkey string and set this argument according to that. Doing it this way means we can not say <em>only if shift was not pressed<\/em>, but that's alright for simple use cases. Lastly, we also call the other function with these arguments.<\/p>\n<pre><code class=\"language-js\">function hotKey(hotkey, callback, preventDefault=false) {\n    const key = hotkey.match(\/[a-z0-9]*$\/i)[0];\n\n    const args = {\n        key,\n        ctrlKey: hotkey.match(\/CTRL\/i) != null ? true : null,\n        shiftKey: hotkey.match(\/shift\/i) != null ? true : null,\n        altKey: hotkey.match(\/alt\/i) != null ? true : null,\n        callback,\n        preventDefault\n    }\n\n    hotkeyHandler(args);\n}<\/code><\/pre>\n<h3>Setting up a shortcut<\/h3>\n<p>Setting up the same keyboard shortcut as above looks like this. You see, it's much shorter, but it does the same.<\/p>\n<pre><code class=\"language-js\">hotKey(\n    'ctrl+s',\n    () =&gt; { console.log('Ctrl+S pressed') },\n    true\n)<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p><a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2021%20-%20Hotkeys%20with%20JavaScript\">Look at the Code<\/a><\/p>\n<p>Excellent! You have successfully created functions for setting up Keyboard shortcuts using JavaScript code!<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Keyboard Shortcuts with JavaScript",
            "post_excerpt": "Learn how to make functions to set up keyboard shortcuts easily in JavaScript",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "shortcuts-with-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/shortcuts-with-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Sortable Table with JavaScript",
        "description": "Learn how to make sortable tables with JavaScript. We utilize the map and filter methods of Arrays.",
        "slug": "sortable-table-with-javascript",
        "raw_content": "## Idea\r\nIn this Tutorial, we will make a sortable table with JavaScript. We will make it so we can have any number of tables on our page and set them to be sortable and we will differentiate between numbers and strings. We will also make it that so when the user clicks the head once it sorts ascending and if they click again it will sort in descending order. We will make use of functions like `map` and `filter`.\r\n\r\n## JavaScript\r\n\r\nBefore we get into the JavaScript part of this Tutorial I want to explain the crude structure of the program. Also, keep in mind that I am no pro whatsoever so there might be easier ways to do this.\r\n\r\nIn essence, we will add an event listener for each table head column for each table and in the click callback, we get the data rows as a list of objects and then we sort them by the column values. Lastly, we reinsert the rows in this ordered fashion.\r\n\r\nLet's look at how this looks in practice. So this trick works for multiple tables we start by looping over every table that has the `data-sortable` attribute. Then we save the table body and column head elements to two variables respectively. We then loop over each column head and we add an event listener for the `pointerdown` event to them. In each loop, we supply a second parameter `i` which will be the index of the current element.\r\n\r\n```js\r\nfor (const table of document.querySelectorAll('[data-sortable]')) {\r\n    const tbody = table.querySelector('tbody');\r\n    let columnHeads = Array.from(table.querySelectorAll('thead tr th, thead tr td'))\r\n\r\n\r\n    columnHeads.forEach((columnHead, i) => {\r\n\r\n        columnHead.addEventListener('pointerdown', () => {\r\n            ...\r\n        })\r\n    })\r\n}\r\n```\r\n\r\nThe rest of the Code will happen inside the callback of the event listener. So inside there we start by getting the value of the `data-sortable-state` attribute of the column header. Then we do something a little bit complicated but bear with me. We get each row of the table and then we loop over this array with the `map` method that creates a new array. We then get the cell value at the given index so below the column header. We then transform this value to a float in case it could be one. Lastly, we return an object with the element itself and the value. This new list is stored in the `organisedData` variable.\r\n\r\n```js\r\n\/\/ Get current state (asc, desc or none)\r\nconst state = columnHead.getAttribute('data-sortable-state')\r\n\r\n\/\/ Loop over each row and save value of cell with corresponding column name\r\nconst rows = Array.from(table.querySelectorAll('tbody tr'));\r\nlet organisedData = rows.map((ele) => {\r\n    let value = ele.querySelectorAll('td')[i].innerHTML\r\n\r\n    \/\/ If the value is a valid number it should save the float value\r\n    if (!isNaN(value)) value = parseFloat(value)\r\n\r\n    return {\r\n        element: ele,\r\n        'value': value\r\n    }\r\n})\r\n```\r\n\r\nThen we check if the state is ascending if that's the case we toggle the attribute to `desc` and we sort the `organisedData` list with a customized key. We do the opposite if the state was `desc` or `undefined`.\r\n\r\n```js\r\n\/\/ Set the new state essentialy toggling ascending \/ descending\r\n\/\/ sort organised data either ascending or descending by the value key\r\nif (state === 'asc') {\r\n    columnHead.setAttribute('data-sortable-state', 'desc')\r\n\r\n    organisedData = organisedData.sort((a, b) => (a.value < b.value) ? 1 : -1)\r\n} else {\r\n    columnHead.setAttribute('data-sortable-state', 'asc')\r\n\r\n    organisedData = organisedData.sort((a, b) => (a.value > b.value) ? 1 : -1)\r\n}\r\n```\r\n\r\nLastly, we reset the rows of the body according to this new sorted list and we set the `data-sortable-state` to an empty string.\r\n\r\n```js\r\n\/\/ Update the content of the Table Body with the sorted Array\r\ntbody.innerHTML = '';\r\nfor (const row of organisedData) {\r\n    tbody.appendChild(row.element);\r\n}\r\n\r\n\/\/ Reset the Attributes for the other Heads\r\ncolumnHeads.forEach(otherColumnHead => {\r\n    if (otherColumnHead != columnHead) {\r\n        otherColumnHead.setAttribute('data-sortable-state', '')\r\n    }\r\n})\r\n```\r\n\r\n## HTML Mockup of a sortable table\r\n\r\nNow that we have the JavaScript part out of the way we can look at how such a table must look like so it works. We simply have to give the table element itself the `data-sortable` attribute and we have to define a `thead` and `tbody`. Because of the way we made the code we can add as many tables as we want to our site and each one should work as intended.\r\n\r\n```html\r\n<table data-sortable>\r\n\t<thead>\r\n\t    <tr>\r\n\t        <th>Id<\/th>\r\n\t        <th>Name<\/th>\r\n\t    <\/tr>\r\n\t<\/thead>\r\n\t<tbody>\r\n\t    <tr>\r\n\t        <td>1<\/td>\r\n\t        <td>Maxim<\/td>\r\n\t    <\/tr>\r\n\t    <tr>\r\n\t        <td>2<\/td>\r\n\t        <td>Alex<\/td>\r\n\t    <\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n```\r\n\r\n## Links\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/Sortable%20Table\/)\r\n[Look at the Code](https:\/\/articles.maximmaeder.com\/a\/Sortable%20Table\/)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created sortable tables using JavaScript code! See how you\u00a7 can add more features to this program such as resetting to the initial state or links that sort the table.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way! \ud83d\ude0e\ud83d\ude0b ( Did you know you can open an Emoji Picker using `windows + .` on windows )",
        "featured_image": "022 - Sortable Tables\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 682,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\nIn this Tutorial, we will make a sortable table with JavaScript. We will make it so we can have any number of tables on our page and set them to be sortable and we will differentiate between numbers and strings. We will also make it that so when the user clicks the head once it sorts ascending and if they click again it will sort in descending order. We will make use of functions like <code>map<\/code> and <code>filter<\/code>.\n<h2>JavaScript<\/h2>\nBefore we get into the JavaScript part of this Tutorial I want to explain the crude structure of the program. Also, keep in mind that I am no pro whatsoever so there might be easier ways to do this.\n\nIn essence, we will add an event listener for each table head column for each table and in the click callback, we get the data rows as a list of objects and then we sort them by the column values. Lastly, we reinsert the rows in this ordered fashion.\n\nLet's look at how this looks in practice. So this trick works for multiple tables we start by looping over every table that has the <code>data-sortable<\/code> attribute. Then we save the table body and column head elements to two variables respectively. We then loop over each column head and we add an event listener for the <code>pointerdown<\/code> event to them. In each loop, we supply a second parameter <code>i<\/code> which will be the index of the current element.\n<pre><code class=\"language-js\">for (const table of document.querySelectorAll('[data-sortable]')) {\n    const tbody = table.querySelector('tbody');\n    let columnHeads = Array.from(table.querySelectorAll('thead tr th, thead tr td'))\n\n    columnHeads.forEach((columnHead, i) =&gt; {\n\n        columnHead.addEventListener('pointerdown', () =&gt; {\n            ...\n        })\n    })\n}<\/code><\/pre>\nThe rest of the Code will happen inside the callback of the event listener. So inside there we start by getting the value of the <code>data-sortable-state<\/code> attribute of the column header. Then we do something a little bit complicated but bear with me. We get each row of the table and then we loop over this array with the <code>map<\/code> method that creates a new array. We then get the cell value at the given index so below the column header. We then transform this value to a float in case it could be one. Lastly, we return an object with the element itself and the value. This new list is stored in the <code>organisedData<\/code> variable.\n<pre><code class=\"language-js\">\/\/ Get current state (asc, desc or none)\nconst state = columnHead.getAttribute('data-sortable-state')\n\n\/\/ Loop over each row and save value of cell with corresponding column name\nconst rows = Array.from(table.querySelectorAll('tbody tr'));\nlet organisedData = rows.map((ele) =&gt; {\n    let value = ele.querySelectorAll('td')[i].innerHTML\n\n    \/\/ If the value is a valid number it should save the float value\n    if (!isNaN(value)) value = parseFloat(value)\n\n    return {\n        element: ele,\n        'value': value\n    }\n})<\/code><\/pre>\nThen we check if the state is ascending if that's the case we toggle the attribute to <code>desc<\/code> and we sort the <code>organisedData<\/code> list with a customized key. We do the opposite if the state was <code>desc<\/code> or <code>undefined<\/code>.\n<pre><code class=\"language-js\">\/\/ Set the new state essentialy toggling ascending \/ descending\n\/\/ sort organised data either ascending or descending by the value key\nif (state === 'asc') {\n    columnHead.setAttribute('data-sortable-state', 'desc')\n\n    organisedData = organisedData.sort((a, b) =&gt; (a.value &lt; b.value) ? 1 : -1)\n} else {\n    columnHead.setAttribute('data-sortable-state', 'asc')\n\n    organisedData = organisedData.sort((a, b) =&gt; (a.value &gt; b.value) ? 1 : -1)\n}<\/code><\/pre>\nLastly, we reset the rows of the body according to this new sorted list and we set the <code>data-sortable-state<\/code> to an empty string.\n<pre><code class=\"language-js\">\/\/ Update the content of the Table Body with the sorted Array\ntbody.innerHTML = '';\nfor (const row of organisedData) {\n    tbody.appendChild(row.element);\n}\n\n\/\/ Reset the Attributes for the other Heads\ncolumnHeads.forEach(otherColumnHead =&gt; {\n    if (otherColumnHead != columnHead) {\n        otherColumnHead.setAttribute('data-sortable-state', '')\n    }\n})<\/code><\/pre>\n<h2>HTML Mockup of a sortable table<\/h2>\nNow that we have the JavaScript part out of the way we can look at how such a table must look like so it works. We simply have to give the table element itself the <code>data-sortable<\/code> attribute and we have to define a <code>thead<\/code> and <code>tbody<\/code>. Because of the way we made the code we can add as many tables as we want to our site and each one should work as intended.\n<pre><code class=\"language-html\">&lt;table data-sortable&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Id&lt;\/th&gt;\n            &lt;th&gt;Name&lt;\/th&gt;\n        &lt;\/tr&gt;\n    &lt;\/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;1&lt;\/td&gt;\n            &lt;td&gt;Maxim&lt;\/td&gt;\n        &lt;\/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;2&lt;\/td&gt;\n            &lt;td&gt;Alex&lt;\/td&gt;\n        &lt;\/tr&gt;\n    &lt;\/tbody&gt;\n&lt;\/table&gt;<\/code><\/pre>\n<h2>Links<\/h2>\n<a href=\"https:\/\/articles.maximmaeder.com\/a\/Sortable%20Table\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/articles.maximmaeder.com\/a\/Sortable%20Table\/\">Look at the Code<\/a>\n<h2>Conclusion<\/h2>\nExcellent! You have successfully created sortable tables using JavaScript code! See how you\u00a7 can add more features to this program such as resetting to the initial state or links that sort the table.\n\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way! \ud83d\ude0e\ud83d\ude0b ( Did you know you can open an Emoji Picker using <code>windows + .<\/code> on windows )",
            "post_title": "Sortable Table with JavaScript",
            "post_excerpt": "Learn how to make sortable tables with JavaScript. We utilize the map and filter methods of Arrays.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "sortable-table-with-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-13 09:43:13",
            "post_modified_gmt": "2023-02-13 08:43:13",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/sortable-table-with-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "File Explorer with Vue.js",
        "description": "let's make a small JSON-based File Explorer with vue.js, Learn about methods, computed properties, and other awesome things you can do with vue.",
        "slug": "file-explorer-with-vue-js",
        "raw_content": "## Idea\r\n\r\nIn this Tutorial, we will utilize the JavaScript Framework [Vue.js](https:\/\/vuejs.org\/) to make a small dummy file explorer, where we can add, rename and delete files and folders via buttons. We will make it so we can enter folders via their content and for the files, we make their text content editable. This program served the purpose of learning Vue for me and it could very well be that I do something not the best way so keep that in mind. To keep it simple we won't use components and we will not use a build step.\r\n\r\nWe first go over the HTML of the page and then we will cover the JavaScript and CSS. Below you see a GIF showcasing the Explorer. you can also visit the Live Demo.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/10\/explorer.gif)\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/File%20Explorer\/)\r\n\r\n## HTML\r\n\r\nBelow you can see the scaffolding of the HTML Page. We need to import the style sheet and the JavaScript of Vue.js via a Content Delivery System. We also include our `index.js` file at the end of the body with the *type* attribute set to *\"module\"*. The `div` with `id=\"vueapp\"` will host our vue application.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>File Explorer<\/title>\r\n\r\n    <script src=\"https:\/\/unpkg.com\/vue@3\/dist\/vue.global.js\"><\/script>\r\n\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n<\/head>\r\n\r\n<body>\r\n    <div id=\"vueapp\" class=\"container\">\r\n\t\t<!-- Here Goes the App Code -->\r\n    <\/div>\r\n    <script src=\"index.js\" type=\"module\"><\/script>\r\n<\/body>\r\n\r\n<\/html>\r\n```\r\n\r\nLet's also go over all the HTML code inside the App. The first element will be the header where the buttons are. The *\"Back\"* button will as its name suggests, go one folder up so it should be disabled if we are in the root directory. We can set the `disabled` property dynamically in vue by prefixing it with a colon (`:`), in the value, we can insert any expression, in this case, we disable the button in case the path variable is `''`. We also add and click event handler that will call a function called `goUp`, we also do this for the *\"Add Folder\"*, *\"Add File\"*, and *\"Delete\"* buttons. These functions will be later defined in the JavaScript file. For the Delete button, we also disable it in case there is no item selected, we do this with computed property, which will also be defined later.\r\n\r\n```html\r\n<header>\r\n    <button @click=\"goUp()\" :disabled=\"path == ''\">Back<\/button>\r\n    <input type=\"text\" v-model=\"path\" placeholder=\"Path\">\r\n\r\n\r\n    <button class=\"btn-flat\" @click=\"addFolder()\">Add Folder<\/button>\r\n    <button class=\"btn-flat\" @click=\"addFile()\">Add File<\/button>\r\n    <button class=\"btn-flat\" @click=\"deleteItem()\" :disabled=\"focusedItemExists\">Delete<\/button>\r\n<\/header>\r\n```\r\n\r\nThen we also need to show the current file tree layer and we do this in a table. Inside the `tbody` we add a `v-for` loop that duplicates the row element for each item in the current tree. The `getTree()` function will be used often, it simply returns a list representing the current file Tree according to the path. Anyway, in vue for loop, we can get the key if we do it this way `(item, key) in list` so we do that. In the same element, we toggle a class depending on its key and the current state. The `current` variable will hold the key to the currently focused element. We add a click handler that sets `current` to `key` and we also add a double click handler with a function that receives the `key` and `item` from the loop. \r\n\r\nIn the first cell Insert the value of the type attribute of the item and in the second cell, we insert an input that receives the key as the value. We connect this input element with a change event where we call the `nameChangeRequest` with the event and key as arguments. We cant use `v-model` here because the key is actually a key in a dictionary so we can't simply connect it, we later see what this entails exactly.\r\n\r\n```html\r\n<main>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Type<\/th>\r\n                <th>Name<\/th>\r\n                <th>Size<\/th>\r\n            <\/tr>\r\n        <\/thead>\r\n        <tbody>\r\n            <tr v-for=\"(item, key) in getTree()\" :class=\"{current: key == current}\" @click=\"current=key\"\r\n                @dblclick=\"openAction(key, item)\">\r\n\r\n                <td>{{ item.type }}<\/td>\r\n                <td>\r\n                    <input type=\"text\" :value=\"key\" @change=\"ev => nameChangeRequest(ev, key)\">\r\n                <\/td>\r\n                <td>\r\n                    {{JSON.stringify(item.content).length}} Bytes\r\n                <\/td>\r\n            <\/tr>\r\n        <\/tbody>\r\n    <\/table>\r\n<\/main>\r\n```\r\n\r\nLastly, we add a div at the end that will be only rendered if the type of the current item is file. If that's the case it will show the file name and a textarea that shows the content of the file and makes it editable.\r\n\r\n```html\r\n<div v-if=\"getTree()[current]?.type == 'file'\">\r\n    <h2>Edit File <i>{{ current }}<\/i><\/h2>\r\n    <textarea v-model=\"getTree()[current].content\"><\/textarea>\r\n<\/div>\r\n```\r\n\r\n## JavaScript ( Vue.js )\r\n\r\nLet's get to the JavaScript of the Program. I have split this Part into three parts. Below you see the scaffolding for the App. We use the `createApp()` function of the the Vue global object. We supply all the options of our app as an object. Let us go over the different keys of this object.\r\n\r\nThe Data function should return all the globally available data (also an object). The Methods object holds all custom functions that are also globally available. Computed is similar in the sense that its caching is better. Watch is used to watch keys of the global data attribute. Lastly, with the Mounted hook, we can do things as soon as the app is started.\r\n\r\n```js\r\nconst app = Vue.createApp({\r\n    data() {\r\n        ...\r\n    },\r\n    methods: {\r\n\t    ...\r\n    },\r\n    computed: {\r\n        ...\r\n    },\r\n    watch: {\r\n        ...\r\n    },\r\n    mounted() {\r\n        ...\r\n    }\r\n})\r\n\r\n\r\n\/\/ We also need to mount the app on an HTML Element.\r\n\r\napp.mount('#vueapp')\r\n```\r\n\r\n### Data\r\n\r\nLet's also quickly go over the global data. That path key holds a path like this `this\/is\/a\/path`. `current` holds the key of the current file. Lastly `tree` will hold the actual file structure, Each file\/folder is another key with a type and content. For folders, the content is another object and for files, it's simply a string.\r\n\r\n```js\r\n{\r\n\tpath: '',\r\n\tcurrent: 'Hello.txt',\r\n\ttree: {\r\n\t    'Hello.txt': {\r\n\t        type: 'file',\r\n\t        content: 'Hello How Are You'\r\n\t    },\r\n\t    'Folder': {\r\n\t        type: 'folder',\r\n\t        content: {}\r\n    },\r\n}\r\n```\r\n\r\n### Methods\r\n\r\nLet's quickly go over all the custom Methods.\r\n\r\n\r\n`getTree()` will be used often it simply returns the object of the current path by reducing the path variable.\r\n\r\n```js\r\ngetTree() {\r\n    if (this.path == '') return this.tree\r\n\r\n    try {\r\n        return this.path.split('\/').reduce((pre, current) => {\r\n            return pre[current].content\r\n        }, this.tree)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n},\r\n```\r\n\r\n`addFolder` and `addFile` are pretty similar. They add a file or folder in the current tree.\r\n\r\n```js\r\naddFolder() {\r\n    const currentTree = this.getTree()\r\n    \r\n    currentTree['New Folder'] = {\r\n        type: 'folder',\r\n        content: {}\r\n    }\r\n},\r\n\r\naddFile() {\r\n    const currentTree = this.getTree()\r\n    \r\n    currentTree['New File'] = {\r\n        type: 'file',\r\n        content: ''\r\n    }\r\n},\r\n```\r\n\r\n`openAction` will open a folder by adding its name to the path variable.\r\n\r\n```js\r\nopenAction: function (name, item) {\r\n\r\n    if (item.type === 'folder') {\r\n        this.path += this.path == '' ? name : '\/' + name\r\n    }\r\n},\r\n```\r\n\r\n`deleteItem` is pretty obvious, and `nameChangeRequest` will handle the change of a file name. This is a little complicated because its a key not a value.\r\n\r\n```js\r\ndeleteItem() {\r\n    const currentTree = this.getTree()\r\n\r\n    delete currentTree[this.current]\r\n\r\n    this.current = ''\r\n},\r\n\r\nnameChangeRequest(ev, ogKey) {            \r\n    this.getTree()[ev.target.value] = this.getTree()[ogKey]\r\n\r\n    delete this.getTree()[ogKey]\r\n\r\n    this.current = ev.target.value\r\n\r\n    ev.target.blur();\r\n}\r\n```\r\n\r\n### Computed, Watch, and Mounted\r\n\r\nInside Computed we have a function that simply checks if the focused item is in the current directory.\r\n\r\n```js\r\nfocusedItemExists() {\r\n    return !Object.keys(this.getTree()).includes(this.current)\r\n}\r\n```\r\n\r\nThen we also watch the tree variable for any changes and we handle them by storing the tree in the localstorage.\r\n\r\n```js\r\ntree: {\r\n    handler(newValue, oldValue) {\r\n        localStorage.setItem('vue-explorer', JSON.stringify(this.tree))\r\n    },\r\n    deep: true,\r\n}\r\n```\r\n\r\nLastly, inside the mounted function, we check if there is any data in the local storage and if there is we set the tree to this value so the tree survives page reloads.\r\n\r\n```js\r\nconst cachedTree = localStorage.getItem('vue-explorer')\r\n\r\nif (cachedTree) {\r\n    this.tree = JSON.parse(cachedTree)\r\n}\r\n```\r\n\r\nThat's it for the JavaScript of the program.\r\n\r\n## CSS\r\n\r\nBelow you can also see the CSS, which I won't explain further right now.\r\n\r\n```css\r\nbody {\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    margin: 0;\r\n    background-color: hsl(200, 50%, 3%);\r\n    color: hsl(200, 50%, 80%);\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.current {\r\n    background-color: hsla(221, 100%, 84%, 0.2);\r\n}\r\n\r\ntable {\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n}\r\n\r\nthead th {\r\n    text-align: left;\r\n}\r\n\r\ntd,\r\nth {\r\n    padding: 0.5rem;\r\n    user-select: none;\r\n}\r\n\r\ninput,\r\nbutton,\r\ntextarea {\r\n    font: inherit;\r\n    color: inherit;\r\n    background-color: inherit;\r\n    border: none;\r\n    height: 100%;\r\n}\r\n\r\nbutton:disabled {\r\n    opacity: 0.5;\r\n}\r\n\r\nbutton:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.btn:hover {\r\n    background-color: hsl(200, 50%, 23%);\r\n}\r\n\r\ntable input {\r\n    border: none;\r\n    background-color: transparent;\r\n}\r\n\r\ntextarea {\r\n    width: 100%;\r\n    height: 200px;\r\n    resize: none;\r\n}\r\n\r\n#vueapp {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n}\r\n\r\nmain {\r\n    flex-grow: 1;\r\n    overflow-y: auto;\r\n}\r\n\r\n.container {\r\n    max-width: 800px;\r\n    margin: 0 auto;\r\n    padding: 1rem;\r\n}\r\n\r\nheader {\r\n    height: 40px;\r\n    display: flex;\r\n    margin-top: 3rem;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\nheader input {\r\n    flex-grow: 1;\r\n    font-style: italic;\r\n}\r\n```\r\n\r\n## Showcase\r\n\r\n![Showcase of the Vue File Explorer](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/10\/explorer.gif)\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/File%20Explorer\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2023%20-%20File%20Explorer%20with%20Vue.js)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a File Explorer using Vue.js code! See how you can add more features to this program such as different file types or drag and drop.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "023 - File Explorer\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 683,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>In this Tutorial, we will utilize the JavaScript Framework <a href=\"https:\/\/vuejs.org\/\">Vue.js<\/a> to make a small dummy file explorer, where we can add, rename and delete files and folders via buttons. We will make it so we can enter folders via their content and for the files, we make their text content editable. This program served the purpose of learning Vue for me and it could very well be that I do something not the best way so keep that in mind. To keep it simple we won't use components and we will not use a build step.<\/p>\n<p>We first go over the HTML of the page and then we will cover the JavaScript and CSS. Below you see a GIF showcasing the Explorer. you can also visit the Live Demo.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/10\/explorer.gif\" alt=\"enter image description here\" \/>\n<a href=\"https:\/\/articles.maximmaeder.com\/a\/File%20Explorer\/\">Visit the Demonstration<\/a><\/p>\n<h2>HTML<\/h2>\n<p>Below you can see the scaffolding of the HTML Page. We need to import the style sheet and the JavaScript of Vue.js via a Content Delivery System. We also include our <code>index.js<\/code> file at the end of the body with the <em>type<\/em> attribute set to <em>&quot;module&quot;<\/em>. The <code>div<\/code> with <code>id=\"vueapp\"<\/code> will host our vue application.<\/p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;File Explorer&lt;\/title&gt;\n\n    &lt;script src=\"https:\/\/unpkg.com\/vue@3\/dist\/vue.global.js\"&gt;&lt;\/script&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;\/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"vueapp\" class=\"container\"&gt;\n        &lt;!-- Here Goes the App Code --&gt;\n    &lt;\/div&gt;\n    &lt;script src=\"index.js\" type=\"module\"&gt;&lt;\/script&gt;\n&lt;\/body&gt;\n\n&lt;\/html&gt;<\/code><\/pre>\n<p>Let's also go over all the HTML code inside the App. The first element will be the header where the buttons are. The <em>&quot;Back&quot;<\/em> button will as its name suggests, go one folder up so it should be disabled if we are in the root directory. We can set the <code>disabled<\/code> property dynamically in vue by prefixing it with a colon (<code>:<\/code>), in the value, we can insert any expression, in this case, we disable the button in case the path variable is <code>''<\/code>. We also add and click event handler that will call a function called <code>goUp<\/code>, we also do this for the <em>&quot;Add Folder&quot;<\/em>, <em>&quot;Add File&quot;<\/em>, and <em>&quot;Delete&quot;<\/em> buttons. These functions will be later defined in the JavaScript file. For the Delete button, we also disable it in case there is no item selected, we do this with computed property, which will also be defined later.<\/p>\n<pre><code class=\"language-html\">&lt;header&gt;\n    &lt;button @click=\"goUp()\" :disabled=\"path == ''\"&gt;Back&lt;\/button&gt;\n    &lt;input type=\"text\" v-model=\"path\" placeholder=\"Path\"&gt;\n\n    &lt;button class=\"btn-flat\" @click=\"addFolder()\"&gt;Add Folder&lt;\/button&gt;\n    &lt;button class=\"btn-flat\" @click=\"addFile()\"&gt;Add File&lt;\/button&gt;\n    &lt;button class=\"btn-flat\" @click=\"deleteItem()\" :disabled=\"focusedItemExists\"&gt;Delete&lt;\/button&gt;\n&lt;\/header&gt;<\/code><\/pre>\n<p>Then we also need to show the current file tree layer and we do this in a table. Inside the <code>tbody<\/code> we add a <code>v-for<\/code> loop that duplicates the row element for each item in the current tree. The <code>getTree()<\/code> function will be used often, it simply returns a list representing the current file Tree according to the path. Anyway, in vue for loop, we can get the key if we do it this way <code>(item, key) in list<\/code> so we do that. In the same element, we toggle a class depending on its key and the current state. The <code>current<\/code> variable will hold the key to the currently focused element. We add a click handler that sets <code>current<\/code> to <code>key<\/code> and we also add a double click handler with a function that receives the <code>key<\/code> and <code>item<\/code> from the loop. <\/p>\n<p>In the first cell Insert the value of the type attribute of the item and in the second cell, we insert an input that receives the key as the value. We connect this input element with a change event where we call the <code>nameChangeRequest<\/code> with the event and key as arguments. We cant use <code>v-model<\/code> here because the key is actually a key in a dictionary so we can't simply connect it, we later see what this entails exactly.<\/p>\n<pre><code class=\"language-html\">&lt;main&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Type&lt;\/th&gt;\n                &lt;th&gt;Name&lt;\/th&gt;\n                &lt;th&gt;Size&lt;\/th&gt;\n            &lt;\/tr&gt;\n        &lt;\/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr v-for=\"(item, key) in getTree()\" :class=\"{current: key == current}\" @click=\"current=key\"\n                @dblclick=\"openAction(key, item)\"&gt;\n\n                &lt;td&gt;{{ item.type }}&lt;\/td&gt;\n                &lt;td&gt;\n                    &lt;input type=\"text\" :value=\"key\" @change=\"ev =&gt; nameChangeRequest(ev, key)\"&gt;\n                &lt;\/td&gt;\n                &lt;td&gt;\n                    {{JSON.stringify(item.content).length}} Bytes\n                &lt;\/td&gt;\n            &lt;\/tr&gt;\n        &lt;\/tbody&gt;\n    &lt;\/table&gt;\n&lt;\/main&gt;<\/code><\/pre>\n<p>Lastly, we add a div at the end that will be only rendered if the type of the current item is file. If that's the case it will show the file name and a textarea that shows the content of the file and makes it editable.<\/p>\n<pre><code class=\"language-html\">&lt;div v-if=\"getTree()[current]?.type == 'file'\"&gt;\n    &lt;h2&gt;Edit File &lt;i&gt;{{ current }}&lt;\/i&gt;&lt;\/h2&gt;\n    &lt;textarea v-model=\"getTree()[current].content\"&gt;&lt;\/textarea&gt;\n&lt;\/div&gt;<\/code><\/pre>\n<h2>JavaScript ( Vue.js )<\/h2>\n<p>Let's get to the JavaScript of the Program. I have split this Part into three parts. Below you see the scaffolding for the App. We use the <code>createApp()<\/code> function of the the Vue global object. We supply all the options of our app as an object. Let us go over the different keys of this object.<\/p>\n<p>The Data function should return all the globally available data (also an object). The Methods object holds all custom functions that are also globally available. Computed is similar in the sense that its caching is better. Watch is used to watch keys of the global data attribute. Lastly, with the Mounted hook, we can do things as soon as the app is started.<\/p>\n<pre><code class=\"language-js\">const app = Vue.createApp({\n    data() {\n        ...\n    },\n    methods: {\n        ...\n    },\n    computed: {\n        ...\n    },\n    watch: {\n        ...\n    },\n    mounted() {\n        ...\n    }\n})\n\n\/\/ We also need to mount the app on an HTML Element.\n\napp.mount('#vueapp')<\/code><\/pre>\n<h3>Data<\/h3>\n<p>Let's also quickly go over the global data. That path key holds a path like this <code>this\/is\/a\/path<\/code>. <code>current<\/code> holds the key of the current file. Lastly <code>tree<\/code> will hold the actual file structure, Each file\/folder is another key with a type and content. For folders, the content is another object and for files, it's simply a string.<\/p>\n<pre><code class=\"language-js\">{\n    path: '',\n    current: 'Hello.txt',\n    tree: {\n        'Hello.txt': {\n            type: 'file',\n            content: 'Hello How Are You'\n        },\n        'Folder': {\n            type: 'folder',\n            content: {}\n    },\n}<\/code><\/pre>\n<h3>Methods<\/h3>\n<p>Let's quickly go over all the custom Methods.<\/p>\n<p><code>getTree()<\/code> will be used often it simply returns the object of the current path by reducing the path variable.<\/p>\n<pre><code class=\"language-js\">getTree() {\n    if (this.path == '') return this.tree\n\n    try {\n        return this.path.split('\/').reduce((pre, current) =&gt; {\n            return pre[current].content\n        }, this.tree)\n    } catch (err) {\n        return undefined\n    }\n},<\/code><\/pre>\n<p><code>addFolder<\/code> and <code>addFile<\/code> are pretty similar. They add a file or folder in the current tree.<\/p>\n<pre><code class=\"language-js\">addFolder() {\n    const currentTree = this.getTree()\n\n    currentTree['New Folder'] = {\n        type: 'folder',\n        content: {}\n    }\n},\n\naddFile() {\n    const currentTree = this.getTree()\n\n    currentTree['New File'] = {\n        type: 'file',\n        content: ''\n    }\n},<\/code><\/pre>\n<p><code>openAction<\/code> will open a folder by adding its name to the path variable.<\/p>\n<pre><code class=\"language-js\">openAction: function (name, item) {\n\n    if (item.type === 'folder') {\n        this.path += this.path == '' ? name : '\/' + name\n    }\n},<\/code><\/pre>\n<p><code>deleteItem<\/code> is pretty obvious, and <code>nameChangeRequest<\/code> will handle the change of a file name. This is a little complicated because its a key not a value.<\/p>\n<pre><code class=\"language-js\">deleteItem() {\n    const currentTree = this.getTree()\n\n    delete currentTree[this.current]\n\n    this.current = ''\n},\n\nnameChangeRequest(ev, ogKey) {            \n    this.getTree()[ev.target.value] = this.getTree()[ogKey]\n\n    delete this.getTree()[ogKey]\n\n    this.current = ev.target.value\n\n    ev.target.blur();\n}<\/code><\/pre>\n<h3>Computed, Watch, and Mounted<\/h3>\n<p>Inside Computed we have a function that simply checks if the focused item is in the current directory.<\/p>\n<pre><code class=\"language-js\">focusedItemExists() {\n    return !Object.keys(this.getTree()).includes(this.current)\n}<\/code><\/pre>\n<p>Then we also watch the tree variable for any changes and we handle them by storing the tree in the localstorage.<\/p>\n<pre><code class=\"language-js\">tree: {\n    handler(newValue, oldValue) {\n        localStorage.setItem('vue-explorer', JSON.stringify(this.tree))\n    },\n    deep: true,\n}<\/code><\/pre>\n<p>Lastly, inside the mounted function, we check if there is any data in the local storage and if there is we set the tree to this value so the tree survives page reloads.<\/p>\n<pre><code class=\"language-js\">const cachedTree = localStorage.getItem('vue-explorer')\n\nif (cachedTree) {\n    this.tree = JSON.parse(cachedTree)\n}<\/code><\/pre>\n<p>That's it for the JavaScript of the program.<\/p>\n<h2>CSS<\/h2>\n<p>Below you can also see the CSS, which I won't explain further right now.<\/p>\n<pre><code class=\"language-css\">body {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin: 0;\n    background-color: hsl(200, 50%, 3%);\n    color: hsl(200, 50%, 80%);\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.current {\n    background-color: hsla(221, 100%, 84%, 0.2);\n}\n\ntable {\n    border-collapse: collapse;\n    width: 100%;\n}\n\nthead th {\n    text-align: left;\n}\n\ntd,\nth {\n    padding: 0.5rem;\n    user-select: none;\n}\n\ninput,\nbutton,\ntextarea {\n    font: inherit;\n    color: inherit;\n    background-color: inherit;\n    border: none;\n    height: 100%;\n}\n\nbutton:disabled {\n    opacity: 0.5;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.btn:hover {\n    background-color: hsl(200, 50%, 23%);\n}\n\ntable input {\n    border: none;\n    background-color: transparent;\n}\n\ntextarea {\n    width: 100%;\n    height: 200px;\n    resize: none;\n}\n\n#vueapp {\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n}\n\nmain {\n    flex-grow: 1;\n    overflow-y: auto;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 1rem;\n}\n\nheader {\n    height: 40px;\n    display: flex;\n    margin-top: 3rem;\n    margin-bottom: 2rem;\n}\n\nheader input {\n    flex-grow: 1;\n    font-style: italic;\n}<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/10\/explorer.gif\" alt=\"Showcase of the Vue File Explorer\" \/><\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/File%20Explorer\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2023%20-%20File%20Explorer%20with%20Vue.js\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a File Explorer using Vue.js code! See how you can add more features to this program such as different file types or drag and drop.<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "File Explorer with Vue.js",
            "post_excerpt": "let's make a small JSON-based File Explorer with vue.js, Learn about methods, computed properties, and other awesome things you can do with vue.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "file-explorer-with-vue-js",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/file-explorer-with-vue-js\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Godot Platformer Character with Wall jumping",
        "description": "Learn how to make a platformer character in Godot that also has wall jumping.",
        "slug": "godot-platformer-character-with-wall-jumping",
        "raw_content": "## Idea\r\n\r\nIn this short Tutorial, we will go over how to make a platformer character in the [Godot Game Engine](https:\/\/godotengine.org\/) that also has wall jumping. We will use the raycast and timer nodes for the wall jumping. I will show you the Node Setup and the script needed for this program.\r\n\r\nOf course, this Tutorial may be outdated as soon as Godot 4 Releases, but you can still learn about the General Concept, so let's get into it.\r\n\r\n## Node Setup\r\n\r\nBelow you see the node Structure of the program. For the Player itself, we use a [KinematicBody2D](https:\/\/docs.godotengine.org\/en\/stable\/classes\/class_kinematicbody2d.html), which can be controlled through Code and is not affected by physics. We also need to add a [CollisionShape2D](https:\/\/docs.godotengine.org\/en\/stable\/classes\/class_collisionshape2d.html?highlight=collisionshape2d). We then a Sprite and a Camera. Both [Raycast](https:\/\/docs.godotengine.org\/en\/stable\/classes\/class_raycast2d.html) nodes are vital as they tell us whether the Player is aligned to the wall at the moment and whether the timer is needed for the wall jump timing. Later we will go over the script attached to the root node.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/11\/walljump-Charakter-jpg.webp)\r\n\r\nKeep in Mind to add collision shape data to the collisionshape2. Below you see the Player in the 2D Viewport.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/11\/Screenshot-2022-11-25-182804-jpg.webp)\r\n\r\nEnable both raycast Nodes and point them in the correct direction with their `cast to` property.\r\n\r\n![enter image description here](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/11\/Screenshot-2022-11-25-182827-jpg.webp)\r\n\r\n## Script\r\n\r\nLet's also look at the Code of the program, which will consist of one script attached to the root node of the player scene. We start by extending KinematicBody2D with the `extends` keyword. We then also define a bunch of constants that will influence how the Player moves. Change these according to your game.\r\n\r\n```\r\nextends KinematicBody2D\r\n\r\n# Constants\r\nconst SIDE_ACCEL = 120\r\nconst JUMP_POWER = 300\r\nconst GRAVITY = 10\r\nconst MAX_DOWN_VEL = 500\r\nconst WALL_JUMP_POWER = 500\r\nconst WALLJUMP_TIME = 0.2\r\n```\r\n\r\nWe then continue by setting to variables that will constantly be changing: the motion and whether the play has just wall jumped. Lastly, we also get some references to essential nodes that are used later. We need to use the `onready` keyword as these nodes will not be available in this part of the Code, but they have to be so the variables are globally available.\r\n\r\n```\r\n# Movement Variables\r\nvar motion = Vector2(0, 0)\r\nvar justWallJumped = false\r\n\r\n# Node References\r\nonready var rayCastLeftNode = $RayCastLeft\r\nonready var rayCastRightNode = $RayCastRight\r\nonready var timerNode = $timer\r\n```\r\n\r\nWe then connect the timer node's timeout signal to a function in the current script called *walljumpTimeout*. This other function will set the `justWallJumped` to false.\r\n\r\n```\r\nfunc _ready():\r\n\ttimerNode.connect('timeout', self, 'walljumpTimeout')\r\n\r\nfunc walljumpTimeout():\r\n\tjustWallJumped = false\r\n```\r\n\r\nNow let's go over the central part of the program, which is hosted inside the `_process` function, which will be called once every frame. Inside the function, we start by checking if the Player has pressed the space input mapping, which must be defined in the project settings. If that's the case, we also see if the play is on the floor and if that's the case, we set motion.y to the negative jump power, which will result in jumping.\r\n\r\nIf the Player is not on the floor, we first check if either raycast collides. If that is the case, we first set the motion.y accordingly, we set justWallJumped to true and start the timer node with the specified time. We then also set the x-axis of the motion variable depending on whether the right or left raycast is colliding.\r\n\r\n```\r\nfunc _process(delta):\r\n\t\r\n\t# (Wall) Jumping\r\n\tif Input.is_action_just_pressed(\"space\"):\r\n\t\tif is_on_floor():\r\n\t\t\tmotion.y = -JUMP_POWER\r\n\t\telse:\r\n\t\t\tif rayCastLeftNode.is_colliding() or rayCastRightNode.is_colliding():\r\n\t\t\t\tmotion.y = -JUMP_POWER * 0.8\r\n\t\t\t\tjustWallJumped = true\r\n\t\t\t\ttimerNode.start(WALLJUMP_TIME)\r\n\t\t\t\r\n\t\t\tif rayCastLeftNode.is_colliding():\r\n\t\t\t\tmotion.x = WALL_JUMP_POWER\r\n\t\t\tif rayCastRightNode.is_colliding():\r\n\t\t\t\tmotion.x = -WALL_JUMP_POWER\r\n```\r\n\r\nAfter that, we check if `justWallJumped` is false. If that is the case, we enable the Player to add or subtract horizontal speed to the character's motion. We then also put motion.x through the lerp function, which will move it towards 0 smoothly. Continuing, we add Gravity to the motion.y. We then constrain the downward motion, and lastly, we use the `move_and_slide` function, which will effectively move the character,  it will return the actual motion, so we update that variable according to that. we also need to set the second argument to Vector.UP so it knows where up is.\r\n\r\n```\r\n\tif not justWallJumped:\r\n\t\tif Input.is_action_pressed(\"a\"):\r\n\t\t\tmotion.x -= SIDE_ACCEL\r\n\t\telif Input.is_action_pressed(\"d\"):\r\n\t\t\tmotion.x += SIDE_ACCEL\r\n\t\t\t\r\n\t\tmotion.x = lerp(motion.x, 0, 0.3)\r\n\t\r\n\tmotion.y += GRAVITY\r\n\t\r\n\tif MAX_DOWN_VEL < motion.y:\r\n\t\tmotion.y = MAX_DOWN_VEL\r\n\t\r\n\tmotion = move_and_slide(motion, Vector2.UP)\r\n```\r\n\r\n## Showcase\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/platformer-character\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2024%20-%20Godot%20Platformer%20Character%20with%20Walljumping)\r\n\r\nI have also used something very similar to this in my Little Game: [Tile Jumper 2088](https:\/\/maximino.itch.io\/tile-jumper-2088)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a Platformer Character using the Godot Game Engine!\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "024 - Godot Platformer Character with Walljumping\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 685,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>In this short Tutorial, we will go over how to make a platformer character in the <a href=\"https:\/\/godotengine.org\/\">Godot Game Engine<\/a> that also has wall jumping. We will use the raycast and timer nodes for the wall jumping. I will show you the Node Setup and the script needed for this program.<\/p>\n<p>Of course, this Tutorial may be outdated as soon as Godot 4 Releases, but you can still learn about the General Concept, so let's get into it.<\/p>\n<h2>Node Setup<\/h2>\n<p>Below you see the node Structure of the program. For the Player itself, we use a <a href=\"https:\/\/docs.godotengine.org\/en\/stable\/classes\/class_kinematicbody2d.html\">KinematicBody2D<\/a>, which can be controlled through Code and is not affected by physics. We also need to add a <a href=\"https:\/\/docs.godotengine.org\/en\/stable\/classes\/class_collisionshape2d.html?highlight=collisionshape2d\">CollisionShape2D<\/a>. We then a Sprite and a Camera. Both <a href=\"https:\/\/docs.godotengine.org\/en\/stable\/classes\/class_raycast2d.html\">Raycast<\/a> nodes are vital as they tell us whether the Player is aligned to the wall at the moment and whether the timer is needed for the wall jump timing. Later we will go over the script attached to the root node.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/11\/walljump-Charakter-jpg.webp\" alt=\"enter image description here\" \/><\/p>\n<p>Keep in Mind to add collision shape data to the collisionshape2. Below you see the Player in the 2D Viewport.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/11\/Screenshot-2022-11-25-182804-jpg.webp\" alt=\"enter image description here\" \/><\/p>\n<p>Enable both raycast Nodes and point them in the correct direction with their <code>cast to<\/code> property.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/11\/Screenshot-2022-11-25-182827-jpg.webp\" alt=\"enter image description here\" \/><\/p>\n<h2>Script<\/h2>\n<p>Let's also look at the Code of the program, which will consist of one script attached to the root node of the player scene. We start by extending KinematicBody2D with the <code>extends<\/code> keyword. We then also define a bunch of constants that will influence how the Player moves. Change these according to your game.<\/p>\n<pre><code>extends KinematicBody2D\n\n# Constants\nconst SIDE_ACCEL = 120\nconst JUMP_POWER = 300\nconst GRAVITY = 10\nconst MAX_DOWN_VEL = 500\nconst WALL_JUMP_POWER = 500\nconst WALLJUMP_TIME = 0.2<\/code><\/pre>\n<p>We then continue by setting to variables that will constantly be changing: the motion and whether the play has just wall jumped. Lastly, we also get some references to essential nodes that are used later. We need to use the <code>onready<\/code> keyword as these nodes will not be available in this part of the Code, but they have to be so the variables are globally available.<\/p>\n<pre><code># Movement Variables\nvar motion = Vector2(0, 0)\nvar justWallJumped = false\n\n# Node References\nonready var rayCastLeftNode = $RayCastLeft\nonready var rayCastRightNode = $RayCastRight\nonready var timerNode = $timer<\/code><\/pre>\n<p>We then connect the timer node's timeout signal to a function in the current script called <em>walljumpTimeout<\/em>. This other function will set the <code>justWallJumped<\/code> to false.<\/p>\n<pre><code>func _ready():\n    timerNode.connect('timeout', self, 'walljumpTimeout')\n\nfunc walljumpTimeout():\n    justWallJumped = false<\/code><\/pre>\n<p>Now let's go over the central part of the program, which is hosted inside the <code>_process<\/code> function, which will be called once every frame. Inside the function, we start by checking if the Player has pressed the space input mapping, which must be defined in the project settings. If that's the case, we also see if the play is on the floor and if that's the case, we set motion.y to the negative jump power, which will result in jumping.<\/p>\n<p>If the Player is not on the floor, we first check if either raycast collides. If that is the case, we first set the motion.y accordingly, we set justWallJumped to true and start the timer node with the specified time. We then also set the x-axis of the motion variable depending on whether the right or left raycast is colliding.<\/p>\n<pre><code>func _process(delta):\n\n    # (Wall) Jumping\n    if Input.is_action_just_pressed(\"space\"):\n        if is_on_floor():\n            motion.y = -JUMP_POWER\n        else:\n            if rayCastLeftNode.is_colliding() or rayCastRightNode.is_colliding():\n                motion.y = -JUMP_POWER * 0.8\n                justWallJumped = true\n                timerNode.start(WALLJUMP_TIME)\n\n            if rayCastLeftNode.is_colliding():\n                motion.x = WALL_JUMP_POWER\n            if rayCastRightNode.is_colliding():\n                motion.x = -WALL_JUMP_POWER<\/code><\/pre>\n<p>After that, we check if <code>justWallJumped<\/code> is false. If that is the case, we enable the Player to add or subtract horizontal speed to the character's motion. We then also put motion.x through the lerp function, which will move it towards 0 smoothly. Continuing, we add Gravity to the motion.y. We then constrain the downward motion, and lastly, we use the <code>move_and_slide<\/code> function, which will effectively move the character,  it will return the actual motion, so we update that variable according to that. we also need to set the second argument to Vector.UP so it knows where up is.<\/p>\n<pre><code>    if not justWallJumped:\n        if Input.is_action_pressed(\"a\"):\n            motion.x -= SIDE_ACCEL\n        elif Input.is_action_pressed(\"d\"):\n            motion.x += SIDE_ACCEL\n\n        motion.x = lerp(motion.x, 0, 0.3)\n\n    motion.y += GRAVITY\n\n    if MAX_DOWN_VEL &lt; motion.y:\n        motion.y = MAX_DOWN_VEL\n\n    motion = move_and_slide(motion, Vector2.UP)<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/platformer-character\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2024%20-%20Godot%20Platformer%20Character%20with%20Walljumping\">Look at the Code<\/a><\/p>\n<p>I have also used something very similar to this in my Little Game: <a href=\"https:\/\/maximino.itch.io\/tile-jumper-2088\">Tile Jumper 2088<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a Platformer Character using the Godot Game Engine!<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Godot Platformer Character with Wall jumping",
            "post_excerpt": "Learn how to make a platformer character in Godot that also has wall jumping.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "godot-platformer-character-with-wall-jumping",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/godot-platformer-character-with-wall-jumping\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Product Tour with JavaScript and SCSS",
        "description": "Learn how to make a Product Tour with JavaScript to showcase the features of a Website to your Users.",
        "slug": "product-tour-with-javascript-and-scss",
        "raw_content": "## Idea\r\n\r\nIn this article, we will try to make a Product Tour with JavaScript. A **Product Tour** or **Feature Tour** shows users what a Website or Software can do interactively. We will make a function that will handle rendering the panel and the focus element and switching through the different steps. This function will receive a list of destinations for the tour. To keep it simple, we won't go into websites that have scrollbars, and it won't be fully responsive. For this to work, we will need the CSS Clip-Path Property and JavaScripts `getBoundingClientRect()` function. Look at the [demo page](https:\/\/articles.maximmaeder.com\/a\/uitour\/) to get a better idea of what I mean. Lastly, we will make use of SCSS to style our Product Tour Elements\r\n\r\n## JavaScript for the Product Tour\r\n\r\nLet's start with the JavaScript of the program. As mentioned before, we will make it so another programmer or we can call a function and pass in a list, and the tour should work. The list will hold objects with `title`, `text`, and `element` keys needed for the tour to work.\r\n\r\nWe call the function `runTour`, which has the `tourList` parameter. Inside the function, we start by defining three variables. `currentIndex` will hold the index of the current step, and `panelMargin` will be how far away from the focused element the panel will be. Lastly, the `indicatorPadding` is how much space is added to the clip focus.\r\n\r\n```js\r\nfunction runTour(tourList) {\r\n    let currentIndex = 0\r\n    const panelMargin = 10\r\n    const indicatorPadding = 5\r\n\r\n\t...\r\n}\r\n```\r\n\r\n### Creating the DOM\r\n\r\nWe then create the needed HTML for our Product Tour. We do this with `document.createElement()`, which will return the newly created element. We make one div that will wrap a panel element and an indicator. The panel will show text and the buttons to navigate to the next element, and the indicator will blacken out the whole screen except for the currently focused element. We add appropriate classes to these elements with `element.classList.add()`; we later need those to style the elements in SCSS. Creating elements this way may look like much, but it's good in this case because we also need some references to these elements later in our program. so keep that in mind.\r\n\r\n```js\r\n\t\/\/ Create Elements\r\n    const wrapperNode = document.createElement('div')\r\n    wrapperNode.classList.add('tourElementWrapper')\r\n\r\n    const indicatorNode = document.createElement('div')\r\n    indicatorNode.classList.add('indicator')\r\n    wrapperNode.appendChild(indicatorNode)\r\n\r\n    const panelNode = document.createElement('div')\r\n    panelNode.classList.add('panel')\r\n    wrapperNode.appendChild(panelNode)\r\n\r\n    const titleNode = document.createElement('h2')\r\n    panelNode.appendChild(titleNode)\r\n\r\n    const textNode = document.createElement('p')\r\n    panelNode.appendChild(textNode)\r\n\r\n    \/\/ Bottom Button Bar\r\n    let buttonBar = document.createElement('div')\r\n    buttonBar.classList.add('buttonBar')\r\n    panelNode.appendChild(buttonBar)\r\n\r\n    const previousButtonNode = document.createElement('button')\r\n    previousButtonNode.innerHTML = 'Previous'\r\n    buttonBar.appendChild(previousButtonNode)\r\n    \r\n    const counterNode = document.createElement('div')\r\n    buttonBar.appendChild(counterNode)\r\n    \r\n    const nextButtonNode = document.createElement('button')\r\n    nextButtonNode.innerHTML = 'Next'\r\n    buttonBar.appendChild(nextButtonNode)\r\n\r\n    document.body.appendChild(wrapperNode)\r\n```\r\n\r\n### Connecting Events\r\n\r\nAfter creating all the necessary elements, we need to connect some events. But before that, we need to call the `placePanelAt()` function, that will, as its name suggests, place the indicator and panel in the correct position.  We then add `pointerdown`  events listeners to the next and previous buttons, and we give them references to the `nextSpot` and `previousSpot` functions which we will define in a bit. Lastly, we also connect the `keydown` event on the window with an arrow function that will call the appropriate function in case the user has pressed `ArrowLeft`, `ArrowRight`, `Enter`, or `Backspace`. Lastly, we add an event listener for the `resize` event that will call `placePanelAt`, essentially updating the position in case the window was resized.\r\n\r\n```js\r\n    \/\/ Place the Panel for the First time\r\n    placePanelAt()\r\n\r\n    \/\/ Connect Events with Actions\r\n    nextButtonNode.addEventListener('pointerdown', nextSpot)\r\n    previousButtonNode.addEventListener('pointerdown', previousSpot)\r\n    \r\n    window.addEventListener('keydown', (event) => {\r\n        if (['ArrowLeft', 'Backspace'].includes(event.key)) previousSpot()\r\n        if (['ArrowRight', 'Enter'].includes(event.key)) nextSpot()\r\n    })\r\n\r\n    window.addEventListener('resize', placePanelAt)\r\n```\r\n\r\n### Next and Previous Function\r\n\r\nThe `nextSpot` function will advance the current destination in the tour, but it will also hide the panel and indicator in case the tour is finished. We also need to add one to `currentIndex` because `placePanelAt` will use that to get the current item.\r\n\r\n```js\r\n    \/\/ Functions\r\n    function nextSpot() {\r\n        if (currentIndex + 1 == tourList.length) {\r\n            panelNode.style.display = 'none';\r\n            indicatorNode.style.display = 'none';\r\n            return\r\n        }\r\n        currentIndex += 1;\r\n        placePanelAt()\r\n    }\r\n```\r\n\r\n`previousSpot` will do the reverse. It will go back one step, and it will ensure that the `currentIndex` is not `-1`.\r\n\r\n```js\r\n    function previousSpot() {\r\n        if (currentIndex - 1 == -1) return\r\n        currentIndex -= 1;\r\n        placePanelAt()\r\n    }\r\n```\r\n\r\n### Panel Placement Function\r\n\r\nLet's also go over the most important function: `placePanelAt()`, which will place the indicator and panel and switch the text inside the panel.\r\n\r\nWe start by getting the object from the list at the current index; we then also check whether an element string was given; if that's not the case, we want to indicator to hide itself and the panel to go to the middle of the screen. After that, we want to get the `x`, `y`, `width`, and `height` of the current element, and we do that with `getBoundingClientRect()`, which returns more stuff we don't need so we destructure the object. Now in case, no element was given, we fill in an object where all values are 0.\r\n\r\n```js\r\n    function placePanelAt() {\r\n        let currentData = tourList[currentIndex];\r\n\r\n        const elementGiven = currentData.element != undefined\r\n        \r\n        let { x, y, width, height } = elementGiven ? \r\n            document.querySelector(currentData.element).getBoundingClientRect()\r\n            :\r\n            {x: 0, y: 0, width: 0, height: 0}\r\n\r\n        ...\r\n    }\r\n```\r\n\r\nContinuing, we calculate the `left`, `top`, `right`, and `bottom` according to the information we got earlier and the indicator padding. We then set the `clipPath` property on the indicator so it will cover everything except for the current element. As you see, this involves a lot of *coordinate setting*, but it will get the job done.\r\n\r\n```js\r\n\t\tconst left = x - indicatorPadding\r\n        const top = y - indicatorPadding\r\n        const right = x + width + indicatorPadding\r\n        const bottom = y + height + indicatorPadding\r\n\r\n        indicatorNode.style.clipPath = `polygon(\r\n            0 0,\r\n            100% 0,\r\n            100% 100%,\r\n            0 100%,\r\n            0px ${bottom}px,\r\n            ${right}px ${bottom}px,\r\n            ${right}px ${top}px,\r\n            ${left}px ${top}px,\r\n            ${left}px ${bottom}px,\r\n            0px ${bottom}px\r\n        )`\r\n```\r\n\r\nLastly, we set the content of the panel title and text, and we place it. To do this, we also check where the current element is so the panel is not placed outside the viewport, or in case no element was given, we place it in the middle of the viewport.\r\n\r\n```js\r\n        \/\/ Change the text content of panel\r\n        titleNode.innerHTML = currentData.title\r\n        textNode.innerHTML = currentData.text\r\n\r\n        counterNode.innerHTML = `${currentIndex + 1} \/ ${tourList.length}`\r\n\r\n        \/\/ Place Info Panel\r\n\r\n        let { width: panelWidth, height: panelHeight } = panelNode.getBoundingClientRect()\r\n\r\n        if (elementGiven) {\r\n            panelNode.style.top = window.innerHeight \/ 2 > y ? \r\n            y + height + panelMargin + 'px'\r\n            :\r\n            y - panelMargin - panelHeight + 'px'\r\n            \r\n            panelNode.style.left = window.innerWidth \/ 2 > x ?\r\n            x + width + panelMargin + 'px'\r\n            :\r\n            x - panelMargin - panelWidth + 'px'\r\n        } else {\r\n            panelNode.style.top = window.innerHeight \/ 2 - panelHeight \/ 2 + 'px'\r\n            panelNode.style.left = window.innerWidth \/ 2 - panelWidth \/ 2 + 'px'\r\n        }\r\n\r\n```\r\n\r\nThat's it for the JavaScript; let's add some SCSS \/ CSS.\r\n\r\n## SASS \/ CSS\r\n\r\nBelow you see the whole SCSS for the program. It's important that we set the panel and indicator to `position: fixed` so we can place them anywhere on the screen with `left` and `top`. We also give them a transition, so they move smoothly. We make the indicator fill out the whole viewport by using `vw` and `vh`, and we give it a transparent background.\r\n\r\n```scss\r\n.tourElementWrapper {\r\n    .panel {\r\n        position: fixed;\r\n        top: 100px;\r\n        left: 100px;\r\n        background-color: hsla(0, 0%, 100%, 0.1);\r\n        backdrop-filter: blur(5px);\r\n        box-shadow: 0 1px 3px hsla(0, 0%, 0%, 0.3), 0 3px 2px hsla(0, 0%, 0%, 0.2);\r\n        border-radius: 4px;\r\n        padding: 1rem;\r\n        width: 250px;\r\n        font-family: 'Segoe Ui';\r\n\r\n        color: white;\r\n    \r\n        transition-property: top left;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease;\r\n        \r\n        h2 {margin-top: 0; margin-bottom: 0.2rem;}\r\n\r\n        p {margin-top: 0;}\r\n\r\n        a {color: inherit;}\r\n        \r\n        .buttonBar {\r\n            display: flex;\r\n            justify-content: space-between;\r\n    \r\n            button {\r\n                font: inherit;\r\n                background-color: hsl(220, 10%, 79%);\r\n                border: 1px solid hsl(220, 10%, 50%);\r\n                border-radius: 4px;\r\n                \r\n                &:hover {\r\n                    border-color: hsla(220, 10%, 50%, 0);\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    .indicator {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n    \r\n        transition-property: clip-path;\r\n        transition-duration: 0.5s;\r\n        transition-timing-function: ease;\r\n    }\r\n}\r\n\r\n```\r\n\r\n## Usage\r\n\r\nNow how does this work? In our potential UI we need to import the CSS file and Script.\r\n\r\n```html\r\n<link  rel=\"stylesheet\"  href=\"tour.css\">\r\n<script  src=\"tour.js\"><\/script>\r\n```\r\n\r\nand in our script we need to call the `runTour` function with a list looking like this.\r\n\r\n```js\r\nrunTour([\r\n\t{\r\n\t    title: 'First Title',\r\n\t    text: 'First Text',\r\n\t},\r\n\t{\r\n\t    title: 'Second Title',\r\n\t    text: 'Second Text',\r\n\t    element: '#secondElementQuery',\r\n\t},\r\n\t{\r\n\t    title: 'Third Title',\r\n\t    text: 'Third Text',\r\n\t    element: '#thirdElementQuery',\r\n\t},\t\r\n])\r\n```\r\n\r\n## Showcase of the Product Tour\r\n\r\nBelow you will see a demo of the program in action.\r\n\r\n![UI Tour Showcase GIF](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/12\/tour.gif)\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/uitour\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2025%20-%20Product%20Tour%20with%20JavaScript%20and%20SCSS)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully created a UI Showcase \/ Tour using JavaScript code! See how you can add more features to this program, such as an Intro or a skip button.\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "025 - Product Tour with JavaScript and SCSS\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 687,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>In this article, we will try to make a Product Tour with JavaScript. A <strong>Product Tour<\/strong> or <strong>Feature Tour<\/strong> shows users what a Website or Software can do interactively. We will make a function that will handle rendering the panel and the focus element and switching through the different steps. This function will receive a list of destinations for the tour. To keep it simple, we won't go into websites that have scrollbars, and it won't be fully responsive. For this to work, we will need the CSS Clip-Path Property and JavaScripts <code>getBoundingClientRect()<\/code> function. Look at the <a href=\"https:\/\/articles.maximmaeder.com\/a\/uitour\/\">demo page<\/a> to get a better idea of what I mean. Lastly, we will make use of SCSS to style our Product Tour Elements<\/p>\n<h2>JavaScript for the Product Tour<\/h2>\n<p>Let's start with the JavaScript of the program. As mentioned before, we will make it so another programmer or we can call a function and pass in a list, and the tour should work. The list will hold objects with <code>title<\/code>, <code>text<\/code>, and <code>element<\/code> keys needed for the tour to work.<\/p>\n<p>We call the function <code>runTour<\/code>, which has the <code>tourList<\/code> parameter. Inside the function, we start by defining three variables. <code>currentIndex<\/code> will hold the index of the current step, and <code>panelMargin<\/code> will be how far away from the focused element the panel will be. Lastly, the <code>indicatorPadding<\/code> is how much space is added to the clip focus.<\/p>\n<pre><code class=\"language-js\">function runTour(tourList) {\n    let currentIndex = 0\n    const panelMargin = 10\n    const indicatorPadding = 5\n\n    ...\n}<\/code><\/pre>\n<h3>Creating the DOM<\/h3>\n<p>We then create the needed HTML for our Product Tour. We do this with <code>document.createElement()<\/code>, which will return the newly created element. We make one div that will wrap a panel element and an indicator. The panel will show text and the buttons to navigate to the next element, and the indicator will blacken out the whole screen except for the currently focused element. We add appropriate classes to these elements with <code>element.classList.add()<\/code>; we later need those to style the elements in SCSS. Creating elements this way may look like much, but it's good in this case because we also need some references to these elements later in our program. so keep that in mind.<\/p>\n<pre><code class=\"language-js\">    \/\/ Create Elements\n    const wrapperNode = document.createElement('div')\n    wrapperNode.classList.add('tourElementWrapper')\n\n    const indicatorNode = document.createElement('div')\n    indicatorNode.classList.add('indicator')\n    wrapperNode.appendChild(indicatorNode)\n\n    const panelNode = document.createElement('div')\n    panelNode.classList.add('panel')\n    wrapperNode.appendChild(panelNode)\n\n    const titleNode = document.createElement('h2')\n    panelNode.appendChild(titleNode)\n\n    const textNode = document.createElement('p')\n    panelNode.appendChild(textNode)\n\n    \/\/ Bottom Button Bar\n    let buttonBar = document.createElement('div')\n    buttonBar.classList.add('buttonBar')\n    panelNode.appendChild(buttonBar)\n\n    const previousButtonNode = document.createElement('button')\n    previousButtonNode.innerHTML = 'Previous'\n    buttonBar.appendChild(previousButtonNode)\n\n    const counterNode = document.createElement('div')\n    buttonBar.appendChild(counterNode)\n\n    const nextButtonNode = document.createElement('button')\n    nextButtonNode.innerHTML = 'Next'\n    buttonBar.appendChild(nextButtonNode)\n\n    document.body.appendChild(wrapperNode)<\/code><\/pre>\n<h3>Connecting Events<\/h3>\n<p>After creating all the necessary elements, we need to connect some events. But before that, we need to call the <code>placePanelAt()<\/code> function, that will, as its name suggests, place the indicator and panel in the correct position.  We then add <code>pointerdown<\/code>  events listeners to the next and previous buttons, and we give them references to the <code>nextSpot<\/code> and <code>previousSpot<\/code> functions which we will define in a bit. Lastly, we also connect the <code>keydown<\/code> event on the window with an arrow function that will call the appropriate function in case the user has pressed <code>ArrowLeft<\/code>, <code>ArrowRight<\/code>, <code>Enter<\/code>, or <code>Backspace<\/code>. Lastly, we add an event listener for the <code>resize<\/code> event that will call <code>placePanelAt<\/code>, essentially updating the position in case the window was resized.<\/p>\n<pre><code class=\"language-js\">    \/\/ Place the Panel for the First time\n    placePanelAt()\n\n    \/\/ Connect Events with Actions\n    nextButtonNode.addEventListener('pointerdown', nextSpot)\n    previousButtonNode.addEventListener('pointerdown', previousSpot)\n\n    window.addEventListener('keydown', (event) =&gt; {\n        if (['ArrowLeft', 'Backspace'].includes(event.key)) previousSpot()\n        if (['ArrowRight', 'Enter'].includes(event.key)) nextSpot()\n    })\n\n    window.addEventListener('resize', placePanelAt)<\/code><\/pre>\n<h3>Next and Previous Function<\/h3>\n<p>The <code>nextSpot<\/code> function will advance the current destination in the tour, but it will also hide the panel and indicator in case the tour is finished. We also need to add one to <code>currentIndex<\/code> because <code>placePanelAt<\/code> will use that to get the current item.<\/p>\n<pre><code class=\"language-js\">    \/\/ Functions\n    function nextSpot() {\n        if (currentIndex + 1 == tourList.length) {\n            panelNode.style.display = 'none';\n            indicatorNode.style.display = 'none';\n            return\n        }\n        currentIndex += 1;\n        placePanelAt()\n    }<\/code><\/pre>\n<p><code>previousSpot<\/code> will do the reverse. It will go back one step, and it will ensure that the <code>currentIndex<\/code> is not <code>-1<\/code>.<\/p>\n<pre><code class=\"language-js\">    function previousSpot() {\n        if (currentIndex - 1 == -1) return\n        currentIndex -= 1;\n        placePanelAt()\n    }<\/code><\/pre>\n<h3>Panel Placement Function<\/h3>\n<p>Let's also go over the most important function: <code>placePanelAt()<\/code>, which will place the indicator and panel and switch the text inside the panel.<\/p>\n<p>We start by getting the object from the list at the current index; we then also check whether an element string was given; if that's not the case, we want to indicator to hide itself and the panel to go to the middle of the screen. After that, we want to get the <code>x<\/code>, <code>y<\/code>, <code>width<\/code>, and <code>height<\/code> of the current element, and we do that with <code>getBoundingClientRect()<\/code>, which returns more stuff we don't need so we destructure the object. Now in case, no element was given, we fill in an object where all values are 0.<\/p>\n<pre><code class=\"language-js\">    function placePanelAt() {\n        let currentData = tourList[currentIndex];\n\n        const elementGiven = currentData.element != undefined\n\n        let { x, y, width, height } = elementGiven ? \n            document.querySelector(currentData.element).getBoundingClientRect()\n            :\n            {x: 0, y: 0, width: 0, height: 0}\n\n        ...\n    }<\/code><\/pre>\n<p>Continuing, we calculate the <code>left<\/code>, <code>top<\/code>, <code>right<\/code>, and <code>bottom<\/code> according to the information we got earlier and the indicator padding. We then set the <code>clipPath<\/code> property on the indicator so it will cover everything except for the current element. As you see, this involves a lot of <em>coordinate setting<\/em>, but it will get the job done.<\/p>\n<pre><code class=\"language-js\">        const left = x - indicatorPadding\n        const top = y - indicatorPadding\n        const right = x + width + indicatorPadding\n        const bottom = y + height + indicatorPadding\n\n        indicatorNode.style.clipPath = `polygon(\n            0 0,\n            100% 0,\n            100% 100%,\n            0 100%,\n            0px ${bottom}px,\n            ${right}px ${bottom}px,\n            ${right}px ${top}px,\n            ${left}px ${top}px,\n            ${left}px ${bottom}px,\n            0px ${bottom}px\n        )`<\/code><\/pre>\n<p>Lastly, we set the content of the panel title and text, and we place it. To do this, we also check where the current element is so the panel is not placed outside the viewport, or in case no element was given, we place it in the middle of the viewport.<\/p>\n<pre><code class=\"language-js\">        \/\/ Change the text content of panel\n        titleNode.innerHTML = currentData.title\n        textNode.innerHTML = currentData.text\n\n        counterNode.innerHTML = `${currentIndex + 1} \/ ${tourList.length}`\n\n        \/\/ Place Info Panel\n\n        let { width: panelWidth, height: panelHeight } = panelNode.getBoundingClientRect()\n\n        if (elementGiven) {\n            panelNode.style.top = window.innerHeight \/ 2 &gt; y ? \n            y + height + panelMargin + 'px'\n            :\n            y - panelMargin - panelHeight + 'px'\n\n            panelNode.style.left = window.innerWidth \/ 2 &gt; x ?\n            x + width + panelMargin + 'px'\n            :\n            x - panelMargin - panelWidth + 'px'\n        } else {\n            panelNode.style.top = window.innerHeight \/ 2 - panelHeight \/ 2 + 'px'\n            panelNode.style.left = window.innerWidth \/ 2 - panelWidth \/ 2 + 'px'\n        }\n<\/code><\/pre>\n<p>That's it for the JavaScript; let's add some SCSS \/ CSS.<\/p>\n<h2>SASS \/ CSS<\/h2>\n<p>Below you see the whole SCSS for the program. It's important that we set the panel and indicator to <code>position: fixed<\/code> so we can place them anywhere on the screen with <code>left<\/code> and <code>top<\/code>. We also give them a transition, so they move smoothly. We make the indicator fill out the whole viewport by using <code>vw<\/code> and <code>vh<\/code>, and we give it a transparent background.<\/p>\n<pre><code class=\"language-scss\">.tourElementWrapper {\n    .panel {\n        position: fixed;\n        top: 100px;\n        left: 100px;\n        background-color: hsla(0, 0%, 100%, 0.1);\n        backdrop-filter: blur(5px);\n        box-shadow: 0 1px 3px hsla(0, 0%, 0%, 0.3), 0 3px 2px hsla(0, 0%, 0%, 0.2);\n        border-radius: 4px;\n        padding: 1rem;\n        width: 250px;\n        font-family: 'Segoe Ui';\n\n        color: white;\n\n        transition-property: top left;\n        transition-duration: 0.5s;\n        transition-timing-function: ease;\n\n        h2 {margin-top: 0; margin-bottom: 0.2rem;}\n\n        p {margin-top: 0;}\n\n        a {color: inherit;}\n\n        .buttonBar {\n            display: flex;\n            justify-content: space-between;\n\n            button {\n                font: inherit;\n                background-color: hsl(220, 10%, 79%);\n                border: 1px solid hsl(220, 10%, 50%);\n                border-radius: 4px;\n\n                &amp;:hover {\n                    border-color: hsla(220, 10%, 50%, 0);\n                    cursor: pointer;\n                }\n            }\n        }\n    }\n\n    .indicator {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100vw;\n        height: 100vh;\n        background-color: rgba(0, 0, 0, 0.5);\n\n        transition-property: clip-path;\n        transition-duration: 0.5s;\n        transition-timing-function: ease;\n    }\n}\n<\/code><\/pre>\n<h2>Usage<\/h2>\n<p>Now how does this work? In our potential UI we need to import the CSS file and Script.<\/p>\n<pre><code class=\"language-html\">&lt;link  rel=\"stylesheet\"  href=\"tour.css\"&gt;\n&lt;script  src=\"tour.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>and in our script we need to call the <code>runTour<\/code> function with a list looking like this.<\/p>\n<pre><code class=\"language-js\">runTour([\n    {\n        title: 'First Title',\n        text: 'First Text',\n    },\n    {\n        title: 'Second Title',\n        text: 'Second Text',\n        element: '#secondElementQuery',\n    },\n    {\n        title: 'Third Title',\n        text: 'Third Text',\n        element: '#thirdElementQuery',\n    },  \n])<\/code><\/pre>\n<h2>Showcase of the Product Tour<\/h2>\n<p>Below you will see a demo of the program in action.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/12\/tour.gif\" alt=\"UI Tour Showcase GIF\" \/><\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/uitour\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2025%20-%20Product%20Tour%20with%20JavaScript%20and%20SCSS\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully created a UI Showcase \/ Tour using JavaScript code! See how you can add more features to this program, such as an Intro or a skip button.<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Product Tour with JavaScript and SCSS",
            "post_excerpt": "Learn how to make a Product Tour with JavaScript to showcase the features of a Website to your Users.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "product-tour-with-javascript-and-scss",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/product-tour-with-javascript-and-scss\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Advanced Form Modal with JavaScript",
        "description": "Build a function that spawns an Advanced Modal with a form that will return a promise and the Data in the form.",
        "slug": "advanced-form-modal-with-javascript",
        "raw_content": "## Idea\r\n\r\nToday we will make something hard to explain: A Modal with a (somewhat) custom form that a programmer or we could use to ask the user something quickly and get the inputted data. Look at the [demo](https:\/\/articles.maximmaeder.com\/a\/advancedModal\/) to see what I mean. It's going to be a function that will take in some config parameters for the form and the looks of the modal, and it will return a [Promise](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Promise) that will resolve once the user has successfully submitted the form. This way, the function will be a little like `prompt()` but on steroids, if you get where I'm going.\r\n\r\nTo keep this Tutorial a little bit shorter, I won't go over the CSS used for this Modal as it is purely cosmetic.\r\n\r\nSo let's get into it.\r\n\r\n## JavaScript of the Advanced Form Modal\r\n\r\nSo the whole program will be housed inside a function that we can call multiple times to generate new modals with a form. This function will take in a parameters argument that we will destructure inside the function.\r\n\r\n```js\r\nfunction advancedPrompt(parameters) {\r\n\t...\r\n}\r\n```\r\n\r\n### Destructuring the Arguments\r\n\r\nWhen we destructure the object to single constant variables, we essentially define the option the programmer can supply to the modal. Most importantly, we need the field data, which will tell the modal what fields\/inputs there are and some other things about them. You will see where the other options are used shortly.\r\n\r\n```js\r\n\/\/ Destructure Arguments\r\nconst {\r\n    fieldData: _fieldData = [],\r\n    title: _title = 'Modal',\r\n    submitNodeText: _submitNodeText = 'Submit',\r\n    panelHeight: _panelHeight = 500,\r\n    canBeCancelled: _canBeCancelled = true,\r\n    text: _text = ''\r\n} = parameters\r\n```\r\n\r\n### Creating the Elements\r\n\r\nWe then continue by creating the necessary elements for this modal. We create a wrapper that will make it so we can darken the background with CSS, and we add a form to it, which will be the panel of the modal itself. Here we use the `_panelHeight` option from before. After that, we add a node representing the title of the modal where use `_title`. We also add a node representing the describing text of the modal, and lastly, we have a wrapper\/container for the fields that will be generated next.\r\n\r\n```js\r\n\/\/ Create Elements\r\n\/\/ Modal Wrapper which will take up the entire Screen\r\nconst modalWrapper = document.createElement('div');\r\nmodalWrapper.className = 'modalWrapper';\r\n\r\n\/\/ The Modal itself which is also a form\r\nconst modalPanel = document.createElement('form');\r\nmodalPanel.className = 'modalPanel'\r\nmodalPanel.style.height = _panelHeight + 'px'\r\nmodalWrapper.appendChild(modalPanel);\r\n\r\n\/\/ The Title showing what this modal is for\r\nconst titleNode = document.createElement('div');\r\ntitleNode.className = 'modalTitle';\r\ntitleNode.innerHTML = _title;\r\nmodalPanel.appendChild(titleNode);\r\n\r\n\/\/ The Text which further describes the modal.\r\nconst textNode = document.createElement('div');\r\ntextNode.innerHTML = _text;\r\nmodalPanel.appendChild(textNode);\r\n\r\n\/\/ Fields\r\n\/\/ we add a wrapper \/ container that will hold all the fields\r\nconst fieldsWrapper = document.createElement('div');\r\nfieldsWrapper.className = 'fieldsWrapper'\r\nmodalPanel.appendChild(fieldsWrapper);\r\n```\r\n\r\nWe then loop over each object of the `_fieldData` option. Firstly we get the attributes property, or we default to an empty array. This enables the user to add attributes to the inputs in any way they like to.m Then we make a div that will hold a label and an input. We set the input value according to the field value, if there is one, and the type to the corresponding property of the field object. Then we also add the custom attributes via a `for ... of` loop.\r\n\r\n```js\r\n\/\/ For each given field we add a Row Element with a label and an Input\r\nfor (const field of _fieldData) {\r\n    const attributes = field.attributes || []\r\n\r\n    const inputRow = document.createElement('div');\r\n    inputRow.className = 'inputRow';\r\n\r\n    const label = document.createElement('label')\r\n    label.innerHTML = field.title\r\n\r\n    const input = document.createElement('input')\r\n    input.value = field.value || ''\r\n    input.type = field.type\r\n\r\n    for (const attribute of attributes) {\r\n        input.setAttribute(attribute.name, attribute.value)\r\n    }\r\n\r\n    field.element = input;\r\n\r\n    inputRow.appendChild(label)\r\n    inputRow.appendChild(input)\r\n\r\n    fieldsWrapper.appendChild(inputRow)\r\n}\r\n```\r\n\r\nThen we also need to create the submit and cancel buttons. The user can omit the cancel button if they wish to.\r\n\r\n```js\r\n\/\/ Actions Panel with submit and cancel button\r\nconst actionsWrapper = document.createElement('div');\r\nactionsWrapper.className = 'actionBar'\r\nmodalPanel.appendChild(actionsWrapper);\r\n\r\nconst cancelNode = document.createElement('button');\r\ncancelNode.className = 'cancelButton'\r\ncancelNode.innerHTML = 'Cancel'\r\n\r\nif (_canBeCancelled) actionsWrapper.appendChild(cancelNode);\r\n\r\nconst submitNode = document.createElement('input');\r\nsubmitNode.type = 'submit'\r\nsubmitNode.className = 'submitButton'\r\nsubmitNode.value = _submitNodeText;\r\nactionsWrapper.appendChild(submitNode);\r\n\r\ndocument.body.appendChild(modalWrapper);\r\n```\r\n\r\n### Promise and Return Value\r\n\r\nNow that we have all the elements out of the way, we can get to the Promise that is returned from the function. Promises need a callback function that accepts a `resolve` and `reject` function. The `resolve` function can be called with any arguments we want to be available in the `then` function. In this Program, we call this function once the submit event of the form is dispatched. But before that, we also get all fields and their values, and we save them in `returnObject` variable. We also set up some event listeners in case the user has pressed `escape` or pressed the cancel button, and we reject the promise.\r\n\r\n```js\r\n\/\/ Return Promise\r\nreturn new Promise((resolve, reject) => {\r\n\r\n    modalPanel.addEventListener('submit', (event) => {\r\n        event.preventDefault();\r\n\r\n\r\n        \/\/ Gather all values from the Form and store with the \r\n        \/\/ Specified name\r\n        let returnObject = {}\r\n\r\n        for (const field of _fieldData) {\r\n            returnObject[field.name] = field.element.files || field.element.value || field.element.checked\r\n        }\r\n\r\n        \/\/ Resolve the promise with the Data\r\n        resolve(returnObject)\r\n        modalWrapper.remove()\r\n    })\r\n\r\n    cancelNode.addEventListener('pointerdown', rejectPromise)\r\n\r\n    window.addEventListener('keydown', (event) => {\r\n        if (event.key == 'Escape' && _canBeCancelled) rejectPromise()\r\n    })\r\n\r\n    function rejectPromise() {\r\n        modalWrapper.remove()\r\n        reject('User Cancelled')\r\n    }\r\n})\r\n```\r\n\r\n### Cancel Reaction\r\n\r\n## Usage Example\r\n\r\nOk, so how do we use this thing? We first need to import the script and if we have styles we also get those too.\r\n\r\n```html\r\n<link  rel=\"stylesheet\"  href=\"advancedPrompt\/advancedPrompt.css\">\r\n<script  src=\"advancedPrompt\/advancedPrompt.js\"><\/script>\r\n```\r\n\r\nThen in another script that comes after the import, we call the `advancedPrompt()` function with some parameters. Below we set a title and one field\/input of type `text`, and we also add a `then` callback, so we can react to the user hitting the submit button.\r\n\r\n```js\r\nadvancedPrompt({\r\n    title: 'My Cool Modal',\r\n    fieldData: [\r\n        {\r\n            title: 'Username',\r\n            name: 'username',\r\n            type: 'text',\r\n            attributes: [\r\n                {name: 'required', value: 'true'},\r\n            ]\r\n    ]\r\n}).then(result => {\r\n    ...\r\n});\r\n```\r\n\r\n## Showcase\r\n\r\nBelow you see the showcase that you also can visit yourself. I used one of my [previous programs](https:\/\/maximmaeder.com\/display-json-with-html-css-and-javascript\/) to display the returned data.\r\n\r\n![Advanced Form Modal Showcase Gif](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/12\/modal.gif)\r\n\r\n[Visit the Demonstration](https:\/\/articles.maximmaeder.com\/a\/advancedModal\/)\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2026%20-%20Advanced%20Form%20Modal%20with%20JavaScript%20and%20SCSS)\r\n\r\n## Conclusion\r\n\r\nThat's it, an Advanced Form Modal ready to be used in JavaScript; you could now add a cancel Button or make it a little bit better looking with your own CSS code.\r\n\r\nKeep in mind that I am also just a beginner, so imaximt could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "026 - Advanced Form Modal with JavaScript and SCSS\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 689,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>Today we will make something hard to explain: A Modal with a (somewhat) custom form that a programmer or we could use to ask the user something quickly and get the inputted data. Look at the <a href=\"https:\/\/articles.maximmaeder.com\/a\/advancedModal\/\">demo<\/a> to see what I mean. It's going to be a function that will take in some config parameters for the form and the looks of the modal, and it will return a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Promise\">Promise<\/a> that will resolve once the user has successfully submitted the form. This way, the function will be a little like <code>prompt()<\/code> but on steroids, if you get where I'm going.<\/p>\n<p>To keep this Tutorial a little bit shorter, I won't go over the CSS used for this Modal as it is purely cosmetic.<\/p>\n<p>So let's get into it.<\/p>\n<h2>JavaScript of the Advanced Form Modal<\/h2>\n<p>So the whole program will be housed inside a function that we can call multiple times to generate new modals with a form. This function will take in a parameters argument that we will destructure inside the function.<\/p>\n<pre><code class=\"language-js\">function advancedPrompt(parameters) {\n    ...\n}<\/code><\/pre>\n<h3>Destructuring the Arguments<\/h3>\n<p>When we destructure the object to single constant variables, we essentially define the option the programmer can supply to the modal. Most importantly, we need the field data, which will tell the modal what fields\/inputs there are and some other things about them. You will see where the other options are used shortly.<\/p>\n<pre><code class=\"language-js\">\/\/ Destructure Arguments\nconst {\n    fieldData: _fieldData = [],\n    title: _title = 'Modal',\n    submitNodeText: _submitNodeText = 'Submit',\n    panelHeight: _panelHeight = 500,\n    canBeCancelled: _canBeCancelled = true,\n    text: _text = ''\n} = parameters<\/code><\/pre>\n<h3>Creating the Elements<\/h3>\n<p>We then continue by creating the necessary elements for this modal. We create a wrapper that will make it so we can darken the background with CSS, and we add a form to it, which will be the panel of the modal itself. Here we use the <code>_panelHeight<\/code> option from before. After that, we add a node representing the title of the modal where use <code>_title<\/code>. We also add a node representing the describing text of the modal, and lastly, we have a wrapper\/container for the fields that will be generated next.<\/p>\n<pre><code class=\"language-js\">\/\/ Create Elements\n\/\/ Modal Wrapper which will take up the entire Screen\nconst modalWrapper = document.createElement('div');\nmodalWrapper.className = 'modalWrapper';\n\n\/\/ The Modal itself which is also a form\nconst modalPanel = document.createElement('form');\nmodalPanel.className = 'modalPanel'\nmodalPanel.style.height = _panelHeight + 'px'\nmodalWrapper.appendChild(modalPanel);\n\n\/\/ The Title showing what this modal is for\nconst titleNode = document.createElement('div');\ntitleNode.className = 'modalTitle';\ntitleNode.innerHTML = _title;\nmodalPanel.appendChild(titleNode);\n\n\/\/ The Text which further describes the modal.\nconst textNode = document.createElement('div');\ntextNode.innerHTML = _text;\nmodalPanel.appendChild(textNode);\n\n\/\/ Fields\n\/\/ we add a wrapper \/ container that will hold all the fields\nconst fieldsWrapper = document.createElement('div');\nfieldsWrapper.className = 'fieldsWrapper'\nmodalPanel.appendChild(fieldsWrapper);<\/code><\/pre>\n<p>We then loop over each object of the <code>_fieldData<\/code> option. Firstly we get the attributes property, or we default to an empty array. This enables the user to add attributes to the inputs in any way they like to.m Then we make a div that will hold a label and an input. We set the input value according to the field value, if there is one, and the type to the corresponding property of the field object. Then we also add the custom attributes via a <code>for ... of<\/code> loop.<\/p>\n<pre><code class=\"language-js\">\/\/ For each given field we add a Row Element with a label and an Input\nfor (const field of _fieldData) {\n    const attributes = field.attributes || []\n\n    const inputRow = document.createElement('div');\n    inputRow.className = 'inputRow';\n\n    const label = document.createElement('label')\n    label.innerHTML = field.title\n\n    const input = document.createElement('input')\n    input.value = field.value || ''\n    input.type = field.type\n\n    for (const attribute of attributes) {\n        input.setAttribute(attribute.name, attribute.value)\n    }\n\n    field.element = input;\n\n    inputRow.appendChild(label)\n    inputRow.appendChild(input)\n\n    fieldsWrapper.appendChild(inputRow)\n}<\/code><\/pre>\n<p>Then we also need to create the submit and cancel buttons. The user can omit the cancel button if they wish to.<\/p>\n<pre><code class=\"language-js\">\/\/ Actions Panel with submit and cancel button\nconst actionsWrapper = document.createElement('div');\nactionsWrapper.className = 'actionBar'\nmodalPanel.appendChild(actionsWrapper);\n\nconst cancelNode = document.createElement('button');\ncancelNode.className = 'cancelButton'\ncancelNode.innerHTML = 'Cancel'\n\nif (_canBeCancelled) actionsWrapper.appendChild(cancelNode);\n\nconst submitNode = document.createElement('input');\nsubmitNode.type = 'submit'\nsubmitNode.className = 'submitButton'\nsubmitNode.value = _submitNodeText;\nactionsWrapper.appendChild(submitNode);\n\ndocument.body.appendChild(modalWrapper);<\/code><\/pre>\n<h3>Promise and Return Value<\/h3>\n<p>Now that we have all the elements out of the way, we can get to the Promise that is returned from the function. Promises need a callback function that accepts a <code>resolve<\/code> and <code>reject<\/code> function. The <code>resolve<\/code> function can be called with any arguments we want to be available in the <code>then<\/code> function. In this Program, we call this function once the submit event of the form is dispatched. But before that, we also get all fields and their values, and we save them in <code>returnObject<\/code> variable. We also set up some event listeners in case the user has pressed <code>escape<\/code> or pressed the cancel button, and we reject the promise.<\/p>\n<pre><code class=\"language-js\">\/\/ Return Promise\nreturn new Promise((resolve, reject) =&gt; {\n\n    modalPanel.addEventListener('submit', (event) =&gt; {\n        event.preventDefault();\n\n        \/\/ Gather all values from the Form and store with the \n        \/\/ Specified name\n        let returnObject = {}\n\n        for (const field of _fieldData) {\n            returnObject[field.name] = field.element.files || field.element.value || field.element.checked\n        }\n\n        \/\/ Resolve the promise with the Data\n        resolve(returnObject)\n        modalWrapper.remove()\n    })\n\n    cancelNode.addEventListener('pointerdown', rejectPromise)\n\n    window.addEventListener('keydown', (event) =&gt; {\n        if (event.key == 'Escape' &amp;&amp; _canBeCancelled) rejectPromise()\n    })\n\n    function rejectPromise() {\n        modalWrapper.remove()\n        reject('User Cancelled')\n    }\n})<\/code><\/pre>\n<h3>Cancel Reaction<\/h3>\n<h2>Usage Example<\/h2>\n<p>Ok, so how do we use this thing? We first need to import the script and if we have styles we also get those too.<\/p>\n<pre><code class=\"language-html\">&lt;link  rel=\"stylesheet\"  href=\"advancedPrompt\/advancedPrompt.css\"&gt;\n&lt;script  src=\"advancedPrompt\/advancedPrompt.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Then in another script that comes after the import, we call the <code>advancedPrompt()<\/code> function with some parameters. Below we set a title and one field\/input of type <code>text<\/code>, and we also add a <code>then<\/code> callback, so we can react to the user hitting the submit button.<\/p>\n<pre><code class=\"language-js\">advancedPrompt({\n    title: 'My Cool Modal',\n    fieldData: [\n        {\n            title: 'Username',\n            name: 'username',\n            type: 'text',\n            attributes: [\n                {name: 'required', value: 'true'},\n            ]\n    ]\n}).then(result =&gt; {\n    ...\n});<\/code><\/pre>\n<h2>Showcase<\/h2>\n<p>Below you see the showcase that you also can visit yourself. I used one of my <a href=\"https:\/\/maximmaeder.com\/display-json-with-html-css-and-javascript\/\">previous programs<\/a> to display the returned data.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/12\/modal.gif\" alt=\"Advanced Form Modal Showcase Gif\" \/><\/p>\n<p><a href=\"https:\/\/articles.maximmaeder.com\/a\/advancedModal\/\">Visit the Demonstration<\/a>\n<a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2026%20-%20Advanced%20Form%20Modal%20with%20JavaScript%20and%20SCSS\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>That's it, an Advanced Form Modal ready to be used in JavaScript; you could now add a cancel Button or make it a little bit better looking with your own CSS code.<\/p>\n<p>Keep in mind that I am also just a beginner, so imaximt could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "Advanced Form Modal with JavaScript",
            "post_excerpt": "Build a function that spawns an Advanced Modal with a form that will return a promise and the Data in the form.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "advanced-form-modal-with-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/advanced-form-modal-with-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "DOM Creation Function with JavaScript",
        "description": "Let's make a function that makes it easy for us to create DOM and get references to certain elements.",
        "slug": "dom-creation-function-with-javascript",
        "raw_content": "## Idea\r\n\r\nIn this Tutorial, we will make a function that will make it easy for us to create nested elements in JavaScript. It also receives attributes we want to add to the element, some of which have a special meaning. We also make it so the function returns all elements created inside it with `id`, `idx`, or `classx` inside an object so we can edit them later. We also make it, so events are added as an event listener rather than an attribute and enable boolean event property checking; we later see what this means exactly.\r\n\r\n## JavaScript for Creating DOM\r\n\r\nThis whole program is housed inside a function called `e`. This function will use three arguments: `tagName`, `children`, and `attributes`. The first is mandatory, and the second can either be a string or a list of `e` return values. The last one is an object which will be added to the element as an element attribute; some of these attributes do something special.\r\n\r\n```js\r\nfunction e(tagName, children = '', attributes = {}) {\r\n\t...\r\n}\r\n```\r\n\r\n### Setup: Attribute Types\r\n\r\nInside the function, we start by defining an *enums* that holds all the possible Attribute Types; we do this with an object that is frozen via `Object.freeze` and the `Symbol` Function. The Symbol function returns a unique object, so when compared to anything, it will only evaluate to true when compared to itself. The second variable holds an object with duplicate keys from the enum, but the values are regular expressions that can be used to determine the type of a given attribute. \r\n\r\nLastly, we also make an object that will hold the eventual return value. It will at least hold an `element` property, but it may also contain any reference made deeper down the DOM.\r\n\r\n```js\r\nconst AttrTypes = Object.freeze({\r\n    Event: Symbol('Event'),\r\n    Id: Symbol('Id'),\r\n    Idx: Symbol('Idx'),\r\n    Class: Symbol('Class'),\r\n    Classx: Symbol('Classx'),\r\n    Normal: Symbol('Normal'),\r\n})\r\n\r\nconst AttrTypesRegularExpressions = {\r\n    Event: \/on[^:]*(:.*)?\/g,\r\n    Id: \/^id$\/g,\r\n    Idx: \/^idx$\/g,\r\n    Class: \/^class$\/g,\r\n    Classx: \/^classx$\/g,\r\n    Normal: \/.*\/g,\r\n}\r\n\r\nconst returnObject = {\r\n    element: null,\r\n};\r\n```\r\n\r\n### Creating the Current Element\r\n\r\nWe then continue by creating the element itself. For that, we need the first argument that was passed, and we first split it by dots `.` because we want to make it so the user can specify a class right after the tag name, we have to look out for that here. The resulting array should at least contain one element, the actual tag name and an unrestricted amount of class names that should be added.\r\n\r\n```js\r\nconst tagNameParts = tagName.split('.')\r\n\r\nconst element = document.createElement(tagNameParts[0])\r\nreturnObject.element = element;\r\n\r\nlet extraClasses = tagNameParts.slice(1)\r\nif (extraClasses.length != 0) element.classList.add(...extraClasses)\r\n```\r\n\r\n### Adding attributes to the Element\r\n\r\nAfter that, we need to add the attributes to the element. The code for this is housed inside another function.\r\n\r\n```js\r\n\/\/ Add Attributes\r\naddAttributes(attributes)\r\n```\r\n\r\nInside the function we loop over all the attributes, which is as we recall an object so we have to use `Object.keys(o)` to loop over the keys of the attributes which are in our case the attribute names. Inside the Loop we immediately save the value of the given key to a variable and we use another function to get the attribute type of the given attribute name, this function will return one of those symbols that we have defined in the begining.\r\n\r\n```js\r\nfunction addAttributes(attributes) {\r\n\tfor (const attrName of Object.keys(attributes)) {\r\n\t    const attrValue = attributes[attrName]\r\n\t    \r\n        const attrType = getAttributeType(attrName);\r\n\t}\r\n}\r\n```\r\n\r\nWith this information we can then use a switch to react to each attribute in the right way. For  *Normal* attributes we simply add them to the element with `setAttribute`,  but we first transform the attribute name from Camel Case to Hyphens. We do the same thing for attributes of type *Id* but we dont add break after its case code, this way the next case is also executed,  which is *Idx*. Inside there we add the element to the Return Object where the key is the *Id* \/ *Idx* value. We do this so this element is also returned in the end so we have a reference to it.\r\n\r\nFor *Classx* we also add it to the Return Object, but once again we dont add an break so the next case is also evaluated, which is *Class* where we check if the given value is a string or a list, so we add the classes in the right way. \r\n\r\nSo this means *Id* , *Idx* and *Classx* are being added to the return values.\r\n\r\n```js\r\nswitch (attrType) {\r\n\tcase AttrTypes.Normal:\r\n\t    element.setAttribute(camelCaseToHyphens(attrName), attrValue);\r\n\t    break;\r\n\r\n\tcase AttrTypes.Id:\r\n\t    element.setAttribute(camelCaseToHyphens(attrName), attrValue);\r\n\tcase AttrTypes.Idx:\r\n\t    returnObject[attrValue] = element\r\n\t    break;\r\n\r\n\tcase AttrTypes.Classx:\r\n\t    returnObject[attrValue] = element\r\n\r\n\tcase AttrTypes.Class:\r\n\t    const classes = typeof attrValue == 'string' ? [attrValue, ] : attrValue\r\n\t    element.classList.add(...classes);\r\n\t    break\r\n\r\n\t...\r\n}\r\n```\r\n\r\nLastly for the events we first want the programmer to be able to do something like this: `onclick:ctrlKey`, where the callback function is only called if the control key property on the event object was true. To do this we first split the attribute name by `:`, then we need to further dissect the event name so it can be used in `addEventListener()`. Inside the event listener callback we check if there is an event modifier and if there is we only call the function if its true on the event object. If there is no event modifier we simply want to call the callback function. In both cases we also pass it the element as a second argument.\r\n\r\n```js\r\n\tcase AttrTypes.Event:\r\n\t    const eventNameParts = attrName.split(':')\r\n\r\n\t    const eventName = eventNameParts[0].slice(2, attrName.length).toLowerCase()\r\n\t    const eventModifier = eventNameParts[1] || ''\r\n\r\n\t    element.addEventListener(eventName, (event) => {\r\n\t        if (eventModifier) {\r\n\t            if (event[eventModifier]) attrValue(event, element)\r\n\t        } else attrValue(event, element)\r\n\t    })\r\n\t    break;\r\n```\r\n\r\n### Adding Children to the Element\r\n\r\nLets also go over the function that add children to the element. Here we also do something import with the return object of potential children. Also dont forget to return the returnObject after that function call.\r\n\r\n```js\r\n\/\/ Add Children, depending on their type\r\naddChildren(children)\r\n\r\nreturn returnObject\r\n```\r\n\r\nSo the function will first check if the type of the children argument is `string` or `object` ( Array ). In case it is a string we simply set it as the `innerHTML` of the element, but if it is an Object \/ Array we loop over its items and we add the `element` attribute of each to the current element. This means we use the `e` inside the children list. We then also check the return object of the child for any other reference that should be passed up the chain of elements so we can add them to the current returnObject.\r\n\r\n```js\r\nfunction addChildren(children) {\r\n    switch (typeof children) {\r\n        case 'string':\r\n            element.innerHTML = children;\r\n            break;\r\n        case 'object':\r\n            for (const child of children) {\r\n                element.appendChild(child.element);\r\n\r\n                \/\/ Search For References and add them to the returnObject\r\n                for (const attrKey of Object.keys(child)) {\r\n                    if (attrKey == 'element') continue\r\n\r\n                    returnObject[attrKey] = child[attrKey];\r\n                }\r\n            }\r\n            break;\r\n    }\r\n}\r\n```\r\n\r\n### `getAttributeType()` Function\r\n\r\nLet's quickly go over the `getAttributeType()` function that is used to determine how an attribute is handled. Here we loop over the keys of the Object that holds the regular expressions for the different types. If the attribute name matches the expression, we return the symbol at the given location.\r\n\r\n```js\r\nfunction getAttributeType(attributeName) {\r\n    for (const attrTypeName of Object.keys(AttrTypesRegularExpressions)) {\r\n        const expression = AttrTypesRegularExpressions[attrTypeName]\r\n\r\n        if (!!attributeName.match(expression)) return AttrTypes[attrTypeName]\r\n    }        \r\n}\r\n```\r\n\r\n### `camelCaseToHyphens()` Function\r\n\r\nThe `camelCaseToHyphens()` function uses a Regular Expression, the `replace()` function, and the `toLowerCase()` method to transform something like this: `attributeName` to this: `attribute-name`\r\n\r\n```js\r\nfunction camelCaseToHyphens(string) {\r\n    return string.replace(\/([A-Z])\/gm, '-$1').toLowerCase();\r\n}\r\n```\r\n\r\n## Usage\r\n\r\nOk, now that we have the function, how do we use it exactly? It's as easy as calling the `e` function and passing it the right arguments. as you see, the first argument is always a tag name and optionally a class(es). They are nested inside each other, and the elements inside will be available on the `r` variable if they have the `id`, `idx`, or `classx` attributes.\r\n\r\n```js\r\nconst r = e('div', [\r\n    e('h1', 'Title'),\r\n    e('button.mainBtn', 'Cool Button', { id: 'buttonNode', 'onclick:ctrlKey': runSomething }),\r\n    e('button', 'Cool Button CTRL', { idx: 'buttonNodeCtrl', class: ['coolButton', 'fasd\u00f6lk']}),\r\n]);\r\n\r\ndocument.body.appendChild(r.element);\r\n```\r\n\r\n[Look at the Code](https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2027%20-%20JavaScript%20Markup%20Function)\r\n\r\n## Conclusion\r\n\r\nExcellent! You have successfully programmed a Function to create DOM Elements easily!\r\n\r\nKeep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!",
        "featured_image": "027 - JavaScript Markup Function\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 691,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>In this Tutorial, we will make a function that will make it easy for us to create nested elements in JavaScript. It also receives attributes we want to add to the element, some of which have a special meaning. We also make it so the function returns all elements created inside it with <code>id<\/code>, <code>idx<\/code>, or <code>classx<\/code> inside an object so we can edit them later. We also make it, so events are added as an event listener rather than an attribute and enable boolean event property checking; we later see what this means exactly.<\/p>\n<h2>JavaScript for Creating DOM<\/h2>\n<p>This whole program is housed inside a function called <code>e<\/code>. This function will use three arguments: <code>tagName<\/code>, <code>children<\/code>, and <code>attributes<\/code>. The first is mandatory, and the second can either be a string or a list of <code>e<\/code> return values. The last one is an object which will be added to the element as an element attribute; some of these attributes do something special.<\/p>\n<pre><code class=\"language-js\">function e(tagName, children = '', attributes = {}) {\n    ...\n}<\/code><\/pre>\n<h3>Setup: Attribute Types<\/h3>\n<p>Inside the function, we start by defining an <em>enums<\/em> that holds all the possible Attribute Types; we do this with an object that is frozen via <code>Object.freeze<\/code> and the <code>Symbol<\/code> Function. The Symbol function returns a unique object, so when compared to anything, it will only evaluate to true when compared to itself. The second variable holds an object with duplicate keys from the enum, but the values are regular expressions that can be used to determine the type of a given attribute. <\/p>\n<p>Lastly, we also make an object that will hold the eventual return value. It will at least hold an <code>element<\/code> property, but it may also contain any reference made deeper down the DOM.<\/p>\n<pre><code class=\"language-js\">const AttrTypes = Object.freeze({\n    Event: Symbol('Event'),\n    Id: Symbol('Id'),\n    Idx: Symbol('Idx'),\n    Class: Symbol('Class'),\n    Classx: Symbol('Classx'),\n    Normal: Symbol('Normal'),\n})\n\nconst AttrTypesRegularExpressions = {\n    Event: \/on[^:]*(:.*)?\/g,\n    Id: \/^id$\/g,\n    Idx: \/^idx$\/g,\n    Class: \/^class$\/g,\n    Classx: \/^classx$\/g,\n    Normal: \/.*\/g,\n}\n\nconst returnObject = {\n    element: null,\n};<\/code><\/pre>\n<h3>Creating the Current Element<\/h3>\n<p>We then continue by creating the element itself. For that, we need the first argument that was passed, and we first split it by dots <code>.<\/code> because we want to make it so the user can specify a class right after the tag name, we have to look out for that here. The resulting array should at least contain one element, the actual tag name and an unrestricted amount of class names that should be added.<\/p>\n<pre><code class=\"language-js\">const tagNameParts = tagName.split('.')\n\nconst element = document.createElement(tagNameParts[0])\nreturnObject.element = element;\n\nlet extraClasses = tagNameParts.slice(1)\nif (extraClasses.length != 0) element.classList.add(...extraClasses)<\/code><\/pre>\n<h3>Adding attributes to the Element<\/h3>\n<p>After that, we need to add the attributes to the element. The code for this is housed inside another function.<\/p>\n<pre><code class=\"language-js\">\/\/ Add Attributes\naddAttributes(attributes)<\/code><\/pre>\n<p>Inside the function we loop over all the attributes, which is as we recall an object so we have to use <code>Object.keys(o)<\/code> to loop over the keys of the attributes which are in our case the attribute names. Inside the Loop we immediately save the value of the given key to a variable and we use another function to get the attribute type of the given attribute name, this function will return one of those symbols that we have defined in the begining.<\/p>\n<pre><code class=\"language-js\">function addAttributes(attributes) {\n    for (const attrName of Object.keys(attributes)) {\n        const attrValue = attributes[attrName]\n\n        const attrType = getAttributeType(attrName);\n    }\n}<\/code><\/pre>\n<p>With this information we can then use a switch to react to each attribute in the right way. For  <em>Normal<\/em> attributes we simply add them to the element with <code>setAttribute<\/code>,  but we first transform the attribute name from Camel Case to Hyphens. We do the same thing for attributes of type <em>Id<\/em> but we dont add break after its case code, this way the next case is also executed,  which is <em>Idx<\/em>. Inside there we add the element to the Return Object where the key is the <em>Id<\/em> \/ <em>Idx<\/em> value. We do this so this element is also returned in the end so we have a reference to it.<\/p>\n<p>For <em>Classx<\/em> we also add it to the Return Object, but once again we dont add an break so the next case is also evaluated, which is <em>Class<\/em> where we check if the given value is a string or a list, so we add the classes in the right way. <\/p>\n<p>So this means <em>Id<\/em> , <em>Idx<\/em> and <em>Classx<\/em> are being added to the return values.<\/p>\n<pre><code class=\"language-js\">switch (attrType) {\n    case AttrTypes.Normal:\n        element.setAttribute(camelCaseToHyphens(attrName), attrValue);\n        break;\n\n    case AttrTypes.Id:\n        element.setAttribute(camelCaseToHyphens(attrName), attrValue);\n    case AttrTypes.Idx:\n        returnObject[attrValue] = element\n        break;\n\n    case AttrTypes.Classx:\n        returnObject[attrValue] = element\n\n    case AttrTypes.Class:\n        const classes = typeof attrValue == 'string' ? [attrValue, ] : attrValue\n        element.classList.add(...classes);\n        break\n\n    ...\n}<\/code><\/pre>\n<p>Lastly for the events we first want the programmer to be able to do something like this: <code>onclick:ctrlKey<\/code>, where the callback function is only called if the control key property on the event object was true. To do this we first split the attribute name by <code>:<\/code>, then we need to further dissect the event name so it can be used in <code>addEventListener()<\/code>. Inside the event listener callback we check if there is an event modifier and if there is we only call the function if its true on the event object. If there is no event modifier we simply want to call the callback function. In both cases we also pass it the element as a second argument.<\/p>\n<pre><code class=\"language-js\">    case AttrTypes.Event:\n        const eventNameParts = attrName.split(':')\n\n        const eventName = eventNameParts[0].slice(2, attrName.length).toLowerCase()\n        const eventModifier = eventNameParts[1] || ''\n\n        element.addEventListener(eventName, (event) =&gt; {\n            if (eventModifier) {\n                if (event[eventModifier]) attrValue(event, element)\n            } else attrValue(event, element)\n        })\n        break;<\/code><\/pre>\n<h3>Adding Children to the Element<\/h3>\n<p>Lets also go over the function that add children to the element. Here we also do something import with the return object of potential children. Also dont forget to return the returnObject after that function call.<\/p>\n<pre><code class=\"language-js\">\/\/ Add Children, depending on their type\naddChildren(children)\n\nreturn returnObject<\/code><\/pre>\n<p>So the function will first check if the type of the children argument is <code>string<\/code> or <code>object<\/code> ( Array ). In case it is a string we simply set it as the <code>innerHTML<\/code> of the element, but if it is an Object \/ Array we loop over its items and we add the <code>element<\/code> attribute of each to the current element. This means we use the <code>e<\/code> inside the children list. We then also check the return object of the child for any other reference that should be passed up the chain of elements so we can add them to the current returnObject.<\/p>\n<pre><code class=\"language-js\">function addChildren(children) {\n    switch (typeof children) {\n        case 'string':\n            element.innerHTML = children;\n            break;\n        case 'object':\n            for (const child of children) {\n                element.appendChild(child.element);\n\n                \/\/ Search For References and add them to the returnObject\n                for (const attrKey of Object.keys(child)) {\n                    if (attrKey == 'element') continue\n\n                    returnObject[attrKey] = child[attrKey];\n                }\n            }\n            break;\n    }\n}<\/code><\/pre>\n<h3><code>getAttributeType()<\/code> Function<\/h3>\n<p>Let's quickly go over the <code>getAttributeType()<\/code> function that is used to determine how an attribute is handled. Here we loop over the keys of the Object that holds the regular expressions for the different types. If the attribute name matches the expression, we return the symbol at the given location.<\/p>\n<pre><code class=\"language-js\">function getAttributeType(attributeName) {\n    for (const attrTypeName of Object.keys(AttrTypesRegularExpressions)) {\n        const expression = AttrTypesRegularExpressions[attrTypeName]\n\n        if (!!attributeName.match(expression)) return AttrTypes[attrTypeName]\n    }        \n}<\/code><\/pre>\n<h3><code>camelCaseToHyphens()<\/code> Function<\/h3>\n<p>The <code>camelCaseToHyphens()<\/code> function uses a Regular Expression, the <code>replace()<\/code> function, and the <code>toLowerCase()<\/code> method to transform something like this: <code>attributeName<\/code> to this: <code>attribute-name<\/code><\/p>\n<pre><code class=\"language-js\">function camelCaseToHyphens(string) {\n    return string.replace(\/([A-Z])\/gm, '-$1').toLowerCase();\n}<\/code><\/pre>\n<h2>Usage<\/h2>\n<p>Ok, now that we have the function, how do we use it exactly? It's as easy as calling the <code>e<\/code> function and passing it the right arguments. as you see, the first argument is always a tag name and optionally a class(es). They are nested inside each other, and the elements inside will be available on the <code>r<\/code> variable if they have the <code>id<\/code>, <code>idx<\/code>, or <code>classx<\/code> attributes.<\/p>\n<pre><code class=\"language-js\">const r = e('div', [\n    e('h1', 'Title'),\n    e('button.mainBtn', 'Cool Button', { id: 'buttonNode', 'onclick:ctrlKey': runSomething }),\n    e('button', 'Cool Button CTRL', { idx: 'buttonNodeCtrl', class: ['coolButton', 'fasd\u00f6lk']}),\n]);\n\ndocument.body.appendChild(r.element);<\/code><\/pre>\n<p><a href=\"https:\/\/github.com\/Maximinodotpy\/articles\/tree\/main\/article%2027%20-%20JavaScript%20Markup%20Function\">Look at the Code<\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Excellent! You have successfully programmed a Function to create DOM Elements easily!<\/p>\n<p>Keep in mind that I am also just a beginner, so it could be that my way of solving these problems is not the best or that I use functions or features that aren't advised to use. Always ask questions and try to solve problems your way!<\/p>",
            "post_title": "DOM Creation Function with JavaScript",
            "post_excerpt": "Let's make a function that makes it easy for us to create DOM and get references to certain elements.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "dom-creation-function-with-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/dom-creation-function-with-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "How to set up and configure the Tailwindcss Framework.",
        "description": "Tailwind is pretty awesome; with this CSS Framework, one can write utility classes like `p-4` or `cursor-pointer`, and thanks to its bundler, it will only give you the classes you have used",
        "slug": "how-to-set-up-and-configure-the-tailwind-framework",
        "raw_content": "Tailwind is pretty awesome; with this CSS Framework, one can write utility classes like `p-4` or `cursor-pointer`, and thanks to its bundler, it will only give you the classes you have used. So today, we will go over how to set up and configure tailwind for your project.\r\n\r\n## Installation and Setup of Tailwind\r\n\r\n**Install Tailwind with `NPM`**\r\n`npm install -D tailwindcss`\r\n\r\n**Create `tailwind.config.js`**\r\n`npx tailwindcss init`\r\nThis file is used for all configurations that have to do with tailwind.\r\n\r\n**Set Glob Pattern**\r\nSet the [glob pattern](https:\/\/en.wikipedia.org\/wiki\/Glob_%28programming%29) for files that should be searched for utility classes. If you open the tailwind config file that we have just created, this would be the `content` property,  that we can set to a list of glob pattern strings. For now, say it should search for any files within the `src` folder and its subfolders that end with `.html` or `.js`.\r\n```js\r\n\/** @type {import('tailwindcss').Config} *\/\r\nmodule.exports = {\r\n  content: ['.\/src\/**\/*.{html,js}'],\r\n  theme: {\r\n    extend: {},\r\n    },\r\n  },\r\n  plugins: [],\r\n}\r\n```\r\n\r\n**Add  Tailwind Directives to CSS file**\r\nNext, we need to add the following three lines of code to our main CSS file.\r\n```sass\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n```\r\n\r\n**Run CLI Tool**\r\nNext, we need to run the following command so the tailwindcss CLI tool will parse the HTML and js files and put the minified CSS into the `output.css` file. As you see here, we define an input file that is the same as the one where we added the tailwind directives and an output path.\r\n```\r\nnpx tailwindcss -i .\/src\/input.css -o .\/dist\/output.css --watch\r\n```\r\n\r\nIf we are especially lazy ( yes, we are ), we can add this command to the scripts object of our `package.json` so we can run it by saying `npm run tailwind`.\r\n\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"tailwind\": \"npx tailwindcss -i .\/src\/style.css -o .\/src\/output.css --watch\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"tailwindcss\": \"^3.2.4\"\r\n  }\r\n}\r\n```\r\n\r\n**Add the output file to the HTML and start writing.**\r\nLastly, we add the CSS output file to the HTML where we use utility classes, and we can start writing some tailwind code!\r\n```html\r\n<link  rel=\"stylesheet\"  href=\"output.css\">\r\n```\r\n\r\n\r\n\r\n## Configuration  ( Extending Tailwinds Default Theme )\r\n\r\nBy default, tailwind provides us with colors, spacing, font sizes, and other values, but we can do more. Tailwind allows us to set new theme variables or extend the existing ones, which is done in the config file. Below you see how one would add colors to the framework within the `extend` object. You can directly supply a color value or give it another object representing suffixes so that we can make shades for our colors.\r\n\r\n```js\r\n\/** @type {import('tailwindcss').Config} *\/\r\nmodule.exports = {\r\n  content: ['.\/src\/**\/*.{html,js}'],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        'myColor': 'hsl(200, 100%, 50%)',\r\n        'myColorWithShades': {\r\n          100: 'hsl(0, 100%, 50%)',\r\n          200: 'hsl(0, 50%, 50%)',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n}\r\n```\r\n\r\nThese values will then be available anywhere colors are used; if you use VS Code and can't keep track of these colors, you can install the [Tailwind extension](https:\/\/marketplace.visualstudio.com\/items?itemName=bradlc.vscode-tailwindcss) which will help us with the utility classes and even show us the colors we added.\r\n\r\n![f](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/12\/Screenshot-2022-12-22-135416-jpg.webp)\r\n\r\n## But why?\r\n\r\nWhy not just write regular CSS? There are three reasons to use something like tailwind and not plain CSS or a component bases framework like Bootstrap.\r\n\r\n1. **Enforcing a Design System**: Tailwind helps you maintain a consistent look without restricting you too strongly in your choices, as it will only give you a limited palette of colors, spacings, and so on.\r\n2. **Less CSS:** With tailwindcss, you have to write way less CSS, which is good since CSS can get unmaintainable rather quickly.\r\n3. The Tailwind CLI Tool will only put classes into the output file that was used, so you ship the least amount of CSS. \r\n\r\n\r\nIf you are not convinced, I advise you to install tailwind for yourself and try it out ... it is fantastic!\r\n",
        "featured_image": "028 - How to set up and configure the Tailwindcss Framework\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 693,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<p>Tailwind is pretty awesome; with this CSS Framework, one can write utility classes like <code>p-4<\/code> or <code>cursor-pointer<\/code>, and thanks to its bundler, it will only give you the classes you have used. So today, we will go over how to set up and configure tailwind for your project.<\/p>\n<h2>Installation and Setup of Tailwind<\/h2>\n<p><strong>Install Tailwind with <code>NPM<\/code><\/strong>\n<code>npm install -D tailwindcss<\/code><\/p>\n<p><strong>Create <code>tailwind.config.js<\/code><\/strong>\n<code>npx tailwindcss init<\/code>\nThis file is used for all configurations that have to do with tailwind.<\/p>\n<p><strong>Set Glob Pattern<\/strong>\nSet the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Glob_%28programming%29\">glob pattern<\/a> for files that should be searched for utility classes. If you open the tailwind config file that we have just created, this would be the <code>content<\/code> property,  that we can set to a list of glob pattern strings. For now, say it should search for any files within the <code>src<\/code> folder and its subfolders that end with <code>.html<\/code> or <code>.js<\/code>.<\/p>\n<pre><code class=\"language-js\">\/** @type {import('tailwindcss').Config} *\/\nmodule.exports = {\n  content: ['.\/src\/**\/*.{html,js}'],\n  theme: {\n    extend: {},\n    },\n  },\n  plugins: [],\n}<\/code><\/pre>\n<p><strong>Add  Tailwind Directives to CSS file<\/strong>\nNext, we need to add the following three lines of code to our main CSS file.<\/p>\n<pre><code class=\"language-sass\">@tailwind base;\n@tailwind components;\n@tailwind utilities;<\/code><\/pre>\n<p><strong>Run CLI Tool<\/strong>\nNext, we need to run the following command so the tailwindcss CLI tool will parse the HTML and js files and put the minified CSS into the <code>output.css<\/code> file. As you see here, we define an input file that is the same as the one where we added the tailwind directives and an output path.<\/p>\n<pre><code>npx tailwindcss -i .\/src\/input.css -o .\/dist\/output.css --watch<\/code><\/pre>\n<p>If we are especially lazy ( yes, we are ), we can add this command to the scripts object of our <code>package.json<\/code> so we can run it by saying <code>npm run tailwind<\/code>.<\/p>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"tailwind\": \"npx tailwindcss -i .\/src\/style.css -o .\/src\/output.css --watch\"\n  },\n  \"devDependencies\": {\n    \"tailwindcss\": \"^3.2.4\"\n  }\n}<\/code><\/pre>\n<p><strong>Add the output file to the HTML and start writing.<\/strong>\nLastly, we add the CSS output file to the HTML where we use utility classes, and we can start writing some tailwind code!<\/p>\n<pre><code class=\"language-html\">&lt;link  rel=\"stylesheet\"  href=\"output.css\"&gt;<\/code><\/pre>\n<h2>Configuration  ( Extending Tailwinds Default Theme )<\/h2>\n<p>By default, tailwind provides us with colors, spacing, font sizes, and other values, but we can do more. Tailwind allows us to set new theme variables or extend the existing ones, which is done in the config file. Below you see how one would add colors to the framework within the <code>extend<\/code> object. You can directly supply a color value or give it another object representing suffixes so that we can make shades for our colors.<\/p>\n<pre><code class=\"language-js\">\/** @type {import('tailwindcss').Config} *\/\nmodule.exports = {\n  content: ['.\/src\/**\/*.{html,js}'],\n  theme: {\n    extend: {\n      colors: {\n        'myColor': 'hsl(200, 100%, 50%)',\n        'myColorWithShades': {\n          100: 'hsl(0, 100%, 50%)',\n          200: 'hsl(0, 50%, 50%)',\n        },\n      },\n    },\n  },\n  plugins: [],\n}<\/code><\/pre>\n<p>These values will then be available anywhere colors are used; if you use VS Code and can't keep track of these colors, you can install the <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=bradlc.vscode-tailwindcss\">Tailwind extension<\/a> which will help us with the utility classes and even show us the colors we added.<\/p>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/12\/Screenshot-2022-12-22-135416-jpg.webp\" alt=\"f\" \/><\/p>\n<h2>But why?<\/h2>\n<p>Why not just write regular CSS? There are three reasons to use something like tailwind and not plain CSS or a component bases framework like Bootstrap.<\/p>\n<ol>\n<li><strong>Enforcing a Design System<\/strong>: Tailwind helps you maintain a consistent look without restricting you too strongly in your choices, as it will only give you a limited palette of colors, spacings, and so on.<\/li>\n<li><strong>Less CSS:<\/strong> With tailwindcss, you have to write way less CSS, which is good since CSS can get unmaintainable rather quickly.<\/li>\n<li>The Tailwind CLI Tool will only put classes into the output file that was used, so you ship the least amount of CSS. <\/li>\n<\/ol>\n<p>If you are not convinced, I advise you to install tailwind for yourself and try it out ... it is fantastic!<\/p>",
            "post_title": "How to set up and configure the Tailwindcss Framework.",
            "post_excerpt": "Tailwind is pretty awesome; with this CSS Framework, one can write utility classes like `p-4` or `cursor-pointer`, and thanks to its bundler, it will only give you the classes you have used",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "how-to-set-up-and-configure-the-tailwind-framework",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/how-to-set-up-and-configure-the-tailwind-framework\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "How to make a Chrome Extension",
        "description": "Learn how to make Extensions for Chromium-based browsers.",
        "slug": "how-to-make-a-chrome-extension",
        "raw_content": "In this Tutorial, we will learn how to make a simple chrome extension that enables users to search and replace any text on a webpage. This extension won't be really useful, but it will teach you how to make extensions for chromium-based browsers (chrome and edge). Remember that this is also my first extension so look at this tutorial as an entry in my learning diary. I will also show you how to test your extension in a chrome\/edge browser.\r\n\r\n## Making the Extension\r\n\r\nNow let's make an extension! I will show you key concepts as we go, and we will start with the manifest.json file that specifies meta data about the extension.\r\n\r\n### `manifest.json`\r\n\r\nThis `.json` file is situated in the root of our extension project folder, and you see our example below.\r\n\r\n```json\r\n{\r\n    \"name\": \"Website Text Replacing\",\r\n    \"version\": \"0.0.0.1\",\r\n    \"manifest_version\": 3,\r\n    \"description\": \"Replace any text in the website with this simple extension.\",\r\n    \"action\": {\r\n        \"default_popup\": \"popup\/popup.html\"\r\n    },\r\n    \"icons\": {\r\n        \"16\": \"icon\/icon.png\",\r\n        \"32\": \"icon\/icon.png\",\r\n        \"48\": \"icon\/icon.png\",\r\n        \"128\": \"icon\/icon.png\"\r\n    },\r\n    \"content_scripts\": [\r\n        {\r\n            \"matches\": [\r\n                \"<all_urls>\"\r\n            ],\r\n            \"js\": [\r\n                \"content\/content.js\"\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nAnd its object contains info about our extension, like the *name, version, manifest version, and description*. These are self-explaining things, but what about the *action, icons, and content_scripts*. The icons object will be used when the browser displays your extension in the top left or where ever it is seen; here, we can specify icons for different sizes; for now, I have set the same image for all sizes. The *[actions](https:\/\/developer.chrome.com\/docs\/extensions\/reference\/action\/)* object contains info about the popup button in the top right of the browser window, we can specify a bunch of stuff here, but for now, we only specify the path of the HTML page that should be displayed in the popup. lastly, the *[content_scripts](https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/content_scripts\/)* object specifies which js files should be inserted and available in the webpages. *Matches* is a list of string glob patterns of URLs where these content scripts should be inserted.\r\n\r\nThe script used on the popup page will communicate with the content script on the current page.\r\n\r\nLook at the [official documentation](https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/manifest\/) for more options.\r\n\r\n### `popup.html` and `popup.js`\r\n\r\nLet's go over the popup HTML page and its JavaScript Code. As you see, it's a simple page with two inputs with ids so we can access their values later and a button serving as our submit. In the head, we add a CSS file and the js script. We add the *defer* attribute to the script so it will execute after the page is fully parsed.\r\n\r\n```html\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\" \/>\r\n        <title>Replace Website Text<\/title>\r\n\r\n        <link rel=\"stylesheet\" href=\"popup.css\">\r\n        <script src=\"popup.js\" defer><\/script>\r\n    <\/head>\r\n    <body>\r\n        <div>\r\n            <div>\r\n                <label for=\"\">Search<\/label>\r\n                <input type=\"text\" id=\"search\" autofocus>\r\n            <\/div>\r\n            \r\n            <div>\r\n                <label for=\"\">Replace<\/label>\r\n                <input type=\"text\" id=\"replace\">\r\n            <\/div>\r\n\r\n            <button>Replace<\/button>\r\n        <\/div>\r\n    <\/body>\r\n<\/html>\r\n```\r\n\r\nIn the JavaScript file for the popup we make use of the [*chrome.** API](https:\/\/developer.chrome.com\/docs\/extensions\/reference\/) Object that is exposed to you if the script runs in an extension context. But first, we add an event listener to the button, and inside it, we use the `query(opts, callback)` method of `chrome.tabs`, which will search for all tabs that satisfy the query object and it will pass them on to a callback function. In our case, we want the active tab, so we set active to true. This means the resulting list will only include one item. In the callback, we use the `sendMessage(data)` method of `chrome.tabs` to send data to the given tab, for which we need the id. Our data includes the search and replace values of the inputs we defined in the HTML.\r\n\r\n```js\r\nconst button = document.querySelector('button')\r\n\r\nbutton.onclick = function () {\r\n\r\n    chrome.tabs.query({ active: true }, tabs => {\r\n\r\n        console.log('Sending Info to The Content Script ...');\r\n        \r\n        chrome.tabs.sendMessage(tabs[0].id, {\r\n            searchString: search.value,\r\n            replaceString: replace.value\r\n        })\r\n        \r\n    });\r\n}\r\n```\r\n\r\n### `content.js`\r\n\r\nLet's also review the content script, which will listen to these messages and react accordingly. To add an event listener to the messages for this tab we use `chrome.runtime.onMessage.addListener(callback)`. That receives the data we constructed in the previous script and uses it to alter the HTML of the current page via the normal web APIs.\r\n\r\n```js\r\nconsole.log('Replacement Script Running ...');\r\n\r\nchrome.runtime.onMessage.addListener(ev => {\r\n    const searchString = ev.searchString\r\n    const replaceString = ev.replaceString\r\n\r\n    console.log(`Replacing \"${searchString}\" with \"${replaceString}\"`);\r\n\r\n    document.body.innerHTML = document.body.innerHTML.replaceAll(searchString, replaceString)\r\n})\r\n```\r\n\r\n## Testing the Extension\r\n\r\nTesting the extension is easy. \r\n\r\n1. Go to where your extension is managed.\r\n2. Enable *Developer Mode*.\r\n3. Click on *Load unzipped Files*\r\n4. Choose the folder where your `manifest.json` is located.\r\n5. Activate the Extension\r\n\r\nNow it will tell you if you made any error with the manifest file, or in case you run it.\r\n\r\n## Conclusion\r\n\r\nNow that was a quick introduction to Extension in chromium based browsers. Now you could go through the docs and find other cool things you can do like [Keyboard Shortcuts](https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/user_interface\/#commands) or [Context Menu](https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/user_interface\/#context_menu).",
        "featured_image": "029 - How to make a Chrome Extension\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 695,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<p>In this Tutorial, we will learn how to make a simple chrome extension that enables users to search and replace any text on a webpage. This extension won't be really useful, but it will teach you how to make extensions for chromium-based browsers (chrome and edge). Remember that this is also my first extension so look at this tutorial as an entry in my learning diary. I will also show you how to test your extension in a chrome\/edge browser.<\/p>\n<h2>Making the Extension<\/h2>\n<p>Now let's make an extension! I will show you key concepts as we go, and we will start with the manifest.json file that specifies meta data about the extension.<\/p>\n<h3><code>manifest.json<\/code><\/h3>\n<p>This <code>.json<\/code> file is situated in the root of our extension project folder, and you see our example below.<\/p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Website Text Replacing\",\n    \"version\": \"0.0.0.1\",\n    \"manifest_version\": 3,\n    \"description\": \"Replace any text in the website with this simple extension.\",\n    \"action\": {\n        \"default_popup\": \"popup\/popup.html\"\n    },\n    \"icons\": {\n        \"16\": \"icon\/icon.png\",\n        \"32\": \"icon\/icon.png\",\n        \"48\": \"icon\/icon.png\",\n        \"128\": \"icon\/icon.png\"\n    },\n    \"content_scripts\": [\n        {\n            \"matches\": [\n                \"&lt;all_urls&gt;\"\n            ],\n            \"js\": [\n                \"content\/content.js\"\n            ]\n        }\n    ]\n}<\/code><\/pre>\n<p>And its object contains info about our extension, like the <em>name, version, manifest version, and description<\/em>. These are self-explaining things, but what about the <em>action, icons, and content_scripts<\/em>. The icons object will be used when the browser displays your extension in the top left or where ever it is seen; here, we can specify icons for different sizes; for now, I have set the same image for all sizes. The <em><a href=\"https:\/\/developer.chrome.com\/docs\/extensions\/reference\/action\/\">actions<\/a><\/em> object contains info about the popup button in the top right of the browser window, we can specify a bunch of stuff here, but for now, we only specify the path of the HTML page that should be displayed in the popup. lastly, the <em><a href=\"https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/content_scripts\/\">content_scripts<\/a><\/em> object specifies which js files should be inserted and available in the webpages. <em>Matches<\/em> is a list of string glob patterns of URLs where these content scripts should be inserted.<\/p>\n<p>The script used on the popup page will communicate with the content script on the current page.<\/p>\n<p>Look at the <a href=\"https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/manifest\/\">official documentation<\/a> for more options.<\/p>\n<h3><code>popup.html<\/code> and <code>popup.js<\/code><\/h3>\n<p>Let's go over the popup HTML page and its JavaScript Code. As you see, it's a simple page with two inputs with ids so we can access their values later and a button serving as our submit. In the head, we add a CSS file and the js script. We add the <em>defer<\/em> attribute to the script so it will execute after the page is fully parsed.<\/p>\n<pre><code class=\"language-html\">&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" \/&gt;\n        &lt;title&gt;Replace Website Text&lt;\/title&gt;\n\n        &lt;link rel=\"stylesheet\" href=\"popup.css\"&gt;\n        &lt;script src=\"popup.js\" defer&gt;&lt;\/script&gt;\n    &lt;\/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;div&gt;\n                &lt;label for=\"\"&gt;Search&lt;\/label&gt;\n                &lt;input type=\"text\" id=\"search\" autofocus&gt;\n            &lt;\/div&gt;\n\n            &lt;div&gt;\n                &lt;label for=\"\"&gt;Replace&lt;\/label&gt;\n                &lt;input type=\"text\" id=\"replace\"&gt;\n            &lt;\/div&gt;\n\n            &lt;button&gt;Replace&lt;\/button&gt;\n        &lt;\/div&gt;\n    &lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/pre>\n<p>In the JavaScript file for the popup we make use of the <a href=\"https:\/\/developer.chrome.com\/docs\/extensions\/reference\/\">*chrome.** API<\/a> Object that is exposed to you if the script runs in an extension context. But first, we add an event listener to the button, and inside it, we use the <code>query(opts, callback)<\/code> method of <code>chrome.tabs<\/code>, which will search for all tabs that satisfy the query object and it will pass them on to a callback function. In our case, we want the active tab, so we set active to true. This means the resulting list will only include one item. In the callback, we use the <code>sendMessage(data)<\/code> method of <code>chrome.tabs<\/code> to send data to the given tab, for which we need the id. Our data includes the search and replace values of the inputs we defined in the HTML.<\/p>\n<pre><code class=\"language-js\">const button = document.querySelector('button')\n\nbutton.onclick = function () {\n\n    chrome.tabs.query({ active: true }, tabs =&gt; {\n\n        console.log('Sending Info to The Content Script ...');\n\n        chrome.tabs.sendMessage(tabs[0].id, {\n            searchString: search.value,\n            replaceString: replace.value\n        })\n\n    });\n}<\/code><\/pre>\n<h3><code>content.js<\/code><\/h3>\n<p>Let's also review the content script, which will listen to these messages and react accordingly. To add an event listener to the messages for this tab we use <code>chrome.runtime.onMessage.addListener(callback)<\/code>. That receives the data we constructed in the previous script and uses it to alter the HTML of the current page via the normal web APIs.<\/p>\n<pre><code class=\"language-js\">console.log('Replacement Script Running ...');\n\nchrome.runtime.onMessage.addListener(ev =&gt; {\n    const searchString = ev.searchString\n    const replaceString = ev.replaceString\n\n    console.log(`Replacing \"${searchString}\" with \"${replaceString}\"`);\n\n    document.body.innerHTML = document.body.innerHTML.replaceAll(searchString, replaceString)\n})<\/code><\/pre>\n<h2>Testing the Extension<\/h2>\n<p>Testing the extension is easy. <\/p>\n<ol>\n<li>Go to where your extension is managed.<\/li>\n<li>Enable <em>Developer Mode<\/em>.<\/li>\n<li>Click on <em>Load unzipped Files<\/em><\/li>\n<li>Choose the folder where your <code>manifest.json<\/code> is located.<\/li>\n<li>Activate the Extension<\/li>\n<\/ol>\n<p>Now it will tell you if you made any error with the manifest file, or in case you run it.<\/p>\n<h2>Conclusion<\/h2>\n<p>Now that was a quick introduction to Extension in chromium based browsers. Now you could go through the docs and find other cool things you can do like <a href=\"https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/user_interface\/#commands\">Keyboard Shortcuts<\/a> or <a href=\"https:\/\/developer.chrome.com\/docs\/extensions\/mv3\/user_interface\/#context_menu\">Context Menu<\/a>.<\/p>",
            "post_title": "How to make a Chrome Extension",
            "post_excerpt": "Learn how to make Extensions for Chromium-based browsers.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "how-to-make-a-chrome-extension",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/how-to-make-a-chrome-extension\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Infinite Scrolling Website with JavaScript",
        "description": "Learn how to make an infinitely scrolling website with JavaScript, HTML, and CSS. Learn about the Intersection Observer API.",
        "slug": "infinite-scrolling-website-with-javascript",
        "raw_content": "## Idea\r\n\r\nIn this Tutorial, I will teach you how to make an infinite-scrolling website via the [IntersectionObserver API](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Intersection_Observer_API) in JavaScript. Our website will show random pictures of cats, so we will also learn how to fetch JSON from an [API](https:\/\/thecatapi.com\/). Lastly, we add a little loading animation that plays while the image is loading to indicate to the user that more content is coming.\r\n\r\nVisit the [Demo](https:\/\/demos.maximmaeder.com\/demo\/catstragam\/) to understand better what we are about to do. Below you also see it.\r\n\r\n![Showcase Video of Catstagram](showcase.gif)\r\n\r\n## Markup of the infinite scrolling website\r\n\r\nLet's start with the Markup of our little website. In the head, we need to add our script and link tags to the corresponding files. Mind the [defer](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\/script#attr-defer) attribute added to the script tag, as its content should only run when the HTML has fully loaded. This way, we don't have to add scripts to the bottom of the page.\r\n\r\n```HTML\r\n<script src=\"script.js\" defer><\/script>\r\n<link rel=\"stylesheet\" href=\"style.css\">\r\n```\r\n\r\nNext up, we need to add a div to our body to hold the Images \/ Items of our Timeline. It will be 4 column grid. We will also make it so some of the pictures span two rows if they are high.\r\n\r\n```HTML\r\n<div class=\"pictures\"><\/div>\r\n```\r\n\r\n## JavaScript\r\n\r\nLet's get to the script part of this Tutorial. We start by defining some variables that will aid us later. To ensure no duplicate images, we will keep track of their IDs.\r\n\r\n```js\r\nconst URL = 'https:\/\/api.thecatapi.com\/v1\/images\/search'\r\nconst container = document.querySelector('.pictures')\r\n\r\nconst ids = [];\r\n```\r\n\r\nWe are continuing by setting up our Intersection Observer. Its constructor receives a callback function and an Options Object.\r\n\r\n```js\r\nconst observer = new IntersectionObserver(observerCallback, {\r\n    threshold: 1,\r\n    rootMargin: '500px'\r\n})\r\n```\r\n\r\nLater we go over the callback and what it does. Now let's talk about the two keys in the options object.\r\n\r\n- `threshold`: The Callback is called every time an observed element enters or exits the container, and with this attribute, we tell it how much of it has to be visible to be triggered. 1 means it has to be fully visible.\r\n- `rootMargin`: Define an invisible margin outside (or inside) the container that is also considered *inside*. ( This also means the `threshold` attribute does not show any effect in this case. I just added it, so you see it. )\r\n\r\nNow the Observer won't do anything because we have to define elements that will be observed by it, and for this, we create the first image in the container with `addPicture()`. We later look at this function. Then we add the last child of the container to the observe via its `observe(element)` method.\r\n\r\n```js\r\naddPicture()\r\nobserver.observe(container.lastChild)\r\n```\r\n\r\n### Observer Callback\r\n\r\nLet's go over the Callback function for the Observer. It will always receive a list of elements that either exited or entered the container. We get the first element of that list and check if its `isIntersecting` property is true. If that's the case, we will add another picture. Afterward, we unobserve this element via the `unobserve(element)` method. Lastly, we again add the last element in the container to the observed elements.\r\n\r\n```js\r\nfunction observerCallback(entries) {\r\n    if (entries[0].isIntersecting) {\r\n        addPicture()\r\n    }\r\n    observer.unobserve(entries[0].target)\r\n    observer.observe(container.lastChild)\r\n}\r\n```\r\n\r\nNow, this only watches the last picture, and if it is visible, we know the user has scrolled too far down, and we have to add another image. This new picture will be the next observed element since it is the last. Conveniently newly created elements also trigger the Observer even though they were never outside the container.\r\n    \r\n### `addPicture` Function\r\n\r\nNow how does this `addPicture` function work? Firstly the function is created with the `async` keyword so it can await results from the fetch request, and we don't have to use `.then()`. Then inside the function, we start by creating a wrapper link element that will hold the image and the image itself. We also add the wrapper to the container now rather than later because the image may take longer to load.\r\n\r\n```js\r\nasync function addPicture() {\r\n\r\n    const wrapper = document.createElement('a')\r\n    wrapper.target = '_blank'\r\n    \r\n    const imgNode = document.createElement('img')\r\n    \r\n    wrapper.appendChild(imgNode)\r\n    container.appendChild(wrapper)\r\n\r\n    ...\r\n}\r\n```\r\n\r\nContinuing, we get an image and some metadata about it with the `getPicture` function, which I will explain in a few moments. And we set the wrapper link and image source to the URL of the returned object.\r\n\r\n```js\r\nlet cat = await getPicture()\r\n    \r\nwrapper.href = cat.url\r\nimgNode.src = cat.url\r\n```\r\n\r\nLastly, we also check the height and width of the image, and in case their ratio is lower than 0.8, we set the `style.gridRow` attribute to `span 2`, which will make it take up two rows of the grid.\r\n\r\n```js\r\nconst ratio = cat.width \/ cat.height\r\nif (ratio < 0.8) {\r\n    wrapper.style.gridRow = 'span 2'\r\n}\r\n```\r\n\r\n### `getPicture` Function\r\n\r\nNow to get the picture, we use the `fetch` function and the URL we defined above. You can go to the URL manually in your browser to see that it returns json. We also need to parse this json with the `json` method. In case the id in the json object is already in the list of ids, we throw an error. If not, we push the current id to the id list and return the json for the cat image. If any error happens, it will go to the catch block and return the `getPicture` function, which means that it will try to get a picture every time it does not succeed. There may be better approaches than this, but it works for now.\r\n\r\n```js\r\nasync function getPicture() {\r\n    try {\r\n        let r = await fetch(URL)\r\n        let j = (await r.json())[0]\r\n        if (ids.includes(j.id)) {\r\n            throw new Error('Image Already Loaded')\r\n        }\r\n        ids.push(j.id)\r\n        return j\r\n\r\n\r\n    } catch (error) {\r\n        return getPicture()\r\n    }\r\n}\r\n```\r\n\r\n## Styling the infinite scrolling grid\r\n\r\nLet's also style our website. I will only go over the grid and the animation.\r\n\r\nFor the container, we set its display to grid, and importantly, we set the grid-auto-rows property to 200px. This means we don't define how many rows there are. We instead say every row, regardless of how many there are, should be this high.\r\n\r\n```CSS\r\n.pictures {\r\n    display: grid;\r\n    height: 100%;\r\n    grid-template-columns: repeat( 2, 1fr );\r\n    grid-auto-rows: 200px;\r\n    gap: 20px;\r\n}\r\n```\r\n\r\nNow for the individual images, we set object-fit to cover so the image will fill its whole container but don't overflow. For the animation, we then give it a gradient background and resize it so it is six times wider than usual. Lastly, we add an animation to it.\r\n\r\n```CSS\r\n.pictures img {\r\n    transition: all 0.2s ease-in-out;\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    box-shadow: 0 0 2px hsl(0, 0%, 70%);\r\n\r\n    background: linear-gradient(90deg, hsl(0, 0%, 30%), HSL(0, 0%, 50%), HSL(0, 0%, 30%));\r\n    background-size: 600% 100%;\r\n    animation: gradient 1s ease infinite;\r\n    animation-direction: alternate;\r\n}\r\n```\r\n\r\nThis animation is then defined with the `@keyframes` rule, where we edit the background-position property.\r\n\r\n```CSS\r\n@keyframes gradient {\r\n    0% {background-position: 0%}\r\n    100% {background-position: 100%}\r\n}\r\n```\r\n\r\n## Conclusion: Infinite Scrolling Website\r\n\r\nWe made it a website that shows a bunch of cats that get more if you scroll down. I hope that my explanation is of some use to you. Also, remember that I am a beginner, so you should always look for better ways to solve these problems.\r\n\r\nLook at the [Source Code](https:\/\/github.com\/Maximinodotpy\/articles) in my GitHub Repository.\r\n\r\nVisit the [Demo](https:\/\/demos.maximmaeder.com\/demo\/catstragam\/).",
        "featured_image": "030 - Infinite Scrolling Website with JavaScript\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 697,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<h2>Idea<\/h2>\n<p>In this Tutorial, I will teach you how to make an infinite-scrolling website via the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Intersection_Observer_API\">IntersectionObserver API<\/a> in JavaScript. Our website will show random pictures of cats, so we will also learn how to fetch JSON from an <a href=\"https:\/\/thecatapi.com\/\">API<\/a>. Lastly, we add a little loading animation that plays while the image is loading to indicate to the user that more content is coming.<\/p>\n<p>Visit the <a href=\"https:\/\/demos.maximmaeder.com\/demo\/catstragam\/\">Demo<\/a> to understand better what we are about to do. Below you also see it.<\/p>\n<p><img src=\"showcase.gif\" alt=\"Showcase Video of Catstagram\" \/><\/p>\n<h2>Markup of the infinite scrolling website<\/h2>\n<p>Let's start with the Markup of our little website. In the head, we need to add our script and link tags to the corresponding files. Mind the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\/script#attr-defer\">defer<\/a> attribute added to the script tag, as its content should only run when the HTML has fully loaded. This way, we don't have to add scripts to the bottom of the page.<\/p>\n<pre><code class=\"language-HTML\">&lt;script src=\"script.js\" defer&gt;&lt;\/script&gt;\n&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;<\/code><\/pre>\n<p>Next up, we need to add a div to our body to hold the Images \/ Items of our Timeline. It will be 4 column grid. We will also make it so some of the pictures span two rows if they are high.<\/p>\n<pre><code class=\"language-HTML\">&lt;div class=\"pictures\"&gt;&lt;\/div&gt;<\/code><\/pre>\n<h2>JavaScript<\/h2>\n<p>Let's get to the script part of this Tutorial. We start by defining some variables that will aid us later. To ensure no duplicate images, we will keep track of their IDs.<\/p>\n<pre><code class=\"language-js\">const URL = 'https:\/\/api.thecatapi.com\/v1\/images\/search'\nconst container = document.querySelector('.pictures')\n\nconst ids = [];<\/code><\/pre>\n<p>We are continuing by setting up our Intersection Observer. Its constructor receives a callback function and an Options Object.<\/p>\n<pre><code class=\"language-js\">const observer = new IntersectionObserver(observerCallback, {\n    threshold: 1,\n    rootMargin: '500px'\n})<\/code><\/pre>\n<p>Later we go over the callback and what it does. Now let's talk about the two keys in the options object.<\/p>\n<ul>\n<li><code>threshold<\/code>: The Callback is called every time an observed element enters or exits the container, and with this attribute, we tell it how much of it has to be visible to be triggered. 1 means it has to be fully visible.<\/li>\n<li><code>rootMargin<\/code>: Define an invisible margin outside (or inside) the container that is also considered <em>inside<\/em>. ( This also means the <code>threshold<\/code> attribute does not show any effect in this case. I just added it, so you see it. )<\/li>\n<\/ul>\n<p>Now the Observer won't do anything because we have to define elements that will be observed by it, and for this, we create the first image in the container with <code>addPicture()<\/code>. We later look at this function. Then we add the last child of the container to the observe via its <code>observe(element)<\/code> method.<\/p>\n<pre><code class=\"language-js\">addPicture()\nobserver.observe(container.lastChild)<\/code><\/pre>\n<h3>Observer Callback<\/h3>\n<p>Let's go over the Callback function for the Observer. It will always receive a list of elements that either exited or entered the container. We get the first element of that list and check if its <code>isIntersecting<\/code> property is true. If that's the case, we will add another picture. Afterward, we unobserve this element via the <code>unobserve(element)<\/code> method. Lastly, we again add the last element in the container to the observed elements.<\/p>\n<pre><code class=\"language-js\">function observerCallback(entries) {\n    if (entries[0].isIntersecting) {\n        addPicture()\n    }\n    observer.unobserve(entries[0].target)\n    observer.observe(container.lastChild)\n}<\/code><\/pre>\n<p>Now, this only watches the last picture, and if it is visible, we know the user has scrolled too far down, and we have to add another image. This new picture will be the next observed element since it is the last. Conveniently newly created elements also trigger the Observer even though they were never outside the container.<\/p>\n<h3><code>addPicture<\/code> Function<\/h3>\n<p>Now how does this <code>addPicture<\/code> function work? Firstly the function is created with the <code>async<\/code> keyword so it can await results from the fetch request, and we don't have to use <code>.then()<\/code>. Then inside the function, we start by creating a wrapper link element that will hold the image and the image itself. We also add the wrapper to the container now rather than later because the image may take longer to load.<\/p>\n<pre><code class=\"language-js\">async function addPicture() {\n\n    const wrapper = document.createElement('a')\n    wrapper.target = '_blank'\n\n    const imgNode = document.createElement('img')\n\n    wrapper.appendChild(imgNode)\n    container.appendChild(wrapper)\n\n    ...\n}<\/code><\/pre>\n<p>Continuing, we get an image and some metadata about it with the <code>getPicture<\/code> function, which I will explain in a few moments. And we set the wrapper link and image source to the URL of the returned object.<\/p>\n<pre><code class=\"language-js\">let cat = await getPicture()\n\nwrapper.href = cat.url\nimgNode.src = cat.url<\/code><\/pre>\n<p>Lastly, we also check the height and width of the image, and in case their ratio is lower than 0.8, we set the <code>style.gridRow<\/code> attribute to <code>span 2<\/code>, which will make it take up two rows of the grid.<\/p>\n<pre><code class=\"language-js\">const ratio = cat.width \/ cat.height\nif (ratio &lt; 0.8) {\n    wrapper.style.gridRow = 'span 2'\n}<\/code><\/pre>\n<h3><code>getPicture<\/code> Function<\/h3>\n<p>Now to get the picture, we use the <code>fetch<\/code> function and the URL we defined above. You can go to the URL manually in your browser to see that it returns json. We also need to parse this json with the <code>json<\/code> method. In case the id in the json object is already in the list of ids, we throw an error. If not, we push the current id to the id list and return the json for the cat image. If any error happens, it will go to the catch block and return the <code>getPicture<\/code> function, which means that it will try to get a picture every time it does not succeed. There may be better approaches than this, but it works for now.<\/p>\n<pre><code class=\"language-js\">async function getPicture() {\n    try {\n        let r = await fetch(URL)\n        let j = (await r.json())[0]\n        if (ids.includes(j.id)) {\n            throw new Error('Image Already Loaded')\n        }\n        ids.push(j.id)\n        return j\n\n    } catch (error) {\n        return getPicture()\n    }\n}<\/code><\/pre>\n<h2>Styling the infinite scrolling grid<\/h2>\n<p>Let's also style our website. I will only go over the grid and the animation.<\/p>\n<p>For the container, we set its display to grid, and importantly, we set the grid-auto-rows property to 200px. This means we don't define how many rows there are. We instead say every row, regardless of how many there are, should be this high.<\/p>\n<pre><code class=\"language-CSS\">.pictures {\n    display: grid;\n    height: 100%;\n    grid-template-columns: repeat( 2, 1fr );\n    grid-auto-rows: 200px;\n    gap: 20px;\n}<\/code><\/pre>\n<p>Now for the individual images, we set object-fit to cover so the image will fill its whole container but don't overflow. For the animation, we then give it a gradient background and resize it so it is six times wider than usual. Lastly, we add an animation to it.<\/p>\n<pre><code class=\"language-CSS\">.pictures img {\n    transition: all 0.2s ease-in-out;\n    display: block;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    box-shadow: 0 0 2px hsl(0, 0%, 70%);\n\n    background: linear-gradient(90deg, hsl(0, 0%, 30%), HSL(0, 0%, 50%), HSL(0, 0%, 30%));\n    background-size: 600% 100%;\n    animation: gradient 1s ease infinite;\n    animation-direction: alternate;\n}<\/code><\/pre>\n<p>This animation is then defined with the <code>@keyframes<\/code> rule, where we edit the background-position property.<\/p>\n<pre><code class=\"language-CSS\">@keyframes gradient {\n    0% {background-position: 0%}\n    100% {background-position: 100%}\n}<\/code><\/pre>\n<h2>Conclusion: Infinite Scrolling Website<\/h2>\n<p>We made it a website that shows a bunch of cats that get more if you scroll down. I hope that my explanation is of some use to you. Also, remember that I am a beginner, so you should always look for better ways to solve these problems.<\/p>\n<p>Look at the <a href=\"https:\/\/github.com\/Maximinodotpy\/articles\">Source Code<\/a> in my GitHub Repository.<\/p>\n<p>Visit the <a href=\"https:\/\/demos.maximmaeder.com\/demo\/catstragam\/\">Demo<\/a>.<\/p>",
            "post_title": "Infinite Scrolling Website with JavaScript",
            "post_excerpt": "Learn how to make an infinitely scrolling website with JavaScript, HTML, and CSS. Learn about the Intersection Observer API.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "infinite-scrolling-website-with-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/infinite-scrolling-website-with-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "All Edge Dev Tool Panels",
        "description": "Let's take a quick look at every Dev Tool Panel \/ Tool in Microsoft Edge.",
        "slug": "all-edge-dev-tool-panels",
        "raw_content": "I am one of those few people that use Microsoft Edge for development and everything else, but I have yet to look at the Dev Tools in detail. So until now, I only used\/knew about *Elements*, *Console* and maybe *Sources*. But for the sake of learning and this article, I want to explain every Panel of the [dev tools](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/about-tools) in my own words. Keep in mind that there also is official documentation so please interpret this article as an inspirational source rather than a container of knowledge, if you get what I mean. So let's go ahead.\r\n\r\n\r\n### Animations\r\n\r\nWith the *Animations* Panel, one can view all current website animations that were made with either a transition, an animation made with `@keyframes`, or an animation made with the [Web Animations JS API](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Web_Animations_API). We can even edit the animation's timing properties by dragging some handlers, and we can set the animation speed of the web page to either 100%, 25%, or 10%.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/inspect-styles\/animations)\r\n\r\n### Application\r\n\r\nThe *Application* Panel is helpful when you want to make a fully fletched [Web App](https:\/\/maximmaeder.com\/how-to-make-a-progressive-web-app\/) with a Manifest File, Cookies, Local Storage, Service Workers, or even Indexed DB as this Panel shows you some exciting information about all of this.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/storage\/application-tool)\r\n\r\n### Changes\r\n\r\nThis Panel shows you all files you changed from within the Dev Tools and their differences from the original, so if you made many changes in the browser, you could now apply them to the source in your IDE. Today these features are probably useless as most Websites aren't made statically but rather transpiled or rendered or built together in another way that is different from what we edit, for example, PHP, which itself never arrives in the browser.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/changes\/changes-tool)\r\n\r\n### Coverage\r\n\r\nThe *Coverage* Panel shows us how much of the loaded resources `.js` and `.css` is used by the Website and how much is not. It has a little table showing used and unused bytes. Like *Changes* it can be useless because we may use some bundler or something of that nature that minifies our code to its best ability, and we need to edit the shipped code ourselves. But it's cool nonetheless.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/coverage\/)\r\n\r\n### CSS Overview\r\n\r\nThe *CSS Overview* is similar to the *Coverage* as they help us find unused resources. But this Tool is only for CSS and shows a detailed report of fonts, colors, and sizes used on the size. It will also show you unused declarations and media queries.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/css\/css-overview-tool)\r\n\r\n### Detached Elements\r\n\r\nThis Tool is helpful for performance as it shows you memory leaks in the form of elements that are no longer in the DOM but still saved somewhere in the JavaScript Code of the Website.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/memory-problems\/dom-leaks)\r\n\r\n### Developer Resources\r\n\r\nThis Tool shows you links to the source maps of your Website that are used when you transpile\/compile, for example, SASS to CSS or TypeScript to JavaScript. SASS will add a line like this to your compiled CSS: ` \/*# sourceMappingURL=\/path\/to\/thefile.css.map *\/`. This will tell your browser where this file comes from. In this example, the browser will show the original SCSS \/ SASS file in the sources panel and make it editable.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/developer-resources\/developer-resources)\r\n\r\n### Issues\r\n\r\nThis Panel analyzes your webpage and shows you issues related to accessibility, Compatibility across Browsers, Performance, Progressive Web Apps, Security, and other settings on your site.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/issues\/)\r\n\r\n### Lighthouse\r\n\r\nThis Tool also helps you identify problems with your Website. It is often used when making PWAs or SEO-visible Websites. It does not run automatically; you can choose what the Tool should look out for.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/lighthouse\/lighthouse-tool)\r\n\r\n### Media\r\n\r\nThis Panel shows you the Media Players ( Video and Audio ) of your Website and some helpful information about them and some associated events.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/media-panel\/)\r\n\r\n### Memory\r\n\r\nWith this Tool, you can analyze the memory usage of your Website and optimize it according to this info.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/experimental-features\/share-traces)4\r\n\r\n### Network\r\n\r\nWith this Tool, you can see all network requests made after the initial page load. For example, on my little Website [Catstagram](https:\/\/demos.maximmaeder.com\/demo\/catstragam\/) you can see the fetch requests and images loaded in as the user scrolls down. You can also simulate a slower bandwidth or even offline to see how your Website behaves in case there is no connection.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/network\/)\r\n\r\n### Network Request Blocking\r\n\r\nIt simply allows us to block specific requests on a URL pattern basis, so we can also simulate how our Website behaves in case another Website \/ API is down, but the rest works.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/network-request-blocking\/network-request-blocking-tool)\r\n\r\n### Network conditions\r\n\r\nThis Tool also allows us to simulate network bandwidths, but here we can also simulate another user agent for example, chrome or firefox.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/network-conditions\/network-conditions-tool)\r\n\r\n### Quick Source & Sources\r\n\r\nWith sources, you can see all the files sent to you and where they are on the web server. This is useful if you want to download a picture from a page, but it was added via `background` in CSS. Here you will find all images that were sent.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/sources\/)\r\n\r\n### Rendering\r\n\r\nRendering is pretty awesome as it allows us developers to see which regions of our Website are being repainted or where ther layout shifts. Here we can also simulate Media User Preferences like: `forced-colors`, `prefers-reduced-motion` or even `prefers-color-scheme`. Lastly, you can also see how your Website looks to people with vision deficiencies.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/rendering-tools\/rendering-tool)\r\n\r\n### Search\r\n\r\nDoes what it says on the Box, It will help you search for any text or even Regular Expression within the shipped files and even the folder that is added in the Filestystem Tab of *Sources*.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/search\/search-tool)\r\n\r\n### Security\r\n\r\nThis Panel simply shows you your certificate and connection and the certificates and connections with all external websites.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/security\/)\r\n\r\n### Sensors\r\n\r\nWith the *Sensors* Panel you can emulate a fake position and fake device orientation so you can test the scripts on your Website that handler events and the such relating to this.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/device-mode\/orientation)\r\n\r\n### Elements\r\n\r\nThis is the classic Tool, that everybody knows, here, you can look at the HTMl and CSS of your page and edit it easily.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/elements-tool\/elements-tool)\r\n\r\n### Console\r\n\r\nThe console is your best friend when you want to debug JavaScript Code, as it will show your `console.log()` messages. You can also type in JS Commands here as it also acts as a REPL.\r\n\r\n[Official Documentation](https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/console\/)\r\n\r\n### Welcome\r\n\r\nShows updates of the Dev Tools and other lovely messages.",
        "featured_image": "031 - All Edge Dev Tool Panels\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 699,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<p>I am one of those few people that use Microsoft Edge for development and everything else, but I have yet to look at the Dev Tools in detail. So until now, I only used\/knew about <em>Elements<\/em>, <em>Console<\/em> and maybe <em>Sources<\/em>. But for the sake of learning and this article, I want to explain every Panel of the <a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/about-tools\">dev tools<\/a> in my own words. Keep in mind that there also is official documentation so please interpret this article as an inspirational source rather than a container of knowledge, if you get what I mean. So let's go ahead.<\/p>\n<h3>Animations<\/h3>\n<p>With the <em>Animations<\/em> Panel, one can view all current website animations that were made with either a transition, an animation made with <code>@keyframes<\/code>, or an animation made with the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Web_Animations_API\">Web Animations JS API<\/a>. We can even edit the animation's timing properties by dragging some handlers, and we can set the animation speed of the web page to either 100%, 25%, or 10%.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/inspect-styles\/animations\">Official Documentation<\/a><\/p>\n<h3>Application<\/h3>\n<p>The <em>Application<\/em> Panel is helpful when you want to make a fully fletched <a href=\"https:\/\/maximmaeder.com\/how-to-make-a-progressive-web-app\/\">Web App<\/a> with a Manifest File, Cookies, Local Storage, Service Workers, or even Indexed DB as this Panel shows you some exciting information about all of this.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/storage\/application-tool\">Official Documentation<\/a><\/p>\n<h3>Changes<\/h3>\n<p>This Panel shows you all files you changed from within the Dev Tools and their differences from the original, so if you made many changes in the browser, you could now apply them to the source in your IDE. Today these features are probably useless as most Websites aren't made statically but rather transpiled or rendered or built together in another way that is different from what we edit, for example, PHP, which itself never arrives in the browser.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/changes\/changes-tool\">Official Documentation<\/a><\/p>\n<h3>Coverage<\/h3>\n<p>The <em>Coverage<\/em> Panel shows us how much of the loaded resources <code>.js<\/code> and <code>.css<\/code> is used by the Website and how much is not. It has a little table showing used and unused bytes. Like <em>Changes<\/em> it can be useless because we may use some bundler or something of that nature that minifies our code to its best ability, and we need to edit the shipped code ourselves. But it's cool nonetheless.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/coverage\/\">Official Documentation<\/a><\/p>\n<h3>CSS Overview<\/h3>\n<p>The <em>CSS Overview<\/em> is similar to the <em>Coverage<\/em> as they help us find unused resources. But this Tool is only for CSS and shows a detailed report of fonts, colors, and sizes used on the size. It will also show you unused declarations and media queries.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/css\/css-overview-tool\">Official Documentation<\/a><\/p>\n<h3>Detached Elements<\/h3>\n<p>This Tool is helpful for performance as it shows you memory leaks in the form of elements that are no longer in the DOM but still saved somewhere in the JavaScript Code of the Website.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/memory-problems\/dom-leaks\">Official Documentation<\/a><\/p>\n<h3>Developer Resources<\/h3>\n<p>This Tool shows you links to the source maps of your Website that are used when you transpile\/compile, for example, SASS to CSS or TypeScript to JavaScript. SASS will add a line like this to your compiled CSS: <code>\/*# sourceMappingURL=\/path\/to\/thefile.css.map *\/<\/code>. This will tell your browser where this file comes from. In this example, the browser will show the original SCSS \/ SASS file in the sources panel and make it editable.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/developer-resources\/developer-resources\">Official Documentation<\/a><\/p>\n<h3>Issues<\/h3>\n<p>This Panel analyzes your webpage and shows you issues related to accessibility, Compatibility across Browsers, Performance, Progressive Web Apps, Security, and other settings on your site.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/issues\/\">Official Documentation<\/a><\/p>\n<h3>Lighthouse<\/h3>\n<p>This Tool also helps you identify problems with your Website. It is often used when making PWAs or SEO-visible Websites. It does not run automatically; you can choose what the Tool should look out for.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/lighthouse\/lighthouse-tool\">Official Documentation<\/a><\/p>\n<h3>Media<\/h3>\n<p>This Panel shows you the Media Players ( Video and Audio ) of your Website and some helpful information about them and some associated events.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/media-panel\/\">Official Documentation<\/a><\/p>\n<h3>Memory<\/h3>\n<p>With this Tool, you can analyze the memory usage of your Website and optimize it according to this info.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/experimental-features\/share-traces\">Official Documentation<\/a>4<\/p>\n<h3>Network<\/h3>\n<p>With this Tool, you can see all network requests made after the initial page load. For example, on my little Website <a href=\"https:\/\/demos.maximmaeder.com\/demo\/catstragam\/\">Catstagram<\/a> you can see the fetch requests and images loaded in as the user scrolls down. You can also simulate a slower bandwidth or even offline to see how your Website behaves in case there is no connection.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/network\/\">Official Documentation<\/a><\/p>\n<h3>Network Request Blocking<\/h3>\n<p>It simply allows us to block specific requests on a URL pattern basis, so we can also simulate how our Website behaves in case another Website \/ API is down, but the rest works.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/network-request-blocking\/network-request-blocking-tool\">Official Documentation<\/a><\/p>\n<h3>Network conditions<\/h3>\n<p>This Tool also allows us to simulate network bandwidths, but here we can also simulate another user agent for example, chrome or firefox.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/network-conditions\/network-conditions-tool\">Official Documentation<\/a><\/p>\n<h3>Quick Source &amp; Sources<\/h3>\n<p>With sources, you can see all the files sent to you and where they are on the web server. This is useful if you want to download a picture from a page, but it was added via <code>background<\/code> in CSS. Here you will find all images that were sent.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/sources\/\">Official Documentation<\/a><\/p>\n<h3>Rendering<\/h3>\n<p>Rendering is pretty awesome as it allows us developers to see which regions of our Website are being repainted or where ther layout shifts. Here we can also simulate Media User Preferences like: <code>forced-colors<\/code>, <code>prefers-reduced-motion<\/code> or even <code>prefers-color-scheme<\/code>. Lastly, you can also see how your Website looks to people with vision deficiencies.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/rendering-tools\/rendering-tool\">Official Documentation<\/a><\/p>\n<h3>Search<\/h3>\n<p>Does what it says on the Box, It will help you search for any text or even Regular Expression within the shipped files and even the folder that is added in the Filestystem Tab of <em>Sources<\/em>.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/search\/search-tool\">Official Documentation<\/a><\/p>\n<h3>Security<\/h3>\n<p>This Panel simply shows you your certificate and connection and the certificates and connections with all external websites.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/security\/\">Official Documentation<\/a><\/p>\n<h3>Sensors<\/h3>\n<p>With the <em>Sensors<\/em> Panel you can emulate a fake position and fake device orientation so you can test the scripts on your Website that handler events and the such relating to this.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/device-mode\/orientation\">Official Documentation<\/a><\/p>\n<h3>Elements<\/h3>\n<p>This is the classic Tool, that everybody knows, here, you can look at the HTMl and CSS of your page and edit it easily.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/elements-tool\/elements-tool\">Official Documentation<\/a><\/p>\n<h3>Console<\/h3>\n<p>The console is your best friend when you want to debug JavaScript Code, as it will show your <code>console.log()<\/code> messages. You can also type in JS Commands here as it also acts as a REPL.<\/p>\n<p><a href=\"https:\/\/learn.microsoft.com\/en-us\/microsoft-edge\/devtools-guide-chromium\/console\/\">Official Documentation<\/a><\/p>\n<h3>Welcome<\/h3>\n<p>Shows updates of the Dev Tools and other lovely messages.<\/p>",
            "post_title": "All Edge Dev Tool Panels",
            "post_excerpt": "Let's take a quick look at every Dev Tool Panel \/ Tool in Microsoft Edge.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "all-edge-dev-tool-panels",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/all-edge-dev-tool-panels\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Conway's Game of Life with JavaScript",
        "description": "Let's implement Conway's Game of Life as an interactive Website using JavaScript, HTML and CSS.",
        "slug": "conways-game-of-life-with-javascript",
        "raw_content": "In this Tutorial we will implement Conway's Game of Life as an interactive website using JavaScript, HTML and CSS. If you don't know what the game of life is you can read about it on [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Conway%27s_Game_of_Life). In a nut shell, Conway's Game of Life is a Zero Player game where the player can set the state of tiles in a 2D grid plane to either dead or alive and then start a simulation. Every tick\/frame each tiles survival or state will be set according to its neighbors, if it has 2 or less alive neighbors it will die of loneliness, if it has four or more it will die of overpopulation, lastly tiles will stay alive or even be born if they have three or two alive neighbors.\r\n\r\nbelow you see some examples on wikipedia of special formations that can be created with the rules of the game of life. There are even some crazy things like glider guns that create infinite gliders.\r\n\r\n**Block**\r\n\r\n![Block](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/96\/Game_of_life_block_with_border.svg\/99px-Game_of_life_block_with_border.svg.png)\r\n\r\n**Blinker**\r\n\r\n![Blinker](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/95\/Game_of_life_blinker.gif)\r\n\r\n**Glider**\r\n\r\n![Glider](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f2\/Game_of_life_animated_glider.gif)\r\n\r\nYou can also visit the website we create today [here](https:\/\/demos.maximmaeder.com\/demo\/conway\/). So let's get started.\r\n\r\n## Markup for the User Interface\r\n\r\nBefore we get into the difficult JavaScript of this program lets cover the HTML for this website. Keep in mind that I wont go over everything, I will simply explain the important bits.\r\n\r\nIn the head of our page we add the link to the CSS file and we also link to the JavaScript via a `script` tag that has the `defer` attribute that will make it so the script is executed after the HTML content has been parsed.\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"style.css\">\r\n<script src=\"script.js\" defer><\/script>\r\n```\r\n\r\nContinuing we add two `div`'s to the page: The first one holds the controls for the Website which mainly consists of buttons for running, stopping and resetting the simulation. We add Id's to all of these so we can get them easily later in the JS code. The second one holds the actual grid and we give it the class `playground`.\r\n\r\n```html\r\n<div class=\"controls\">\r\n    <div>\r\n        <button id=\"run\">Run<\/button>\r\n        <button id=\"stop\">Stop<\/button>\r\n        <button id=\"reset\">Reset<\/button>\r\n\r\n        <input type=\"text\" placeholder=\"FrameTime (250ms)\" id=\"frametime\">\r\n    <\/div>\r\n\r\n<\/div>\r\n<div class=\"playground\"><\/div>\r\n```\r\n\r\n## JavaScript for the Game of Life\r\n\r\nLets continue with the JavaScript for the Game of Life.\r\n\r\nWe simply start by defining a bunch of variables that will come in handy later. Some of them are needed to keep track of the state of the programme like `isRunning`.\r\n\r\n```js\r\nconst playground = document.querySelector('.playground');\r\nconst runButton = document.querySelector('#run')\r\nconst stopButton = document.querySelector('#stop')\r\nconst resetButton = document.querySelector('#reset')\r\nconst frametimeInput = document.querySelector('#frametime')\r\nconst controlsContainer = document.querySelector('.controls')\r\n\r\nlet isRunning = false;\r\nlet intervalId;\r\n\r\nconst rows = 50\r\nconst columns = 70\r\n\r\nlet gridData = []\r\nlet savedData;\r\n```\r\n\r\nAfter that we populate the `gridData` array with objects each representing a cell in our grid. For each cell we store `row`, `column` and `live`. Then we also set the `grid-template-columns` CSS property on the playground cell container so it will show the the cell positioned correctly.\r\n\r\n```js\r\nfor (let row = 0; row < rows; row++) {\r\n    for (let column = 0; column < columns; column++) {\r\n        gridData.push({\r\n            row: row,\r\n            column: column,\r\n            live: false,\r\n        })\r\n    }\r\n}\r\n\r\nplayground.style.gridTemplateColumns = `repeat(${columns}, var(--size))`\r\n```\r\n\r\n### `renderCells` Function\r\n\r\nContinuing we call the `renderCells` function that will as its name implies rerender all the reflecting their state according to the `gridData` Array. This function will be used often so lets go over it right now.\r\n\r\n```js\r\nrenderCells(gridData)\r\n```\r\n\r\nThe function starts by emptying the playground cell container via its `innerHTML` property. We then loop over the `gridData` Array and create a new div for each one. Depending on its `live` property we add a class with the same name. In case the simulation is not running we also add an event listener to this div. This listener enables the user to toggle the live property of the given cell.\r\n\r\n```js\r\nfunction renderCells() {\r\n    playground.innerHTML = ''\r\n\r\n    gridData.forEach(cellData => {\r\n        const cellNode = document.createElement('div')\r\n\r\n        cellNode.classList.add('cell')\r\n        cellNode.classList.toggle('live', cellData.live)\r\n\r\n        playground.appendChild(cellNode)\r\n        \r\n        if ( isRunning ) return\r\n        cellNode.addEventListener('pointerdown', () => {\r\n            cellData.live = !cellData.live;\r\n            renderCells()\r\n        })\r\n    });\r\n}\r\n```\r\n\r\n### Simulating the Game Of Life\r\n\r\nNow lets get to the center of this whole programme. For this we add an event listener to the run button. It will set the `isRunning` variable to true so the user cant interact with the grid and we add the `is_running` class to the controls so we can apply some styling to them when the simulation is running. Now comes something important; In the Game of Life each tiles state is determined at the same time, so we have to keep that in mind in our code. Later we will cover the `simulateGeneration` function that does what is says. In JavaScript objects are passed by references and the only way to get fully rid of any and all connection we have to serialize the object and deserialize it with `JSON`.\r\n\r\n```js\r\nrunButton.addEventListener('pointerdown', () => {\r\n    isRunning = true;\r\n    controlsContainer.classList.add('is_running')\r\n    savedData = JSON.stringify(gridData)\r\n\r\n    const simulateGeneration = () => {\r\n        ...\r\n    }\r\n    simulateGeneration()\r\n\r\n    const time = parseInt(frametimeInput.value) || 250\r\n\r\n    intervalId = setInterval(simulateGeneration, time)\r\n})\r\n```\r\n\r\nWe then also run a `setInterval` with our function and we save its returned Id for later so we can also finish it.\r\n\r\nNow let's go over the function that simulates a generation. Inside this function we need to use the JSON serialization trick to make an exact copy of the gridData variable. We then loop over each cell and find all its neighbors. Depending on that we set the state of this cell.\r\n\r\n```js\r\nconst copiedGridData = JSON.parse(JSON.stringify(gridData))\r\n\r\n\/* Make a copy so the state is the same for all cells *\/\r\ncopiedGridData.forEach((copiedCell, index) => {\r\n\r\n    cell = gridData.find(o => o.row == copiedCell.row && o.column == copiedCell.column)\r\n\r\n    const adjacentCells = [\r\n        \/* Top and Bottom *\/\r\n        copiedGridData.find(o => o.row == cell.row + 1 && o.column == cell.column)?.live ?? false,\r\n        copiedGridData.find(o => o.row == cell.row - 1 && o.column == cell.column)?.live ?? false,\r\n\r\n        \/* Left and Right *\/\r\n        copiedGridData.find(o => o.column == cell.column + 1 && o.row == cell.row)?.live ?? false,\r\n        copiedGridData.find(o => o.column == cell.column - 1 && o.row == cell.row)?.live ?? false,\r\n        \r\n        \/* Bottom Left and Right *\/\r\n        copiedGridData.find(o => o.column == cell.column - 1 && o.row == cell.row + 1)?.live ?? false,\r\n        copiedGridData.find(o => o.column == cell.column + 1 && o.row == cell.row + 1)?.live ?? false,\r\n\r\n        \/* Top Left and Right *\/\r\n        copiedGridData.find(o => o.column == cell.column - 1 && o.row == cell.row - 1)?.live ?? false,\r\n        copiedGridData.find(o => o.column == cell.column + 1 && o.row == cell.row - 1)?.live ?? false,\r\n    ].filter(Boolean).length;\r\n\r\n\r\n    if (adjacentCells == 3) {\r\n        cell.live = true;\r\n    }\r\n    if (adjacentCells <= 1) {\r\n        cell.live = false;\r\n    }\r\n    if (adjacentCells >= 4) {\r\n        cell.live = false;\r\n    }\r\n})\r\n```\r\n\r\n### Other Control Code\r\n\r\nLastly we add two more event listeners that will handle stopping and resetting the simulation and grid data.\r\n\r\n```js\r\nstopButton.addEventListener('pointerdown', () => {\r\n    console.log('Stopping Simulation ...');\r\n    controlsContainer.classList.remove('is_running')\r\n\r\n    clearInterval(intervalId);\r\n    isRunning = false;\r\n\r\n    gridData = JSON.parse(savedData)\r\n\r\n    renderCells();\r\n})\r\n\r\nresetButton.addEventListener('pointerdown', () => {\r\n    gridData.map(o => o.live = false);\r\n    renderCells()\r\n})\r\n```\r\n\r\n## Styling it with CSS\r\n\r\nLastly lets also go over the CSS of our little Website. We start by importing a custom font with the `@font-face` media rule. We can now use the name `pixel` for the font-family property of any element.\r\n\r\n```css\r\n@font-face {\r\n    font-family: pixel;\r\n    src: url(font\/pixel.ttf);\r\n}\r\n```\r\n\r\nNext up we set the `color-scheme` property of the root element to `dark` which will make it so the default styling of element like scrollbar's or input is dark instead of light.\r\n\r\n```css\r\n:root {\r\n    color-scheme: dark;\r\n}\r\n```\r\n\r\nLastly we style the playground and the cells for the playground we make use of css variables so we can avoid having to change code at different places when we want to change one thing. Also mind that we use hsl for color values since its mor obvious what color will render and we can easier make shades of colors.\r\n\r\n```css\r\n.playground {\r\n    overflow: auto;\r\n    padding: 1rem;\r\n    flex-grow: 1;\r\n    --size: 20px;\r\n    display: grid;\r\n    grid-template-columns: repeat(15, var(--size));\r\n    grid-auto-rows: var(--size);\r\n    gap: calc(var(--size) \/ 10);\r\n}\r\n\r\n.cell {\r\n    background-color: hsl(0, 0%, 23%);\r\n    color: hsl(0, 0%, 30%);\r\n    text-align: center;\r\n    font-size: 0.3rem;\r\n    padding:0.1rem;\r\n}\r\n\r\n.cell.live {\r\n    background-color: hsl(0, 0%, 50%);\r\n}\r\n```\r\n\r\n## Conclusion\r\n\r\nSo thats it, I know its a lot and you may have some things that you don't understand. I just hope that now have another Idea for a cool program that you can make. Always keep in mind that I am no pro myself just a programming enthusiast \ud83d\ude01.",
        "featured_image": "032 - Conways Game Of Life\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 701,
            "post_author": "1",
            "post_date": "2023-02-11 13:55:22",
            "post_date_gmt": "2023-02-11 12:55:22",
            "post_content": "<p>In this Tutorial we will implement Conway's Game of Life as an interactive website using JavaScript, HTML and CSS. If you don't know what the game of life is you can read about it on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Conway%27s_Game_of_Life\">wikipedia<\/a>. In a nut shell, Conway's Game of Life is a Zero Player game where the player can set the state of tiles in a 2D grid plane to either dead or alive and then start a simulation. Every tick\/frame each tiles survival or state will be set according to its neighbors, if it has 2 or less alive neighbors it will die of loneliness, if it has four or more it will die of overpopulation, lastly tiles will stay alive or even be born if they have three or two alive neighbors.<\/p>\n<p>below you see some examples on wikipedia of special formations that can be created with the rules of the game of life. There are even some crazy things like glider guns that create infinite gliders.<\/p>\n<p><strong>Block<\/strong><\/p>\n<p><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/96\/Game_of_life_block_with_border.svg\/99px-Game_of_life_block_with_border.svg.png\" alt=\"Block\" \/><\/p>\n<p><strong>Blinker<\/strong><\/p>\n<p><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/95\/Game_of_life_blinker.gif\" alt=\"Blinker\" \/><\/p>\n<p><strong>Glider<\/strong><\/p>\n<p><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f2\/Game_of_life_animated_glider.gif\" alt=\"Glider\" \/><\/p>\n<p>You can also visit the website we create today <a href=\"https:\/\/demos.maximmaeder.com\/demo\/conway\/\">here<\/a>. So let's get started.<\/p>\n<h2>Markup for the User Interface<\/h2>\n<p>Before we get into the difficult JavaScript of this program lets cover the HTML for this website. Keep in mind that I wont go over everything, I will simply explain the important bits.<\/p>\n<p>In the head of our page we add the link to the CSS file and we also link to the JavaScript via a <code>script<\/code> tag that has the <code>defer<\/code> attribute that will make it so the script is executed after the HTML content has been parsed.<\/p>\n<pre><code class=\"language-html\">&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;script src=\"script.js\" defer&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Continuing we add two <code>div<\/code>'s to the page: The first one holds the controls for the Website which mainly consists of buttons for running, stopping and resetting the simulation. We add Id's to all of these so we can get them easily later in the JS code. The second one holds the actual grid and we give it the class <code>playground<\/code>.<\/p>\n<pre><code class=\"language-html\">&lt;div class=\"controls\"&gt;\n    &lt;div&gt;\n        &lt;button id=\"run\"&gt;Run&lt;\/button&gt;\n        &lt;button id=\"stop\"&gt;Stop&lt;\/button&gt;\n        &lt;button id=\"reset\"&gt;Reset&lt;\/button&gt;\n\n        &lt;input type=\"text\" placeholder=\"FrameTime (250ms)\" id=\"frametime\"&gt;\n    &lt;\/div&gt;\n\n&lt;\/div&gt;\n&lt;div class=\"playground\"&gt;&lt;\/div&gt;<\/code><\/pre>\n<h2>JavaScript for the Game of Life<\/h2>\n<p>Lets continue with the JavaScript for the Game of Life.<\/p>\n<p>We simply start by defining a bunch of variables that will come in handy later. Some of them are needed to keep track of the state of the programme like <code>isRunning<\/code>.<\/p>\n<pre><code class=\"language-js\">const playground = document.querySelector('.playground');\nconst runButton = document.querySelector('#run')\nconst stopButton = document.querySelector('#stop')\nconst resetButton = document.querySelector('#reset')\nconst frametimeInput = document.querySelector('#frametime')\nconst controlsContainer = document.querySelector('.controls')\n\nlet isRunning = false;\nlet intervalId;\n\nconst rows = 50\nconst columns = 70\n\nlet gridData = []\nlet savedData;<\/code><\/pre>\n<p>After that we populate the <code>gridData<\/code> array with objects each representing a cell in our grid. For each cell we store <code>row<\/code>, <code>column<\/code> and <code>live<\/code>. Then we also set the <code>grid-template-columns<\/code> CSS property on the playground cell container so it will show the the cell positioned correctly.<\/p>\n<pre><code class=\"language-js\">for (let row = 0; row &lt; rows; row++) {\n    for (let column = 0; column &lt; columns; column++) {\n        gridData.push({\n            row: row,\n            column: column,\n            live: false,\n        })\n    }\n}\n\nplayground.style.gridTemplateColumns = `repeat(${columns}, var(--size))`<\/code><\/pre>\n<h3><code>renderCells<\/code> Function<\/h3>\n<p>Continuing we call the <code>renderCells<\/code> function that will as its name implies rerender all the reflecting their state according to the <code>gridData<\/code> Array. This function will be used often so lets go over it right now.<\/p>\n<pre><code class=\"language-js\">renderCells(gridData)<\/code><\/pre>\n<p>The function starts by emptying the playground cell container via its <code>innerHTML<\/code> property. We then loop over the <code>gridData<\/code> Array and create a new div for each one. Depending on its <code>live<\/code> property we add a class with the same name. In case the simulation is not running we also add an event listener to this div. This listener enables the user to toggle the live property of the given cell.<\/p>\n<pre><code class=\"language-js\">function renderCells() {\n    playground.innerHTML = ''\n\n    gridData.forEach(cellData =&gt; {\n        const cellNode = document.createElement('div')\n\n        cellNode.classList.add('cell')\n        cellNode.classList.toggle('live', cellData.live)\n\n        playground.appendChild(cellNode)\n\n        if ( isRunning ) return\n        cellNode.addEventListener('pointerdown', () =&gt; {\n            cellData.live = !cellData.live;\n            renderCells()\n        })\n    });\n}<\/code><\/pre>\n<h3>Simulating the Game Of Life<\/h3>\n<p>Now lets get to the center of this whole programme. For this we add an event listener to the run button. It will set the <code>isRunning<\/code> variable to true so the user cant interact with the grid and we add the <code>is_running<\/code> class to the controls so we can apply some styling to them when the simulation is running. Now comes something important; In the Game of Life each tiles state is determined at the same time, so we have to keep that in mind in our code. Later we will cover the <code>simulateGeneration<\/code> function that does what is says. In JavaScript objects are passed by references and the only way to get fully rid of any and all connection we have to serialize the object and deserialize it with <code>JSON<\/code>.<\/p>\n<pre><code class=\"language-js\">runButton.addEventListener('pointerdown', () =&gt; {\n    isRunning = true;\n    controlsContainer.classList.add('is_running')\n    savedData = JSON.stringify(gridData)\n\n    const simulateGeneration = () =&gt; {\n        ...\n    }\n    simulateGeneration()\n\n    const time = parseInt(frametimeInput.value) || 250\n\n    intervalId = setInterval(simulateGeneration, time)\n})<\/code><\/pre>\n<p>We then also run a <code>setInterval<\/code> with our function and we save its returned Id for later so we can also finish it.<\/p>\n<p>Now let's go over the function that simulates a generation. Inside this function we need to use the JSON serialization trick to make an exact copy of the gridData variable. We then loop over each cell and find all its neighbors. Depending on that we set the state of this cell.<\/p>\n<pre><code class=\"language-js\">const copiedGridData = JSON.parse(JSON.stringify(gridData))\n\n\/* Make a copy so the state is the same for all cells *\/\ncopiedGridData.forEach((copiedCell, index) =&gt; {\n\n    cell = gridData.find(o =&gt; o.row == copiedCell.row &amp;&amp; o.column == copiedCell.column)\n\n    const adjacentCells = [\n        \/* Top and Bottom *\/\n        copiedGridData.find(o =&gt; o.row == cell.row + 1 &amp;&amp; o.column == cell.column)?.live ?? false,\n        copiedGridData.find(o =&gt; o.row == cell.row - 1 &amp;&amp; o.column == cell.column)?.live ?? false,\n\n        \/* Left and Right *\/\n        copiedGridData.find(o =&gt; o.column == cell.column + 1 &amp;&amp; o.row == cell.row)?.live ?? false,\n        copiedGridData.find(o =&gt; o.column == cell.column - 1 &amp;&amp; o.row == cell.row)?.live ?? false,\n\n        \/* Bottom Left and Right *\/\n        copiedGridData.find(o =&gt; o.column == cell.column - 1 &amp;&amp; o.row == cell.row + 1)?.live ?? false,\n        copiedGridData.find(o =&gt; o.column == cell.column + 1 &amp;&amp; o.row == cell.row + 1)?.live ?? false,\n\n        \/* Top Left and Right *\/\n        copiedGridData.find(o =&gt; o.column == cell.column - 1 &amp;&amp; o.row == cell.row - 1)?.live ?? false,\n        copiedGridData.find(o =&gt; o.column == cell.column + 1 &amp;&amp; o.row == cell.row - 1)?.live ?? false,\n    ].filter(Boolean).length;\n\n    if (adjacentCells == 3) {\n        cell.live = true;\n    }\n    if (adjacentCells &lt;= 1) {\n        cell.live = false;\n    }\n    if (adjacentCells &gt;= 4) {\n        cell.live = false;\n    }\n})<\/code><\/pre>\n<h3>Other Control Code<\/h3>\n<p>Lastly we add two more event listeners that will handle stopping and resetting the simulation and grid data.<\/p>\n<pre><code class=\"language-js\">stopButton.addEventListener('pointerdown', () =&gt; {\n    console.log('Stopping Simulation ...');\n    controlsContainer.classList.remove('is_running')\n\n    clearInterval(intervalId);\n    isRunning = false;\n\n    gridData = JSON.parse(savedData)\n\n    renderCells();\n})\n\nresetButton.addEventListener('pointerdown', () =&gt; {\n    gridData.map(o =&gt; o.live = false);\n    renderCells()\n})<\/code><\/pre>\n<h2>Styling it with CSS<\/h2>\n<p>Lastly lets also go over the CSS of our little Website. We start by importing a custom font with the <code>@font-face<\/code> media rule. We can now use the name <code>pixel<\/code> for the font-family property of any element.<\/p>\n<pre><code class=\"language-css\">@font-face {\n    font-family: pixel;\n    src: url(font\/pixel.ttf);\n}<\/code><\/pre>\n<p>Next up we set the <code>color-scheme<\/code> property of the root element to <code>dark<\/code> which will make it so the default styling of element like scrollbar's or input is dark instead of light.<\/p>\n<pre><code class=\"language-css\">:root {\n    color-scheme: dark;\n}<\/code><\/pre>\n<p>Lastly we style the playground and the cells for the playground we make use of css variables so we can avoid having to change code at different places when we want to change one thing. Also mind that we use hsl for color values since its mor obvious what color will render and we can easier make shades of colors.<\/p>\n<pre><code class=\"language-css\">.playground {\n    overflow: auto;\n    padding: 1rem;\n    flex-grow: 1;\n    --size: 20px;\n    display: grid;\n    grid-template-columns: repeat(15, var(--size));\n    grid-auto-rows: var(--size);\n    gap: calc(var(--size) \/ 10);\n}\n\n.cell {\n    background-color: hsl(0, 0%, 23%);\n    color: hsl(0, 0%, 30%);\n    text-align: center;\n    font-size: 0.3rem;\n    padding:0.1rem;\n}\n\n.cell.live {\n    background-color: hsl(0, 0%, 50%);\n}<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p>So thats it, I know its a lot and you may have some things that you don't understand. I just hope that now have another Idea for a cool program that you can make. Always keep in mind that I am no pro myself just a programming enthusiast \ud83d\ude01.<\/p>",
            "post_title": "Conway's Game of Life with JavaScript",
            "post_excerpt": "Let's implement Conway's Game of Life as an interactive Website using JavaScript, HTML and CSS.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "conways-game-of-life-with-javascript",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-11 13:55:22",
            "post_modified_gmt": "2023-02-11 12:55:22",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/11\/conways-game-of-life-with-javascript\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    },
    {
        "name": "Programming Project Ideas",
        "description": "Let's review some project ideas you could work on. Learning by Doing.",
        "slug": "programming-project-ideas",
        "tags": [
            "ideas",
            "programming"
        ],
        "category": "Programming",
        "status": "publish",
        "raw_content": "The best way to learn is to do, and that's why I want to inspire you by presenting Ideas for programming projects that you could work on in your free time. This\r\n\r\nFurthermore, I will provide you with starting points for some of the projects by linking to other articles by me that describe these projects.\r\n\r\nSo let's get right into it!\r\n\r\n## Recreating Famous Software or Famous UI Elements\r\n\r\n![Calculator with HTML, CSS and JavaScript](https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/10\/Screenshot-253.png)\r\n\r\n*My Web Based [Calculator](https:\/\/maximmaeder.com\/calculator-with-history-function-in-html-css-and-javascript\/).*\r\n\r\nFinding project ideas takes work, but you can get inspired by already existing software. Sometimes I think: *\"wow this is cool but how was it made?\"*. Let's go over some inspirations.\r\n\r\n- Visual Studio Code (Or any Code Editor): You could try to recreate [syntax highlighting](https:\/\/maximmaeder.com\/highlighted-dummy-code-editor-with-html-css-javascript-vue-js\/).\r\n- Microsoft Word: Word is a *What you see is what you get* (WYSIWYG) Editor based on HTML and CSS. Recreating something like this will be challenging but rewarding in the end.\r\n- Microsoft Excel: You could once again use your knowledge of HTML, CSS, and JavaScript to create your own [table calculation program](https:\/\/maximmaeder.com\/simple-spreadsheet-app-with-vue\/).\r\n- Splash\/Wave Button: [Google's Material Design](https:\/\/design.google\/library\/designing-material\/) is probably most well known for its [special buttons](https:\/\/maximmaeder.com\/ripple-button-with-html-sass-and-javascript\/) that have this wave effect.\r\n- Quizzes: There are many quiz apps out there like Kahoot or Quizlet, and you can just as easily [create a quiz by yourself](https:\/\/maximmaeder.com\/country-quiz-with-html-sass-and-javascript\/) about any topic you find interesting, or you can utilize a [trivia api](https:\/\/the-trivia-api.com\/).\r\n- Explorer: If you know python, you can use tkinter to make your own file explorer.\r\n- OBS: OBS is helpful when you want to record what you do on your computer. And you can recreate this program with JavaScript since there is an API for [Capturing Screens](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Screen_Capture_API\/Using_Screen_Capture).\r\n- Paint: Is the Default drawing program on windows, and It is not helpful, but it would be fun to recreate it so you could dive into the [canvas API  of JavaScript](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\/canvas) or use the [graphics Library Pygame in Python](https:\/\/www.thepythoncode.com\/article\/make-a-drawing-program-with-python).\r\n- Calculator: This one is pretty straightforward so you could add some advanced features to your calculator [like a calculation history](https:\/\/maximmaeder.com\/calculator-with-history-function-in-html-css-and-javascript\/).\r\n\r\nNow also for some honorable mentions.\r\n\r\n[Tabs](https:\/\/maximmaeder.com\/tabs-with-html-sass-and-js\/), [Accordions](https:\/\/maximmaeder.com\/accordion-with-html-css-sass-and-javascript\/), [Dropdowns](https:\/\/maximmaeder.com\/dropdown-with-sass-css\/), [Sortable Tables](https:\/\/maximmaeder.com\/sortable-table-with-javascript\/), etc.\r\n\r\nEssentially think of any UI Component.\r\n\r\n## Making Games\r\n\r\n![My Game Tile Jumper 2088](https:\/\/maximmaeder.com\/wp-content\/uploads\/2023\/02\/game_making.png)\r\n\r\n*My Game [Tile Jumper 2088](https:\/\/maximino.itch.io\/tile-jumper-2088).*\r\n\r\nMaking games today is easier than ever. There are some fantastic tools out there that allow us to make awesome games with a small to no budget.\r\n\r\nI like the [Godot Game Engine](https:\/\/godotengine.org\/), and when it comes to graphics, I boat well with [paint.net](https:\/\/www.getpaint.net\/) and Adobe Illustrator.\r\n\r\nGame Jams often have a topic that should serve as an inspiration and constraint that you can use to make a game in a short amount of time.\r\n\r\nYou could also use the *Physics Power* that these engines have to make simulations or other more test-oriented software like a planet simulation.\r\n\r\nOnce Again, you can get inspiration from the big AAA titles or other games.\r\n\r\nLastly, I don't know if it is just me, but I think making games is rewarding especially seeing your friends play your games (and fail \ud83d\ude00).\r\n\r\n## Packages and Languages\r\n\r\n![Anime.js JavaScript Animation Library](https:\/\/maximmaeder.com\/wp-content\/uploads\/2023\/02\/animejs.png)\r\n\r\n*[Anime.js](https:\/\/animejs.com\/) JavaScript Animation Library*\r\n\r\nNow some packages could inspire you to build something incredible.\r\n\r\nLet's go over some JavaScript and Python Packages you could try out.\r\n\r\n- [Anime.js](https:\/\/animejs.com\/): Is a simple and intuitive animation library for the frontend. Its documentation is excellent, and you will quickly get the hang of it.\r\n- [Three.js](https:\/\/threejs.org\/): Is a 3D Library that is a bit harder to learn but all the more rewarding.\r\n- [Konva.js](https:\/\/konvajs.org\/): I once asked myself how visual editors like Illustrator were made and then stumbled upon this little package that enables you to make editable 2D Canvas Scene with a wide variety of objects.\r\n- [Monaco Editor](https:\/\/microsoft.github.io\/monaco-editor\/): Is the Code Editor built into VS Code and it is awesome! You could, for example, make your own playground like [jsbin](https:\/\/jsbin.com\/?html,css,js,output).\r\n- [Tkinter](https:\/\/docs.python.org\/fr\/3\/library\/tkinter.html): Is a Python package to make User Interfaces. At first, it behaves rather clunky, but it is just fine for little projects.\r\n- [pywebview](https:\/\/pypi.org\/project\/pywebview\/): It Is somewhat of a combination of Python and JavaScript because it allows us to make a desktop app with Web Technologies and Python in the Backend to interact with the OS.\r\n\r\n## Make Notes of Things you Encounter\r\n\r\nLastly, I want to give you a tip.\r\n\r\nEvery time you encounter something you think is interesting or noteworthy, write it down! Make a list of all these things and store it in a safe location so you can, every once in a while, when you are bored, look at your list of topics and should have new ideas for what to program.\r\n\r\nI have a Private Github where I store a Markdown document with all the things I want to make once or that I think are fascinating.",
        "featured_image": "033 - Programming Project Ideas\/_blog\/preview.png",
        "_is_published": true,
        "_local_post_data": {
            "ID": 712,
            "post_author": "1",
            "post_date": "2023-02-13 12:56:00",
            "post_date_gmt": "2023-02-13 11:56:00",
            "post_content": "<p>The best way to learn is to do, and that's why I want to inspire you by presenting Ideas for programming projects that you could work on in your free time. This<\/p>\n<p>Furthermore, I will provide you with starting points for some of the projects by linking to other articles by me that describe these projects.<\/p>\n<p>So let's get right into it!<\/p>\n<h2>Recreating Famous Software or Famous UI Elements<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2022\/10\/Screenshot-253.png\" alt=\"Calculator with HTML, CSS and JavaScript\" \/><\/p>\n<p><em>My Web Based <a href=\"https:\/\/maximmaeder.com\/calculator-with-history-function-in-html-css-and-javascript\/\">Calculator<\/a>.<\/em><\/p>\n<p>Finding project ideas takes work, but you can get inspired by already existing software. Sometimes I think: <em>&quot;wow this is cool but how was it made?&quot;<\/em>. Let's go over some inspirations.<\/p>\n<ul>\n<li>Visual Studio Code (Or any Code Editor): You could try to recreate <a href=\"https:\/\/maximmaeder.com\/highlighted-dummy-code-editor-with-html-css-javascript-vue-js\/\">syntax highlighting<\/a>.<\/li>\n<li>Microsoft Word: Word is a <em>What you see is what you get<\/em> (WYSIWYG) Editor based on HTML and CSS. Recreating something like this will be challenging but rewarding in the end.<\/li>\n<li>Microsoft Excel: You could once again use your knowledge of HTML, CSS, and JavaScript to create your own <a href=\"https:\/\/maximmaeder.com\/simple-spreadsheet-app-with-vue\/\">table calculation program<\/a>.<\/li>\n<li>Splash\/Wave Button: <a href=\"https:\/\/design.google\/library\/designing-material\/\">Google's Material Design<\/a> is probably most well known for its <a href=\"https:\/\/maximmaeder.com\/ripple-button-with-html-sass-and-javascript\/\">special buttons<\/a> that have this wave effect.<\/li>\n<li>Quizzes: There are many quiz apps out there like Kahoot or Quizlet, and you can just as easily <a href=\"https:\/\/maximmaeder.com\/country-quiz-with-html-sass-and-javascript\/\">create a quiz by yourself<\/a> about any topic you find interesting, or you can utilize a <a href=\"https:\/\/the-trivia-api.com\/\">trivia api<\/a>.<\/li>\n<li>Explorer: If you know python, you can use tkinter to make your own file explorer.<\/li>\n<li>OBS: OBS is helpful when you want to record what you do on your computer. And you can recreate this program with JavaScript since there is an API for <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Screen_Capture_API\/Using_Screen_Capture\">Capturing Screens<\/a>.<\/li>\n<li>Paint: Is the Default drawing program on windows, and It is not helpful, but it would be fun to recreate it so you could dive into the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\/canvas\">canvas API  of JavaScript<\/a> or use the <a href=\"https:\/\/www.thepythoncode.com\/article\/make-a-drawing-program-with-python\">graphics Library Pygame in Python<\/a>.<\/li>\n<li>Calculator: This one is pretty straightforward so you could add some advanced features to your calculator <a href=\"https:\/\/maximmaeder.com\/calculator-with-history-function-in-html-css-and-javascript\/\">like a calculation history<\/a>.<\/li>\n<\/ul>\n<p>Now also for some honorable mentions.<\/p>\n<p><a href=\"https:\/\/maximmaeder.com\/tabs-with-html-sass-and-js\/\">Tabs<\/a>, <a href=\"https:\/\/maximmaeder.com\/accordion-with-html-css-sass-and-javascript\/\">Accordions<\/a>, <a href=\"https:\/\/maximmaeder.com\/dropdown-with-sass-css\/\">Dropdowns<\/a>, <a href=\"https:\/\/maximmaeder.com\/sortable-table-with-javascript\/\">Sortable Tables<\/a>, etc.<\/p>\n<p>Essentially think of any UI Component.<\/p>\n<h2>Making Games<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2023\/02\/game_making.png\" alt=\"My Game Tile Jumper 2088\" \/><\/p>\n<p><em>My Game <a href=\"https:\/\/maximino.itch.io\/tile-jumper-2088\">Tile Jumper 2088<\/a>.<\/em><\/p>\n<p>Making games today is easier than ever. There are some fantastic tools out there that allow us to make awesome games with a small to no budget.<\/p>\n<p>I like the <a href=\"https:\/\/godotengine.org\/\">Godot Game Engine<\/a>, and when it comes to graphics, I boat well with <a href=\"https:\/\/www.getpaint.net\/\">paint.net<\/a> and Adobe Illustrator.<\/p>\n<p>Game Jams often have a topic that should serve as an inspiration and constraint that you can use to make a game in a short amount of time.<\/p>\n<p>You could also use the <em>Physics Power<\/em> that these engines have to make simulations or other more test-oriented software like a planet simulation.<\/p>\n<p>Once Again, you can get inspiration from the big AAA titles or other games.<\/p>\n<p>Lastly, I don't know if it is just me, but I think making games is rewarding especially seeing your friends play your games (and fail \ud83d\ude00).<\/p>\n<h2>Packages and Languages<\/h2>\n<p><img src=\"https:\/\/maximmaeder.com\/wp-content\/uploads\/2023\/02\/animejs.png\" alt=\"Anime.js JavaScript Animation Library\" \/><\/p>\n<p><em><a href=\"https:\/\/animejs.com\/\">Anime.js<\/a> JavaScript Animation Library<\/em><\/p>\n<p>Now some packages could inspire you to build something incredible.<\/p>\n<p>Let's go over some JavaScript and Python Packages you could try out.<\/p>\n<ul>\n<li><a href=\"https:\/\/animejs.com\/\">Anime.js<\/a>: Is a simple and intuitive animation library for the frontend. Its documentation is excellent, and you will quickly get the hang of it.<\/li>\n<li><a href=\"https:\/\/threejs.org\/\">Three.js<\/a>: Is a 3D Library that is a bit harder to learn but all the more rewarding.<\/li>\n<li><a href=\"https:\/\/konvajs.org\/\">Konva.js<\/a>: I once asked myself how visual editors like Illustrator were made and then stumbled upon this little package that enables you to make editable 2D Canvas Scene with a wide variety of objects.<\/li>\n<li><a href=\"https:\/\/microsoft.github.io\/monaco-editor\/\">Monaco Editor<\/a>: Is the Code Editor built into VS Code and it is awesome! You could, for example, make your own playground like <a href=\"https:\/\/jsbin.com\/?html,css,js,output\">jsbin<\/a>.<\/li>\n<li><a href=\"https:\/\/docs.python.org\/fr\/3\/library\/tkinter.html\">Tkinter<\/a>: Is a Python package to make User Interfaces. At first, it behaves rather clunky, but it is just fine for little projects.<\/li>\n<li><a href=\"https:\/\/pypi.org\/project\/pywebview\/\">pywebview<\/a>: It Is somewhat of a combination of Python and JavaScript because it allows us to make a desktop app with Web Technologies and Python in the Backend to interact with the OS.<\/li>\n<\/ul>\n<h2>Make Notes of Things you Encounter<\/h2>\n<p>Lastly, I want to give you a tip.<\/p>\n<p>Every time you encounter something you think is interesting or noteworthy, write it down! Make a list of all these things and store it in a safe location so you can, every once in a while, when you are bored, look at your list of topics and should have new ideas for what to program.<\/p>\n<p>I have a Private Github where I store a Markdown document with all the things I want to make once or that I think are fascinating.<\/p>",
            "post_title": "Programming Project Ideas",
            "post_excerpt": "Let's review some project ideas you could work on. Learning by Doing.",
            "post_status": "publish",
            "comment_status": "open",
            "ping_status": "open",
            "post_password": "",
            "post_name": "programming-project-ideas",
            "to_ping": "",
            "pinged": "",
            "post_modified": "2023-02-13 12:56:00",
            "post_modified_gmt": "2023-02-13 11:56:00",
            "post_content_filtered": "",
            "post_parent": 0,
            "guid": "http:\/\/localhost\/git-to-wordpress\/wordpress\/2023\/02\/13\/programming-project-ideas\/",
            "menu_order": 0,
            "post_type": "post",
            "post_mime_type": "",
            "comment_count": "0",
            "filter": "raw"
        }
    }
]